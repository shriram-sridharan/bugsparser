/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /u/s/h/shrirams/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-04 16:08:05
 *     -                 for the lexer : BUGSLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
BUGSLexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pBUGSLexer, which is returned from a call to BUGSLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pBUGSLexer are  as follows:
 *
 *  - 
 void
      pBUGSLexer->ABSOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->BERNOULLIOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->BETAOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CENSORBEGINWITHC(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CENSORBEGINWITHI(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CLOGLOGOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CLOSEBRACE(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CLOSEBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CLOSESQUAREBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->COLON(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->COMMA(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->DIRICHLETOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->DIV(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->FORSTART(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->IN(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->INVERSEOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->LEFTPOINTER(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->LOGITOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->LOGOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->MINUS(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->MODEL(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->MULT(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->MUTLTINOMIALOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->OPENBRACE(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->OPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->OPENSQUAREBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->PLUS(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->PROBITOPENBRACKET(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->TILDE(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->TRUNCATIONBEGIN(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CONSTANTINT(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->NODENAME(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->CONSTANTVALUE(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->WHITESPACE(pBUGSLexer)
 *  - 
 void
      pBUGSLexer->Tokens(pBUGSLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_BUGSLexer_H
#define _BUGSLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct BUGSLexer_Ctx_struct BUGSLexer, * pBUGSLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
BUGSLexer

 */
struct BUGSLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mABSOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mBERNOULLIOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mBETAOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCENSORBEGINWITHC)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCENSORBEGINWITHI)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCLOGLOGOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCLOSEBRACE)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCLOSEBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCLOSESQUAREBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCOLON)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCOMMA)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mDIRICHLETOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mDIV)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mFORSTART)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mIN)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mINVERSEOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mLEFTPOINTER)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mLOGITOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mLOGOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mMINUS)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mMODEL)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mMULT)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mMUTLTINOMIALOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mOPENBRACE)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mOPENSQUAREBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mPLUS)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mPROBITOPENBRACKET)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mTILDE)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mTRUNCATIONBEGIN)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCONSTANTINT)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mNODENAME)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mCONSTANTVALUE)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct BUGSLexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct BUGSLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct BUGSLexer_Ctx_struct * ctx);
    void	    (*free)   (struct BUGSLexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pBUGSLexer BUGSLexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pBUGSLexer BUGSLexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ABSOPENBRACKET      4
#define BERNOULLIOPENBRACKET      5
#define BETAOPENBRACKET      6
#define CENSORBEGINWITHC      7
#define CENSORBEGINWITHI      8
#define CLOGLOGOPENBRACKET      9
#define CLOSEBRACE      10
#define CLOSEBRACKET      11
#define CLOSESQUAREBRACKET      12
#define COLON      13
#define COMMA      14
#define CONSTANTINT      15
#define CONSTANTVALUE      16
#define DIRICHLETOPENBRACKET      17
#define DIV      18
#define FORSTART      19
#define IN      20
#define INVERSEOPENBRACKET      21
#define LEFTPOINTER      22
#define LOGITOPENBRACKET      23
#define LOGOPENBRACKET      24
#define MINUS      25
#define MODEL      26
#define MULT      27
#define MUTLTINOMIALOPENBRACKET      28
#define NODENAME      29
#define OPENBRACE      30
#define OPENBRACKET      31
#define OPENSQUAREBRACKET      32
#define PLUS      33
#define PROBITOPENBRACKET      34
#define TILDE      35
#define TRUNCATIONBEGIN      36
#define WHITESPACE      37
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for BUGSLexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
