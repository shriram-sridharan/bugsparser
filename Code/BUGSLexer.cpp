/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-06 22:00:34
 *     -                 for the lexer : BUGSLexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSLexer.hpp"
/* ----------------------------------------- */



	namespace BUGS {


/** String literals used by BUGSLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR_UCHAR	lit_1[]  = { 0x61, 0x62, 0x73, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_2[]  = { 0x64, 0x62, 0x65, 0x72, 0x6E, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_3[]  = { 0x64, 0x62, 0x65, 0x74, 0x61, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_4[]  = { 0x43, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_5[]  = { 0x49, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_6[]  = { 0x63, 0x6C, 0x6F, 0x67, 0x6C, 0x6F, 0x67, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_7[]  = { 0x64, 0x64, 0x69, 0x72, 0x69, 0x63, 0x68, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_8[]  = { 0x66, 0x6F, 0x72,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_9[]  = { 0x69, 0x6E,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_10[]  = { 0x69, 0x6E, 0x76, 0x65, 0x72, 0x73, 0x65, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_11[]  = { 0x3C, 0x2D,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_12[]  = { 0x6C, 0x6F, 0x67, 0x69, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_13[]  = { 0x6C, 0x6F, 0x67, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_14[]  = { 0x6D, 0x6F, 0x64, 0x65, 0x6C,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_15[]  = { 0x64, 0x6D, 0x75, 0x6C, 0x74, 0x69, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_16[]  = { 0x70, 0x72, 0x6F, 0x62, 0x69, 0x74, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};
static ANTLR_UCHAR	lit_17[]  = { 0x54, 0x28,  antlr3::ANTLR_STRING_TERMINATOR};

	}



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

using namespace antlr3;

	namespace BUGS {


/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



BUGSLexer::~BUGSLexer()
{
}

void
BUGSLexer::reset()
{
    this->get_rec()->reset();
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/bugsparser/Parser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSLexer::getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called BUGSLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return
 *     - Success pBUGSLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSLexer::BUGSLexer(StreamType* instream)
:BUGSLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, NULL)
{
	// See if we can create a new lexer with the standard constructor
	//
	this->init(instream );
}

/** \brief Create a new lexer called BUGSLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return
 *     - Success pBUGSLexer initialized for the lex start
 *     - Fail NULL
 */
BUGSLexer::BUGSLexer(StreamType* instream, RecognizerSharedStateType* state)
:BUGSLexerImplTraits::BaseLexerType(ANTLR_SIZE_HINT, instream, state)
{
	this->init(instream );
}

void BUGSLexer::init(StreamType* instream)
{
    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function.
     *
     * We don't use the macros defined in BUGSLexer.h here so you can get a sense
     * of what goes where.
     */

}


/* =========================================================================
 * DFA tables for the lexer
 */
/** Static dfa state tables for Cyclic dfa:
 *    1:1: Tokens : ( ABSOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | DIRICHLETOPENBRACKET | DIV | FORSTART | IN | INVERSEOPENBRACKET | LEFTPOINTER | LOGITOPENBRACKET | LOGOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PLUS | PROBITOPENBRACKET | TILDE | TRUNCATIONBEGIN | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE );
 */
static const ANTLR_INT32 dfa11_eot[95] =
    {
	-1, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, -1, 27, 39, 27, 
	-1, -1, -1, -1, 42, 27, -1, 27, 45, -1, -1, 27, 27, 27, 27, -1, -1, 27, 
	27, 53, 27, -1, -1, 27, -1, 27, -1, -1, 27, 27, 27, 27, 27, 63, 27, -1, 
	27, 27, 27, -1, 27, 27, 27, 27, 27, -1, 27, 27, -1, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 85, 27, -1, -1, 27, 27, 27, 27, -1, -1, 27, 27, -1, 27, 
	27, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa11_eof[95] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa11_min[95] =
    {
	9, 98, 98, 40, 40, 108, -1, -1, -1, -1, -1, -1, 111, 110, -1, 111, 48, 
	111, -1, -1, -1, -1, 48, 114, -1, 40, 46, -1, -1, 115, 101, 105, 117, -1, 
	-1, 111, 114, 46, 103, -1, -1, 100, -1, 111, -1, -1, 40, 114, 114, 108, 
	103, 46, 101, -1, 40, 101, 98, -1, 110, 97, 105, 116, 108, -1, 114, 116, 
	-1, 108, 105, 40, 40, 99, 105, 111, 115, 40, 46, 116, -1, -1, 104, 40, 
	103, 101, -1, -1, 40, 40, -1, 40, 40, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa11_max[95] =
    {
	126, 98, 109, 40, 40, 108, -1, -1, -1, -1, -1, -1, 111, 110, -1, 111, 57, 
	111, -1, -1, -1, -1, 57, 114, -1, 40, 69, -1, -1, 115, 101, 105, 117, -1, 
	-1, 111, 114, 122, 103, -1, -1, 100, -1, 111, -1, -1, 40, 116, 114, 108, 
	103, 122, 101, -1, 105, 101, 98, -1, 110, 97, 105, 116, 108, -1, 114, 116, 
	-1, 108, 105, 40, 40, 99, 105, 111, 115, 40, 122, 116, -1, -1, 104, 40, 
	103, 101, -1, -1, 40, 40, -1, 40, 40, -1, -1, -1, -1
    };
static const ANTLR_INT32 dfa11_accept[95] =
    {
	-1, -1, -1, -1, -1, -1, 7, 8, 9, 10, 11, 13, -1, -1, 17, -1, -1, -1, 22, 
	24, 25, 26, -1, -1, 29, -1, -1, 32, 34, -1, -1, -1, -1, 4, 5, -1, -1, -1, 
	-1, 20, 33, -1, 27, -1, 30, 31, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 
	-1, 1, -1, -1, -1, -1, -1, 14, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, 2, 3, -1, -1, -1, -1, 18, 21, -1, -1, 23, -1, -1, 28, 12, 
	6, 16
    };
static const ANTLR_INT32 dfa11_special[95] =
    {
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1
    };

/** Used when there is no transition table entry for a particular state */
static const ANTLR_INT32* dfa11_T_empty	 =   NULL;

static const ANTLR_INT32 dfa11_T0[] =
    {
	40, -1, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 40
    };

static const ANTLR_INT32 dfa11_T1[] =
    {
	64
    };

static const ANTLR_INT32 dfa11_T2[] =
    {
	74
    };

static const ANTLR_INT32 dfa11_T3[] =
    {
	83
    };

static const ANTLR_INT32 dfa11_T4[] =
    {
	90
    };

static const ANTLR_INT32 dfa11_T5[] =
    {
	47
    };

static const ANTLR_INT32 dfa11_T6[] =
    {
	94
    };

static const ANTLR_INT32 dfa11_T7[] =
    {
	58, -1, 59
    };

static const ANTLR_INT32 dfa11_T8[] =
    {
	27, -1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 
	-1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27
    };

static const ANTLR_INT32 dfa11_T9[] =
    {
	51
    };

static const ANTLR_INT32 dfa11_T10[] =
    {
	57
    };

static const ANTLR_INT32 dfa11_T11[] =
    {
	36
    };

static const ANTLR_INT32 dfa11_T12[] =
    {
	46
    };

static const ANTLR_INT32 dfa11_T13[] =
    {
	28, 28, -1, 28, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 20, 7, 18, 22, 10, 
	16, -1, 11, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 9, 28, 14, -1, -1, 
	-1, -1, 27, 27, 3, 27, 27, 27, 27, 27, 4, 27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 25, 27, 27, 27, 27, 27, 27, 21, -1, 8, -1, -1, -1, 1, 27, 5, 2, 
	27, 12, 27, 27, 13, 27, 27, 15, 17, 27, 27, 23, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 19, -1, 6, 24
    };

static const ANTLR_INT32 dfa11_T14[] =
    {
	76
    };

static const ANTLR_INT32 dfa11_T15[] =
    {
	78
    };

static const ANTLR_INT32 dfa11_T16[] =
    {
	69
    };

static const ANTLR_INT32 dfa11_T17[] =
    {
	55
    };

static const ANTLR_INT32 dfa11_T18[] =
    {
	67
    };

static const ANTLR_INT32 dfa11_T19[] =
    {
	84
    };

static const ANTLR_INT32 dfa11_T20[] =
    {
	75
    };

static const ANTLR_INT32 dfa11_T21[] =
    {
	27, -1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 
	-1, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, -1, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 
	52, 27, 27, 27, 27
    };

static const ANTLR_INT32 dfa11_T22[] =
    {
	77
    };

static const ANTLR_INT32 dfa11_T23[] =
    {
	86
    };

static const ANTLR_INT32 dfa11_T24[] =
    {
	91
    };

static const ANTLR_INT32 dfa11_T25[] =
    {
	50
    };

static const ANTLR_INT32 dfa11_T26[] =
    {
	44
    };

static const ANTLR_INT32 dfa11_T27[] =
    {
	56
    };

static const ANTLR_INT32 dfa11_T28[] =
    {
	68
    };

static const ANTLR_INT32 dfa11_T29[] =
    {
	93
    };

static const ANTLR_INT32 dfa11_T30[] =
    {
	43
    };

static const ANTLR_INT32 dfa11_T31[] =
    {
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40
    };

static const ANTLR_INT32 dfa11_T32[] =
    {
	73
    };

static const ANTLR_INT32 dfa11_T33[] =
    {
	62
    };

static const ANTLR_INT32 dfa11_T34[] =
    {
	89
    };

static const ANTLR_INT32 dfa11_T35[] =
    {
	82
    };

static const ANTLR_INT32 dfa11_T36[] =
    {
	33
    };

static const ANTLR_INT32 dfa11_T37[] =
    {
	70
    };

static const ANTLR_INT32 dfa11_T38[] =
    {
	38
    };

static const ANTLR_INT32 dfa11_T39[] =
    {
	79
    };

static const ANTLR_INT32 dfa11_T40[] =
    {
	88
    };

static const ANTLR_INT32 dfa11_T41[] =
    {
	54
    };

static const ANTLR_INT32 dfa11_T42[] =
    {
	34
    };

static const ANTLR_INT32 dfa11_T43[] =
    {
	61
    };

static const ANTLR_INT32 dfa11_T44[] =
    {
	49
    };

static const ANTLR_INT32 dfa11_T45[] =
    {
	81
    };

static const ANTLR_INT32 dfa11_T46[] =
    {
	72
    };

static const ANTLR_INT32 dfa11_T47[] =
    {
	30, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, 32
    };

static const ANTLR_INT32 dfa11_T48[] =
    {
	35
    };

static const ANTLR_INT32 dfa11_T49[] =
    {
	60
    };

static const ANTLR_INT32 dfa11_T50[] =
    {
	48
    };

static const ANTLR_INT32 dfa11_T51[] =
    {
	66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
	-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65
    };

static const ANTLR_INT32 dfa11_T52[] =
    {
	37
    };

static const ANTLR_INT32 dfa11_T53[] =
    {
	92
    };

static const ANTLR_INT32 dfa11_T54[] =
    {
	87
    };

static const ANTLR_INT32 dfa11_T55[] =
    {
	80
    };

static const ANTLR_INT32 dfa11_T56[] =
    {
	71
    };

static const ANTLR_INT32 dfa11_T57[] =
    {
	41
    };

static const ANTLR_INT32 dfa11_T58[] =
    {
	29
    };


/* Transition tables are a table of sub tables, with some tables
 * reused for efficiency.
 */
static const ANTLR_INT32 * const dfa11_transitions[] =
{
    dfa11_T13, dfa11_T58, dfa11_T47, dfa11_T36, dfa11_T42, dfa11_T48, NULL, 
    NULL, NULL, NULL, NULL, NULL, dfa11_T11, dfa11_T52, NULL, dfa11_T38, 
    dfa11_T31, dfa11_T57, NULL, NULL, NULL, NULL, dfa11_T31, dfa11_T30, 
    NULL, dfa11_T26, dfa11_T0, NULL, NULL, dfa11_T12, dfa11_T5, dfa11_T50, 
    dfa11_T44, NULL, NULL, dfa11_T25, dfa11_T9, dfa11_T21, dfa11_T41, NULL, 
    NULL, dfa11_T17, NULL, dfa11_T27, NULL, NULL, dfa11_T10, dfa11_T7, dfa11_T49, 
    dfa11_T43, dfa11_T33, dfa11_T8, dfa11_T1, NULL, dfa11_T51, dfa11_T18, 
    dfa11_T28, NULL, dfa11_T16, dfa11_T37, dfa11_T56, dfa11_T46, dfa11_T32, 
    NULL, dfa11_T2, dfa11_T20, NULL, dfa11_T14, dfa11_T22, dfa11_T15, dfa11_T39, 
    dfa11_T55, dfa11_T45, dfa11_T35, dfa11_T3, dfa11_T19, dfa11_T8, dfa11_T23, 
    NULL, NULL, dfa11_T54, dfa11_T40, dfa11_T34, dfa11_T4, NULL, NULL, dfa11_T24, 
    dfa11_T53, NULL, dfa11_T29, dfa11_T6, NULL, NULL, NULL, NULL
};


/* Declare tracking structure for Cyclic DFA 11
 */
class BUGSLexerCyclicDFA11 : public CyclicDFA< BUGSLexerImplTraits, BUGSLexer >, public BUGSLexerTokens
{
public:
	typedef CyclicDFA< BUGSLexerImplTraits, BUGSLexer >  BaseType;
	typedef BaseType::ContextType CtxType;

private:
	

public:
	BUGSLexerCyclicDFA11( ANTLR_INT32	decisionNumber
					, const ANTLR_UCHAR*	description
					, const ANTLR_INT32* const	eot
					, const ANTLR_INT32* const	eof
					, const ANTLR_INT32* const	min
					, const ANTLR_INT32* const	max
					, const ANTLR_INT32* const	accept
					, const ANTLR_INT32* const	special
					, const ANTLR_INT32* const *const	transition)
					:BaseType( decisionNumber, description, eot, eof, min, max, accept,
								special, transition )
	{
		
	}

};

static BUGSLexerCyclicDFA11  cdfa11(
	    11,		    /* Decision number of this dfa	    */
	    /* Which decision this represents:   */
	    (const ANTLR_UCHAR*)"1:1: Tokens : ( ABSOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | DIRICHLETOPENBRACKET | DIV | FORSTART | IN | INVERSEOPENBRACKET | LEFTPOINTER | LOGITOPENBRACKET | LOGOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PLUS | PROBITOPENBRACKET | TILDE | TRUNCATIONBEGIN | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE );",
	    dfa11_eot,	    /* EOT table			    */
	    dfa11_eof,	    /* EOF table			    */
	    dfa11_min,	    /* Minimum tokens for each state    */
	    dfa11_max,	    /* Maximum tokens for each state    */
	    dfa11_accept,	/* Accept table			    */
	    dfa11_special,	/* Special transition states	    */
	    dfa11_transitions	/* Table of transition tables	    */

	);


/* End of Cyclic DFA 11
 * ---------------------
 */ 
/* =========================================================================
 * End of DFA tables for the lexer
 */

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 22:16: ( 'abs(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ABSOPENBRACKET
 *
 * Looks to match the characters the constitute the token ABSOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mABSOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = ABSOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:22:16: ( 'abs(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:22:18: 'abs('
    {
        this->matchs(lit_1);
        if  (this->hasException())
        {
            goto ruleABSOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleABSOPENBRACKETEx; /* Prevent compiler warnings */
    ruleABSOPENBRACKETEx: ;

}
// $ANTLR end ABSOPENBRACKET

//   Comes from: 23:22: ( 'dbern(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BERNOULLIOPENBRACKET
 *
 * Looks to match the characters the constitute the token BERNOULLIOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mBERNOULLIOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = BERNOULLIOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:23:22: ( 'dbern(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:23:24: 'dbern('
    {
        this->matchs(lit_2);
        if  (this->hasException())
        {
            goto ruleBERNOULLIOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBERNOULLIOPENBRACKETEx; /* Prevent compiler warnings */
    ruleBERNOULLIOPENBRACKETEx: ;

}
// $ANTLR end BERNOULLIOPENBRACKET

//   Comes from: 24:17: ( 'dbeta(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BETAOPENBRACKET
 *
 * Looks to match the characters the constitute the token BETAOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mBETAOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = BETAOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:24:17: ( 'dbeta(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:24:19: 'dbeta('
    {
        this->matchs(lit_3);
        if  (this->hasException())
        {
            goto ruleBETAOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleBETAOPENBRACKETEx; /* Prevent compiler warnings */
    ruleBETAOPENBRACKETEx: ;

}
// $ANTLR end BETAOPENBRACKET

//   Comes from: 25:18: ( 'C(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CENSORBEGINWITHC
 *
 * Looks to match the characters the constitute the token CENSORBEGINWITHC
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCENSORBEGINWITHC()
{
    ANTLR_UINT32	_type;
      


    _type	    = CENSORBEGINWITHC;


    // /home/shriram/bugsparser/Parser/BUGS.g:25:18: ( 'C(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:25:20: 'C('
    {
        this->matchs(lit_4);
        if  (this->hasException())
        {
            goto ruleCENSORBEGINWITHCEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCENSORBEGINWITHCEx; /* Prevent compiler warnings */
    ruleCENSORBEGINWITHCEx: ;

}
// $ANTLR end CENSORBEGINWITHC

//   Comes from: 26:18: ( 'I(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CENSORBEGINWITHI
 *
 * Looks to match the characters the constitute the token CENSORBEGINWITHI
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCENSORBEGINWITHI()
{
    ANTLR_UINT32	_type;
      


    _type	    = CENSORBEGINWITHI;


    // /home/shriram/bugsparser/Parser/BUGS.g:26:18: ( 'I(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:26:20: 'I('
    {
        this->matchs(lit_5);
        if  (this->hasException())
        {
            goto ruleCENSORBEGINWITHIEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCENSORBEGINWITHIEx; /* Prevent compiler warnings */
    ruleCENSORBEGINWITHIEx: ;

}
// $ANTLR end CENSORBEGINWITHI

//   Comes from: 27:20: ( 'cloglog(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOGLOGOPENBRACKET
 *
 * Looks to match the characters the constitute the token CLOGLOGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOGLOGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOGLOGOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:27:20: ( 'cloglog(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:27:22: 'cloglog('
    {
        this->matchs(lit_6);
        if  (this->hasException())
        {
            goto ruleCLOGLOGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOGLOGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleCLOGLOGOPENBRACKETEx: ;

}
// $ANTLR end CLOGLOGOPENBRACKET

//   Comes from: 28:12: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSEBRACE
 *
 * Looks to match the characters the constitute the token CLOSEBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSEBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSEBRACE;


    // /home/shriram/bugsparser/Parser/BUGS.g:28:12: ( '}' )
    // /home/shriram/bugsparser/Parser/BUGS.g:28:14: '}'
    {
         this->matchc('}');
        if  (this->hasException())
        {
            goto ruleCLOSEBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSEBRACEEx; /* Prevent compiler warnings */
    ruleCLOSEBRACEEx: ;

}
// $ANTLR end CLOSEBRACE

//   Comes from: 29:14: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSEBRACKET
 *
 * Looks to match the characters the constitute the token CLOSEBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSEBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSEBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:29:14: ( ')' )
    // /home/shriram/bugsparser/Parser/BUGS.g:29:16: ')'
    {
         this->matchc(')');
        if  (this->hasException())
        {
            goto ruleCLOSEBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSEBRACKETEx; /* Prevent compiler warnings */
    ruleCLOSEBRACKETEx: ;

}
// $ANTLR end CLOSEBRACKET

//   Comes from: 30:20: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSESQUAREBRACKET
 *
 * Looks to match the characters the constitute the token CLOSESQUAREBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCLOSESQUAREBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = CLOSESQUAREBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:30:20: ( ']' )
    // /home/shriram/bugsparser/Parser/BUGS.g:30:22: ']'
    {
         this->matchc(']');
        if  (this->hasException())
        {
            goto ruleCLOSESQUAREBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCLOSESQUAREBRACKETEx; /* Prevent compiler warnings */
    ruleCLOSESQUAREBRACKETEx: ;

}
// $ANTLR end CLOSESQUAREBRACKET

//   Comes from: 31:7: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOLON()
{
    ANTLR_UINT32	_type;
      


    _type	    = COLON;


    // /home/shriram/bugsparser/Parser/BUGS.g:31:7: ( ':' )
    // /home/shriram/bugsparser/Parser/BUGS.g:31:9: ':'
    {
         this->matchc(':');
        if  (this->hasException())
        {
            goto ruleCOLONEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 32:7: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCOMMA()
{
    ANTLR_UINT32	_type;
      


    _type	    = COMMA;


    // /home/shriram/bugsparser/Parser/BUGS.g:32:7: ( ',' )
    // /home/shriram/bugsparser/Parser/BUGS.g:32:9: ','
    {
         this->matchc(',');
        if  (this->hasException())
        {
            goto ruleCOMMAEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 33:22: ( 'ddirich(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIRICHLETOPENBRACKET
 *
 * Looks to match the characters the constitute the token DIRICHLETOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDIRICHLETOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIRICHLETOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:33:22: ( 'ddirich(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:33:24: 'ddirich('
    {
        this->matchs(lit_7);
        if  (this->hasException())
        {
            goto ruleDIRICHLETOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIRICHLETOPENBRACKETEx; /* Prevent compiler warnings */
    ruleDIRICHLETOPENBRACKETEx: ;

}
// $ANTLR end DIRICHLETOPENBRACKET

//   Comes from: 34:5: ( '/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DIV
 *
 * Looks to match the characters the constitute the token DIV
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mDIV()
{
    ANTLR_UINT32	_type;
      


    _type	    = DIV;


    // /home/shriram/bugsparser/Parser/BUGS.g:34:5: ( '/' )
    // /home/shriram/bugsparser/Parser/BUGS.g:34:7: '/'
    {
         this->matchc('/');
        if  (this->hasException())
        {
            goto ruleDIVEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleDIVEx; /* Prevent compiler warnings */
    ruleDIVEx: ;

}
// $ANTLR end DIV

//   Comes from: 35:10: ( 'for' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start FORSTART
 *
 * Looks to match the characters the constitute the token FORSTART
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mFORSTART()
{
    ANTLR_UINT32	_type;
      


    _type	    = FORSTART;


    // /home/shriram/bugsparser/Parser/BUGS.g:35:10: ( 'for' )
    // /home/shriram/bugsparser/Parser/BUGS.g:35:12: 'for'
    {
        this->matchs(lit_8);
        if  (this->hasException())
        {
            goto ruleFORSTARTEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleFORSTARTEx; /* Prevent compiler warnings */
    ruleFORSTARTEx: ;

}
// $ANTLR end FORSTART

//   Comes from: 36:4: ( 'in' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IN
 *
 * Looks to match the characters the constitute the token IN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = IN;


    // /home/shriram/bugsparser/Parser/BUGS.g:36:4: ( 'in' )
    // /home/shriram/bugsparser/Parser/BUGS.g:36:6: 'in'
    {
        this->matchs(lit_9);
        if  (this->hasException())
        {
            goto ruleINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINEx; /* Prevent compiler warnings */
    ruleINEx: ;

}
// $ANTLR end IN

//   Comes from: 37:20: ( 'inverse(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INVERSEOPENBRACKET
 *
 * Looks to match the characters the constitute the token INVERSEOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mINVERSEOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = INVERSEOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:37:20: ( 'inverse(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:37:22: 'inverse('
    {
        this->matchs(lit_10);
        if  (this->hasException())
        {
            goto ruleINVERSEOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleINVERSEOPENBRACKETEx; /* Prevent compiler warnings */
    ruleINVERSEOPENBRACKETEx: ;

}
// $ANTLR end INVERSEOPENBRACKET

//   Comes from: 38:13: ( '<-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LEFTPOINTER
 *
 * Looks to match the characters the constitute the token LEFTPOINTER
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLEFTPOINTER()
{
    ANTLR_UINT32	_type;
      


    _type	    = LEFTPOINTER;


    // /home/shriram/bugsparser/Parser/BUGS.g:38:13: ( '<-' )
    // /home/shriram/bugsparser/Parser/BUGS.g:38:15: '<-'
    {
        this->matchs(lit_11);
        if  (this->hasException())
        {
            goto ruleLEFTPOINTEREx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLEFTPOINTEREx; /* Prevent compiler warnings */
    ruleLEFTPOINTEREx: ;

}
// $ANTLR end LEFTPOINTER

//   Comes from: 39:18: ( 'logit(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGITOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGITOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGITOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGITOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:39:18: ( 'logit(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:39:20: 'logit('
    {
        this->matchs(lit_12);
        if  (this->hasException())
        {
            goto ruleLOGITOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGITOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGITOPENBRACKETEx: ;

}
// $ANTLR end LOGITOPENBRACKET

//   Comes from: 40:16: ( 'log(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start LOGOPENBRACKET
 *
 * Looks to match the characters the constitute the token LOGOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mLOGOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = LOGOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:40:16: ( 'log(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:40:18: 'log('
    {
        this->matchs(lit_13);
        if  (this->hasException())
        {
            goto ruleLOGOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleLOGOPENBRACKETEx; /* Prevent compiler warnings */
    ruleLOGOPENBRACKETEx: ;

}
// $ANTLR end LOGOPENBRACKET

//   Comes from: 41:7: ( '-' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MINUS
 *
 * Looks to match the characters the constitute the token MINUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMINUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = MINUS;


    // /home/shriram/bugsparser/Parser/BUGS.g:41:7: ( '-' )
    // /home/shriram/bugsparser/Parser/BUGS.g:41:9: '-'
    {
         this->matchc('-');
        if  (this->hasException())
        {
            goto ruleMINUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMINUSEx; /* Prevent compiler warnings */
    ruleMINUSEx: ;

}
// $ANTLR end MINUS

//   Comes from: 42:7: ( 'model' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MODEL
 *
 * Looks to match the characters the constitute the token MODEL
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMODEL()
{
    ANTLR_UINT32	_type;
      


    _type	    = MODEL;


    // /home/shriram/bugsparser/Parser/BUGS.g:42:7: ( 'model' )
    // /home/shriram/bugsparser/Parser/BUGS.g:42:9: 'model'
    {
        this->matchs(lit_14);
        if  (this->hasException())
        {
            goto ruleMODELEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMODELEx; /* Prevent compiler warnings */
    ruleMODELEx: ;

}
// $ANTLR end MODEL

//   Comes from: 43:6: ( '*' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MULT
 *
 * Looks to match the characters the constitute the token MULT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMULT()
{
    ANTLR_UINT32	_type;
      


    _type	    = MULT;


    // /home/shriram/bugsparser/Parser/BUGS.g:43:6: ( '*' )
    // /home/shriram/bugsparser/Parser/BUGS.g:43:8: '*'
    {
         this->matchc('*');
        if  (this->hasException())
        {
            goto ruleMULTEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMULTEx; /* Prevent compiler warnings */
    ruleMULTEx: ;

}
// $ANTLR end MULT

//   Comes from: 44:25: ( 'dmulti(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start MUTLTINOMIALOPENBRACKET
 *
 * Looks to match the characters the constitute the token MUTLTINOMIALOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mMUTLTINOMIALOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = MUTLTINOMIALOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:44:25: ( 'dmulti(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:44:27: 'dmulti('
    {
        this->matchs(lit_15);
        if  (this->hasException())
        {
            goto ruleMUTLTINOMIALOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleMUTLTINOMIALOPENBRACKETEx; /* Prevent compiler warnings */
    ruleMUTLTINOMIALOPENBRACKETEx: ;

}
// $ANTLR end MUTLTINOMIALOPENBRACKET

//   Comes from: 45:11: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENBRACE
 *
 * Looks to match the characters the constitute the token OPENBRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENBRACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENBRACE;


    // /home/shriram/bugsparser/Parser/BUGS.g:45:11: ( '{' )
    // /home/shriram/bugsparser/Parser/BUGS.g:45:13: '{'
    {
         this->matchc('{');
        if  (this->hasException())
        {
            goto ruleOPENBRACEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENBRACEEx; /* Prevent compiler warnings */
    ruleOPENBRACEEx: ;

}
// $ANTLR end OPENBRACE

//   Comes from: 46:13: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENBRACKET
 *
 * Looks to match the characters the constitute the token OPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:46:13: ( '(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:46:15: '('
    {
         this->matchc('(');
        if  (this->hasException())
        {
            goto ruleOPENBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENBRACKETEx; /* Prevent compiler warnings */
    ruleOPENBRACKETEx: ;

}
// $ANTLR end OPENBRACKET

//   Comes from: 47:19: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPENSQUAREBRACKET
 *
 * Looks to match the characters the constitute the token OPENSQUAREBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mOPENSQUAREBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = OPENSQUAREBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:47:19: ( '[' )
    // /home/shriram/bugsparser/Parser/BUGS.g:47:21: '['
    {
         this->matchc('[');
        if  (this->hasException())
        {
            goto ruleOPENSQUAREBRACKETEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleOPENSQUAREBRACKETEx; /* Prevent compiler warnings */
    ruleOPENSQUAREBRACKETEx: ;

}
// $ANTLR end OPENSQUAREBRACKET

//   Comes from: 48:6: ( '+' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PLUS
 *
 * Looks to match the characters the constitute the token PLUS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPLUS()
{
    ANTLR_UINT32	_type;
      


    _type	    = PLUS;


    // /home/shriram/bugsparser/Parser/BUGS.g:48:6: ( '+' )
    // /home/shriram/bugsparser/Parser/BUGS.g:48:8: '+'
    {
         this->matchc('+');
        if  (this->hasException())
        {
            goto rulePLUSEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePLUSEx; /* Prevent compiler warnings */
    rulePLUSEx: ;

}
// $ANTLR end PLUS

//   Comes from: 49:19: ( 'probit(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PROBITOPENBRACKET
 *
 * Looks to match the characters the constitute the token PROBITOPENBRACKET
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mPROBITOPENBRACKET()
{
    ANTLR_UINT32	_type;
      


    _type	    = PROBITOPENBRACKET;


    // /home/shriram/bugsparser/Parser/BUGS.g:49:19: ( 'probit(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:49:21: 'probit('
    {
        this->matchs(lit_16);
        if  (this->hasException())
        {
            goto rulePROBITOPENBRACKETEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto rulePROBITOPENBRACKETEx; /* Prevent compiler warnings */
    rulePROBITOPENBRACKETEx: ;

}
// $ANTLR end PROBITOPENBRACKET

//   Comes from: 50:7: ( '~' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TILDE
 *
 * Looks to match the characters the constitute the token TILDE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTILDE()
{
    ANTLR_UINT32	_type;
      


    _type	    = TILDE;


    // /home/shriram/bugsparser/Parser/BUGS.g:50:7: ( '~' )
    // /home/shriram/bugsparser/Parser/BUGS.g:50:9: '~'
    {
         this->matchc('~');
        if  (this->hasException())
        {
            goto ruleTILDEEx;
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTILDEEx; /* Prevent compiler warnings */
    ruleTILDEEx: ;

}
// $ANTLR end TILDE

//   Comes from: 51:17: ( 'T(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TRUNCATIONBEGIN
 *
 * Looks to match the characters the constitute the token TRUNCATIONBEGIN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mTRUNCATIONBEGIN()
{
    ANTLR_UINT32	_type;
      


    _type	    = TRUNCATIONBEGIN;


    // /home/shriram/bugsparser/Parser/BUGS.g:51:17: ( 'T(' )
    // /home/shriram/bugsparser/Parser/BUGS.g:51:19: 'T('
    {
        this->matchs(lit_17);
        if  (this->hasException())
        {
            goto ruleTRUNCATIONBEGINEx;
        }




    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleTRUNCATIONBEGINEx; /* Prevent compiler warnings */
    ruleTRUNCATIONBEGINEx: ;

}
// $ANTLR end TRUNCATIONBEGIN

//   Comes from: 171:2: ( ( '0' .. '9' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTANTINT
 *
 * Looks to match the characters the constitute the token CONSTANTINT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCONSTANTINT()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTANTINT;


    // /home/shriram/bugsparser/Parser/BUGS.g:171:2: ( ( '0' .. '9' )+ )
    // /home/shriram/bugsparser/Parser/BUGS.g:171:4: ( '0' .. '9' )+
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:171:4: ( '0' .. '9' )+
        {
            int cnt1=0;

            for (;;)
            {
                int alt1=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt1=1;
        		}
        	    break;

        	}

        	switch (alt1)
        	{
        	    case 1:
        	        // /home/shriram/bugsparser/Parser/BUGS.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleCONSTANTINTEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt1 >= 1 )
        		{
        		    goto loop1;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleCONSTANTINTEx;
        	}
        	cnt1++;
            }
            loop1: ;	/* Jump to here if this rule does not match */
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTANTINTEx; /* Prevent compiler warnings */
    ruleCONSTANTINTEx: ;

}
// $ANTLR end CONSTANTINT

//   Comes from: 175:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NODENAME
 *
 * Looks to match the characters the constitute the token NODENAME
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mNODENAME()
{
    ANTLR_UINT32	_type;
      


    _type	    = NODENAME;


    // /home/shriram/bugsparser/Parser/BUGS.g:175:2: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )* )
    // /home/shriram/bugsparser/Parser/BUGS.g:175:3: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*
    {
        if ( ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        {
            this->consume();
        }
        else
        {
            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

            this->recover();
            goto ruleNODENAMEEx;
        }


        // /home/shriram/bugsparser/Parser/BUGS.g:175:24: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '.' )*

        for (;;)
        {
            int alt2=2;
            switch ( this->LA(1) )
            {
            case '.':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:
        	    {
        	        if ( this->LA(1) == '.' || ((this->LA(1) >= '0') && (this->LA(1) <= '9')) || ((this->LA(1) >= 'A') && (this->LA(1) <= 'Z')) || ((this->LA(1) >= 'a') && (this->LA(1) <= 'z')) )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleNODENAMEEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleNODENAMEEx; /* Prevent compiler warnings */
    ruleNODENAMEEx: ;

}
// $ANTLR end NODENAME

//   Comes from: 179:2: ( ( '+' | '-' )? ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CONSTANTVALUE
 *
 * Looks to match the characters the constitute the token CONSTANTVALUE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mCONSTANTVALUE()
{
    ANTLR_UINT32	_type;
      


    _type	    = CONSTANTVALUE;


    // /home/shriram/bugsparser/Parser/BUGS.g:179:2: ( ( '+' | '-' )? ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )? )
    // /home/shriram/bugsparser/Parser/BUGS.g:179:4: ( '+' | '-' )? ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:179:4: ( '+' | '-' )?
        {
            int alt3=2;
            switch ( this->LA(1) )
            {
                case '+':
                case '-':
                	{
                		alt3=1;
                	}
                    break;
            }

            switch (alt3)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:
        	    {
        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        {
        	            this->consume();
        	        }
        	        else
        	        {
        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	            this->recover();
        	            goto ruleCONSTANTVALUEEx;
        	        }


        	    }
        	    break;

            }
        }

        // /home/shriram/bugsparser/Parser/BUGS.g:179:14: ( '0' .. '9' )+
        {
            int cnt4=0;

            for (;;)
            {
                int alt4=2;
        	switch ( this->LA(1) )
        	{
        	case '0':
        	case '1':
        	case '2':
        	case '3':
        	case '4':
        	case '5':
        	case '6':
        	case '7':
        	case '8':
        	case '9':
        		{
        			alt4=1;
        		}
        	    break;

        	}

        	switch (alt4)
        	{
        	    case 1:
        	        // /home/shriram/bugsparser/Parser/BUGS.g:
        	        {
        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleCONSTANTVALUEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt4 >= 1 )
        		{
        		    goto loop4;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleCONSTANTVALUEEx;
        	}
        	cnt4++;
            }
            loop4: ;	/* Jump to here if this rule does not match */
        }

        // /home/shriram/bugsparser/Parser/BUGS.g:179:25: ( '.' ( '0' .. '9' )+ )?
        {
            int alt6=2;
            switch ( this->LA(1) )
            {
                case '.':
                	{
                		alt6=1;
                	}
                    break;
            }

            switch (alt6)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:179:26: '.' ( '0' .. '9' )+
        	    {
        	         this->matchc('.');
        	        if  (this->hasException())
        	        {
        	            goto ruleCONSTANTVALUEEx;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:179:29: ( '0' .. '9' )+
        	        {
        	            int cnt5=0;

        	            for (;;)
        	            {
        	                int alt5=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt5=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt5)
        	        	{
        	        	    case 1:
        	        	        // /home/shriram/bugsparser/Parser/BUGS.g:
        	        	        {
        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	        	            {
        	        	                this->consume();
        	        	            }
        	        	            else
        	        	            {
        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	                this->recover();
        	        	                goto ruleCONSTANTVALUEEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt5 >= 1 )
        	        		{
        	        		    goto loop5;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto ruleCONSTANTVALUEEx;
        	        	}
        	        	cnt5++;
        	            }
        	            loop5: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }

        // /home/shriram/bugsparser/Parser/BUGS.g:179:42: ( 'E' ( '+' | '-' )? ( '0' .. '9' )+ )?
        {
            int alt9=2;
            switch ( this->LA(1) )
            {
                case 'E':
                	{
                		alt9=1;
                	}
                    break;
            }

            switch (alt9)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:179:43: 'E' ( '+' | '-' )? ( '0' .. '9' )+
        	    {
        	         this->matchc('E');
        	        if  (this->hasException())
        	        {
        	            goto ruleCONSTANTVALUEEx;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:179:46: ( '+' | '-' )?
        	        {
        	            int alt7=2;
        	            switch ( this->LA(1) )
        	            {
        	                case '+':
        	                case '-':
        	                	{
        	                		alt7=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt7)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:
        	        	    {
        	        	        if ( this->LA(1) == '+' || this->LA(1) == '-' )
        	        	        {
        	        	            this->consume();
        	        	        }
        	        	        else
        	        	        {
        	        	            new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	            this->recover();
        	        	            goto ruleCONSTANTVALUEEx;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        // /home/shriram/bugsparser/Parser/BUGS.g:179:56: ( '0' .. '9' )+
        	        {
        	            int cnt8=0;

        	            for (;;)
        	            {
        	                int alt8=2;
        	        	switch ( this->LA(1) )
        	        	{
        	        	case '0':
        	        	case '1':
        	        	case '2':
        	        	case '3':
        	        	case '4':
        	        	case '5':
        	        	case '6':
        	        	case '7':
        	        	case '8':
        	        	case '9':
        	        		{
        	        			alt8=1;
        	        		}
        	        	    break;

        	        	}

        	        	switch (alt8)
        	        	{
        	        	    case 1:
        	        	        // /home/shriram/bugsparser/Parser/BUGS.g:
        	        	        {
        	        	            if ( ((this->LA(1) >= '0') && (this->LA(1) <= '9')) )
        	        	            {
        	        	                this->consume();
        	        	            }
        	        	            else
        	        	            {
        	        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	        	                this->recover();
        	        	                goto ruleCONSTANTVALUEEx;
        	        	            }


        	        	        }
        	        	        break;

        	        	    default:

        	        		if ( cnt8 >= 1 )
        	        		{
        	        		    goto loop8;
        	        		}
        	        		/* mismatchedSetEx()
        	        		 */
        	        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        	        		goto ruleCONSTANTVALUEEx;
        	        	}
        	        	cnt8++;
        	            }
        	            loop8: ;	/* Jump to here if this rule does not match */
        	        }

        	    }
        	    break;

            }
        }

    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleCONSTANTVALUEEx; /* Prevent compiler warnings */
    ruleCONSTANTVALUEEx: ;

}
// $ANTLR end CONSTANTVALUE

//   Comes from: 182:12: ( ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+ )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WHITESPACE
 *
 * Looks to match the characters the constitute the token WHITESPACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == true if an exception was thrown.
 */
void BUGSLexer::mWHITESPACE()
{
    ANTLR_UINT32	_type;
      


    _type	    = WHITESPACE;


    // /home/shriram/bugsparser/Parser/BUGS.g:182:12: ( ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+ )
    // /home/shriram/bugsparser/Parser/BUGS.g:182:14: ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:182:14: ( '\\t' | ' ' | '\\r' | '\\n' | ';' | '\\u000C' )+
        {
            int cnt10=0;

            for (;;)
            {
                int alt10=2;
        	switch ( this->LA(1) )
        	{
        	case '\t':
        	case '\n':
        	case '\f':
        	case '\r':
        	case ' ':
        	case ';':
        		{
        			alt10=1;
        		}
        	    break;

        	}

        	switch (alt10)
        	{
        	    case 1:
        	        // /home/shriram/bugsparser/Parser/BUGS.g:
        	        {
        	            if ( ((this->LA(1) >= '\t') && (this->LA(1) <= '\n')) || ((this->LA(1) >= '\f') && (this->LA(1) <= '\r')) || this->LA(1) == ' ' || this->LA(1) == ';' )
        	            {
        	                this->consume();
        	            }
        	            else
        	            {
        	                new ANTLR_Exception< BUGSLexerImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );

        	                this->recover();
        	                goto ruleWHITESPACEEx;
        	            }


        	        }
        	        break;

        	    default:

        		if ( cnt10 >= 1 )
        		{
        		    goto loop10;
        		}
        		/* mismatchedSetEx()
        		 */
        		new ANTLR_Exception< BUGSLexerImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


        		goto ruleWHITESPACEEx;
        	}
        	cnt10++;
            }
            loop10: ;	/* Jump to here if this rule does not match */
        }

        {
             this->get_state()->get_channel() = HIDDEN; 
        }


    }

	this->get_lexstate()->set_type(_type);
    // This is where rules clean up and exit
    //
    goto ruleWHITESPACEEx; /* Prevent compiler warnings */
    ruleWHITESPACEEx: ;

}
// $ANTLR end WHITESPACE

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
void
BUGSLexer::mTokens()
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:1:8: ( ABSOPENBRACKET | BERNOULLIOPENBRACKET | BETAOPENBRACKET | CENSORBEGINWITHC | CENSORBEGINWITHI | CLOGLOGOPENBRACKET | CLOSEBRACE | CLOSEBRACKET | CLOSESQUAREBRACKET | COLON | COMMA | DIRICHLETOPENBRACKET | DIV | FORSTART | IN | INVERSEOPENBRACKET | LEFTPOINTER | LOGITOPENBRACKET | LOGOPENBRACKET | MINUS | MODEL | MULT | MUTLTINOMIALOPENBRACKET | OPENBRACE | OPENBRACKET | OPENSQUAREBRACKET | PLUS | PROBITOPENBRACKET | TILDE | TRUNCATIONBEGIN | CONSTANTINT | NODENAME | CONSTANTVALUE | WHITESPACE )

        ANTLR_UINT32 alt11;

        alt11=34;

        alt11 = cdfa11.predict(this, this->get_rec(), this->get_istream(), cdfa11 );
        if  (this->hasException())
        {
            goto ruleTokensEx;
        }

        switch (alt11)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:10: ABSOPENBRACKET
    	    {
    	        /* 1:10: ABSOPENBRACKET */
    	        mABSOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:25: BERNOULLIOPENBRACKET
    	    {
    	        /* 1:25: BERNOULLIOPENBRACKET */
    	        mBERNOULLIOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:46: BETAOPENBRACKET
    	    {
    	        /* 1:46: BETAOPENBRACKET */
    	        mBETAOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:62: CENSORBEGINWITHC
    	    {
    	        /* 1:62: CENSORBEGINWITHC */
    	        mCENSORBEGINWITHC();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:79: CENSORBEGINWITHI
    	    {
    	        /* 1:79: CENSORBEGINWITHI */
    	        mCENSORBEGINWITHI();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:96: CLOGLOGOPENBRACKET
    	    {
    	        /* 1:96: CLOGLOGOPENBRACKET */
    	        mCLOGLOGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:115: CLOSEBRACE
    	    {
    	        /* 1:115: CLOSEBRACE */
    	        mCLOSEBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:126: CLOSEBRACKET
    	    {
    	        /* 1:126: CLOSEBRACKET */
    	        mCLOSEBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:139: CLOSESQUAREBRACKET
    	    {
    	        /* 1:139: CLOSESQUAREBRACKET */
    	        mCLOSESQUAREBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:158: COLON
    	    {
    	        /* 1:158: COLON */
    	        mCOLON();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:164: COMMA
    	    {
    	        /* 1:164: COMMA */
    	        mCOMMA();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:170: DIRICHLETOPENBRACKET
    	    {
    	        /* 1:170: DIRICHLETOPENBRACKET */
    	        mDIRICHLETOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:191: DIV
    	    {
    	        /* 1:191: DIV */
    	        mDIV();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 14:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:195: FORSTART
    	    {
    	        /* 1:195: FORSTART */
    	        mFORSTART();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 15:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:204: IN
    	    {
    	        /* 1:204: IN */
    	        mIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 16:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:207: INVERSEOPENBRACKET
    	    {
    	        /* 1:207: INVERSEOPENBRACKET */
    	        mINVERSEOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 17:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:226: LEFTPOINTER
    	    {
    	        /* 1:226: LEFTPOINTER */
    	        mLEFTPOINTER();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 18:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:238: LOGITOPENBRACKET
    	    {
    	        /* 1:238: LOGITOPENBRACKET */
    	        mLOGITOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 19:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:255: LOGOPENBRACKET
    	    {
    	        /* 1:255: LOGOPENBRACKET */
    	        mLOGOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 20:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:270: MINUS
    	    {
    	        /* 1:270: MINUS */
    	        mMINUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 21:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:276: MODEL
    	    {
    	        /* 1:276: MODEL */
    	        mMODEL();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 22:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:282: MULT
    	    {
    	        /* 1:282: MULT */
    	        mMULT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 23:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:287: MUTLTINOMIALOPENBRACKET
    	    {
    	        /* 1:287: MUTLTINOMIALOPENBRACKET */
    	        mMUTLTINOMIALOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 24:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:311: OPENBRACE
    	    {
    	        /* 1:311: OPENBRACE */
    	        mOPENBRACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 25:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:321: OPENBRACKET
    	    {
    	        /* 1:321: OPENBRACKET */
    	        mOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 26:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:333: OPENSQUAREBRACKET
    	    {
    	        /* 1:333: OPENSQUAREBRACKET */
    	        mOPENSQUAREBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 27:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:351: PLUS
    	    {
    	        /* 1:351: PLUS */
    	        mPLUS();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 28:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:356: PROBITOPENBRACKET
    	    {
    	        /* 1:356: PROBITOPENBRACKET */
    	        mPROBITOPENBRACKET();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 29:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:374: TILDE
    	    {
    	        /* 1:374: TILDE */
    	        mTILDE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 30:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:380: TRUNCATIONBEGIN
    	    {
    	        /* 1:380: TRUNCATIONBEGIN */
    	        mTRUNCATIONBEGIN();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 31:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:396: CONSTANTINT
    	    {
    	        /* 1:396: CONSTANTINT */
    	        mCONSTANTINT();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 32:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:408: NODENAME
    	    {
    	        /* 1:408: NODENAME */
    	        mNODENAME();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 33:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:417: CONSTANTVALUE
    	    {
    	        /* 1:417: CONSTANTVALUE */
    	        mCONSTANTVALUE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;
    	case 34:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:1:431: WHITESPACE
    	    {
    	        /* 1:431: WHITESPACE */
    	        mWHITESPACE();
    	        if  (this->hasException())
    	        {
    	            goto ruleTokensEx;
    	        }



    	    }
    	    break;

        }
    }


    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */

	}



/* End of code
 * =============================================================================
 */
