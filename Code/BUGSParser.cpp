/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-05 17:25:02
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace BUGS {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   BUGSParserTokenNames[34+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ABSOPENBRACKET",
        (ANTLR_UINT8*) "BERNOULLIOPENBRACKET",
        (ANTLR_UINT8*) "BETAOPENBRACKET",
        (ANTLR_UINT8*) "CENSORBEGINWITHC",
        (ANTLR_UINT8*) "CENSORBEGINWITHI",
        (ANTLR_UINT8*) "CLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "CLOSEBRACE",
        (ANTLR_UINT8*) "CLOSEBRACKET",
        (ANTLR_UINT8*) "CLOSESQUAREBRACKET",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "CONSTANTINT",
        (ANTLR_UINT8*) "CONSTANTVALUE",
        (ANTLR_UINT8*) "DIRICHLETOPENBRACKET",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "FORSTART",
        (ANTLR_UINT8*) "IN",
        (ANTLR_UINT8*) "INVERSEOPENBRACKET",
        (ANTLR_UINT8*) "LEFTPOINTER",
        (ANTLR_UINT8*) "LOGITOPENBRACKET",
        (ANTLR_UINT8*) "LOGOPENBRACKET",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MODEL",
        (ANTLR_UINT8*) "MULT",
        (ANTLR_UINT8*) "MUTLTINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "NODENAME",
        (ANTLR_UINT8*) "OPENBRACE",
        (ANTLR_UINT8*) "OPENBRACKET",
        (ANTLR_UINT8*) "OPENSQUAREBRACKET",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "PROBITOPENBRACKET",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRUNCATIONBEGIN",
        (ANTLR_UINT8*) "WHITESPACE"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/bugsparser/Parser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void BUGSParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( BUGSParserTokenNames );


}

void
BUGSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
BUGSParser::~BUGSParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return BUGSParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MODEL_in_prog321_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MODEL_in_prog321( FOLLOW_MODEL_in_prog321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_prog323_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_prog323( FOLLOW_OPENBRACE_in_prog323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_prog325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_prog325( FOLLOW_statements_in_prog325_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_prog327_bits[]	= { ANTLR_UINT64_LIT(0x0000000004000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_prog327( FOLLOW_CLOSEBRACE_in_prog327_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements348_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements348( FOLLOW_stochasticNodeExpr_in_statements348_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements362_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements362( FOLLOW_stochasticNodeExpr_in_statements362_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements375_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements375( FOLLOW_logicalNodeExpr_in_statements375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements389_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements389( FOLLOW_logicalNodeExpr_in_statements389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements403_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements403( FOLLOW_logicalNodeExpr_in_statements403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_startFor_in_statements410_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_startFor_in_statements410( FOLLOW_startFor_in_statements410_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_statements412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_statements412( FOLLOW_statements_in_statements412_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_endFor_in_statements414_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_endFor_in_statements414( FOLLOW_endFor_in_statements414_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr438_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000182) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr438( FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_censor_in_stochasticNodeExpr441_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_censor_in_stochasticNodeExpr441( FOLLOW_censor_in_stochasticNodeExpr441_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_truncation_in_stochasticNodeExpr445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_truncation_in_stochasticNodeExpr445( FOLLOW_truncation_in_stochasticNodeExpr445_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr452_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr452( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr452_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_uvStochasticNodeExpr463_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_uvStochasticNodeExpr463( FOLLOW_uvNode_in_uvStochasticNodeExpr463_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_uvStochasticNodeExpr465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_uvStochasticNodeExpr465( FOLLOW_TILDE_in_uvStochasticNodeExpr465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvDistribution_in_uvStochasticNodeExpr467_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvDistribution_in_uvStochasticNodeExpr467( FOLLOW_uvDistribution_in_uvStochasticNodeExpr467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvStochasticNodeExpr477_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvStochasticNodeExpr477( FOLLOW_mvNode_in_mvStochasticNodeExpr477_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr479_bits[]	= { ANTLR_UINT64_LIT(0x0000000010020000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr479( FOLLOW_TILDE_in_mvStochasticNodeExpr479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvDistribution_in_mvStochasticNodeExpr481_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvDistribution_in_mvStochasticNodeExpr481( FOLLOW_mvDistribution_in_mvStochasticNodeExpr481_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_censor494_bits[]	= { ANTLR_UINT64_LIT(0x0000000020014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_censor494( FOLLOW_set_in_censor494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_censor509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_censor509( FOLLOW_lowerWithOptionalUpper_in_censor509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_censor514_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_censor514( FOLLOW_upperWithOptionalLower_in_censor514_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_censor519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_censor519( FOLLOW_CLOSEBRACKET_in_censor519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCATIONBEGIN_in_truncation531_bits[]	= { ANTLR_UINT64_LIT(0x0000000020014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCATIONBEGIN_in_truncation531( FOLLOW_TRUNCATIONBEGIN_in_truncation531_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_truncation544_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_truncation544( FOLLOW_lowerWithOptionalUpper_in_truncation544_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_truncation548_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_truncation548( FOLLOW_upperWithOptionalLower_in_truncation548_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_truncation553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_truncation553( FOLLOW_CLOSEBRACKET_in_truncation553_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper568_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper568( FOLLOW_uvNode_in_lowerWithOptionalUpper568_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper570_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper570( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper570_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lowerWithOptionalUpper573_bits[]	= { ANTLR_UINT64_LIT(0x0000000020010002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lowerWithOptionalUpper573( FOLLOW_COMMA_in_lowerWithOptionalUpper573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper576( FOLLOW_uvNode_in_lowerWithOptionalUpper576_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper578_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper578( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper578_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower595_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower595( FOLLOW_uvNode_in_upperWithOptionalLower595_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower597( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_upperWithOptionalLower601_bits[]	= { ANTLR_UINT64_LIT(0x0000000020010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_upperWithOptionalLower601( FOLLOW_COMMA_in_upperWithOptionalLower601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower604_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower604( FOLLOW_uvNode_in_upperWithOptionalLower604_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower606_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower606( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower606_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalNodeExpr630_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalNodeExpr630( FOLLOW_uvNode_in_logicalNodeExpr630_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_logicalNodeExpr634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_logicalNodeExpr634( FOLLOW_linkFunction_in_logicalNodeExpr634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr637_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr637( FOLLOW_LEFTPOINTER_in_logicalNodeExpr637_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr639( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_logicalNodeExpr645_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_logicalNodeExpr645( FOLLOW_mvNode_in_logicalNodeExpr645_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr647_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr647( FOLLOW_LEFTPOINTER_in_logicalNodeExpr647_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr649_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr649( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr649_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_linkFunction661_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_linkFunction661( FOLLOW_LOGOPENBRACKET_in_linkFunction661_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction663_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction663( FOLLOW_uvNode_in_linkFunction663_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction665( FOLLOW_CLOSEBRACKET_in_linkFunction665_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_linkFunction671_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_linkFunction671( FOLLOW_LOGITOPENBRACKET_in_linkFunction671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction673_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction673( FOLLOW_uvNode_in_linkFunction673_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction675_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction675( FOLLOW_CLOSEBRACKET_in_linkFunction675_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction680_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction680( FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction682_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction682( FOLLOW_uvNode_in_linkFunction682_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction684_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction684( FOLLOW_CLOSEBRACKET_in_linkFunction684_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_linkFunction689_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_linkFunction689( FOLLOW_PROBITOPENBRACKET_in_linkFunction689_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction691_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction691( FOLLOW_uvNode_in_linkFunction691_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction693_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction693( FOLLOW_CLOSEBRACKET_in_linkFunction693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions706_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions706( FOLLOW_unaryExpression_in_exprWithNodesFunctions706_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions710_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions710( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions710_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions712_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions712( FOLLOW_MINUS_in_exprWithNodesFunctions712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions714( FOLLOW_unaryExpression_in_exprWithNodesFunctions714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions717_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions717( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions717_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions721_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions721( FOLLOW_MINUS_in_exprWithNodesFunctions721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions723_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions723( FOLLOW_unaryExpression_in_exprWithNodesFunctions723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_exprWithNodesFunctions727_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_exprWithNodesFunctions727( FOLLOW_scalarFunctions_in_exprWithNodesFunctions727_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_exprWithNodesFunctions731_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_exprWithNodesFunctions731( FOLLOW_vectorFunctions_in_exprWithNodesFunctions731_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_exprWithNodesFunctions736_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_exprWithNodesFunctions736( FOLLOW_set_in_exprWithNodesFunctions736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions746_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions746( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions746_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_uvNode760_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_uvNode760( FOLLOW_NODENAME_in_uvNode760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_uvNode763_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_uvNode763( FOLLOW_OPENSQUAREBRACKET_in_uvNode763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode765_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode765( FOLLOW_expression_in_uvNode765_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uvNode768_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uvNode768( FOLLOW_COMMA_in_uvNode768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode770_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode770( FOLLOW_expression_in_uvNode770_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_uvNode775_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_uvNode775( FOLLOW_CLOSESQUAREBRACKET_in_uvNode775_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_mvNode788_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_mvNode788( FOLLOW_NODENAME_in_mvNode788_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_mvNode790_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_mvNode790( FOLLOW_OPENSQUAREBRACKET_in_mvNode790_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiIndices_in_mvNode792_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiIndices_in_mvNode792( FOLLOW_multiIndices_in_mvNode792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_mvNode794_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_mvNode794( FOLLOW_CLOSESQUAREBRACKET_in_mvNode794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_expression806_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_expression806( FOLLOW_unaryExpression_in_expression806_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_expression809_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_expression809( FOLLOW_set_in_expression809_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression819_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression819( FOLLOW_expression_in_expression819_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression832_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression832( FOLLOW_CONSTANTINT_in_unaryExpression832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression839_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression839( FOLLOW_CONSTANTVALUE_in_unaryExpression839_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_unaryExpression844_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_unaryExpression844( FOLLOW_uvNode_in_unaryExpression844_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_unaryExpression850_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_unaryExpression850( FOLLOW_OPENBRACKET_in_unaryExpression850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_unaryExpression852_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_unaryExpression852( FOLLOW_expression_in_unaryExpression852_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_unaryExpression854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_unaryExpression854( FOLLOW_CLOSEBRACKET_in_unaryExpression854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices866( FOLLOW_multiDimExpression_in_multiIndices866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multiIndices869_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multiIndices869( FOLLOW_COMMA_in_multiIndices869_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices871( FOLLOW_multiDimExpression_in_multiIndices871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_multiDimExpression895_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_multiDimExpression895( FOLLOW_OPENBRACKET_in_multiDimExpression895_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression897_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression897( FOLLOW_expression_in_multiDimExpression897_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression899_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression899( FOLLOW_COLON_in_multiDimExpression899_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression901_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression901( FOLLOW_expression_in_multiDimExpression901_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multiDimExpression903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multiDimExpression903( FOLLOW_CLOSEBRACKET_in_multiDimExpression903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression908_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression908( FOLLOW_expression_in_multiDimExpression908_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression911_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression911( FOLLOW_COLON_in_multiDimExpression911_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression913_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression913( FOLLOW_expression_in_multiDimExpression913_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FORSTART_in_startFor927_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FORSTART_in_startFor927( FOLLOW_FORSTART_in_startFor927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_startFor929_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_startFor929( FOLLOW_OPENBRACKET_in_startFor929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopVariable_in_startFor931_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopVariable_in_startFor931( FOLLOW_loopVariable_in_startFor931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_IN_in_startFor933_bits[]	= { ANTLR_UINT64_LIT(0x0000000020008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_IN_in_startFor933( FOLLOW_IN_in_startFor933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopBegin_in_startFor935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopBegin_in_startFor935( FOLLOW_loopBegin_in_startFor935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_startFor937_bits[]	= { ANTLR_UINT64_LIT(0x0000000020008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_startFor937( FOLLOW_COLON_in_startFor937_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopEnd_in_startFor939_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopEnd_in_startFor939( FOLLOW_loopEnd_in_startFor939_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_startFor941_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_startFor941( FOLLOW_CLOSEBRACKET_in_startFor941_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_startFor943_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_startFor943( FOLLOW_OPENBRACE_in_startFor943_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_endFor956_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_endFor956( FOLLOW_CLOSEBRACE_in_endFor956_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_loopVariable968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_loopVariable968( FOLLOW_NODENAME_in_loopVariable968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopBegin980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopBegin980( FOLLOW_uvNode_in_loopBegin980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopBegin986_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopBegin986( FOLLOW_CONSTANTINT_in_loopBegin986_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopEnd998_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopEnd998( FOLLOW_uvNode_in_loopEnd998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopEnd1004_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopEnd1004( FOLLOW_CONSTANTINT_in_loopEnd1004_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ABSOPENBRACKET_in_scalarFunctions1160_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ABSOPENBRACKET_in_scalarFunctions1160( FOLLOW_ABSOPENBRACKET_in_scalarFunctions1160_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions1162_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions1162( FOLLOW_exprWithNodesFunctions_in_scalarFunctions1162_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions1164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions1164( FOLLOW_CLOSEBRACKET_in_scalarFunctions1164_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1176_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1176( FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions1178_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions1178( FOLLOW_mvNode_in_vectorFunctions1178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions1180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions1180( FOLLOW_CLOSEBRACKET_in_vectorFunctions1180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteUnivariate_in_uvDistribution1193_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteUnivariate_in_uvDistribution1193( FOLLOW_discreteUnivariate_in_uvDistribution1193_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousUnivariate_in_uvDistribution1199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousUnivariate_in_uvDistribution1199( FOLLOW_continuousUnivariate_in_uvDistribution1199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteMultivariate_in_mvDistribution1211_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteMultivariate_in_mvDistribution1211( FOLLOW_discreteMultivariate_in_mvDistribution1211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousMultivariate_in_mvDistribution1217_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousMultivariate_in_mvDistribution1217( FOLLOW_continuousMultivariate_in_mvDistribution1217_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_bernoulli_in_discreteUnivariate1229_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_bernoulli_in_discreteUnivariate1229( FOLLOW_bernoulli_in_discreteUnivariate1229_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_beta_in_continuousUnivariate1242_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_beta_in_continuousUnivariate1242( FOLLOW_beta_in_continuousUnivariate1242_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multinomial_in_discreteMultivariate1255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multinomial_in_discreteMultivariate1255( FOLLOW_multinomial_in_discreteMultivariate1255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_dirichlet_in_continuousMultivariate1267_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_dirichlet_in_continuousMultivariate1267( FOLLOW_dirichlet_in_continuousMultivariate1267_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_distributionParameter1280_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_distributionParameter1280( FOLLOW_uvNode_in_distributionParameter1280_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_distributionParameter1284_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_distributionParameter1284( FOLLOW_CONSTANTINT_in_distributionParameter1284_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_distributionParameter1288_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_distributionParameter1288( FOLLOW_CONSTANTVALUE_in_distributionParameter1288_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1301_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1301( FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1301_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_bernoulli1303_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_bernoulli1303( FOLLOW_distributionParameter_in_bernoulli1303_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_bernoulli1305_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_bernoulli1305( FOLLOW_CLOSEBRACKET_in_bernoulli1305_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BETAOPENBRACKET_in_beta1317_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BETAOPENBRACKET_in_beta1317( FOLLOW_BETAOPENBRACKET_in_beta1317_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1319_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1319( FOLLOW_distributionParameter_in_beta1319_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_beta1321_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_beta1321( FOLLOW_COMMA_in_beta1321_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1323( FOLLOW_distributionParameter_in_beta1323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_beta1325_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_beta1325( FOLLOW_CLOSEBRACKET_in_beta1325_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1337_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1337( FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1337_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1339_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1339( FOLLOW_distributionParameter_in_multinomial1339_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_multinomial1341_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_multinomial1341( FOLLOW_OPENSQUAREBRACKET_in_multinomial1341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_multinomial1343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_multinomial1343( FOLLOW_CLOSESQUAREBRACKET_in_multinomial1343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multinomial1345_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multinomial1345( FOLLOW_COMMA_in_multinomial1345_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1349( FOLLOW_distributionParameter_in_multinomial1349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multinomial1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multinomial1351( FOLLOW_CLOSEBRACKET_in_multinomial1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1363_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1363( FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1363_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_dirichlet1365_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_dirichlet1365( FOLLOW_distributionParameter_in_dirichlet1365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_dirichlet1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_dirichlet1367( FOLLOW_OPENSQUAREBRACKET_in_dirichlet1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1369_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1369( FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_dirichlet1371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_dirichlet1371( FOLLOW_COMMA_in_dirichlet1371_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred1_BUGS341_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred1_BUGS341( FOLLOW_uvNode_in_synpred1_BUGS341_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred1_BUGS343_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred1_BUGS343( FOLLOW_TILDE_in_synpred1_BUGS343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred2_BUGS355_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred2_BUGS355( FOLLOW_mvNode_in_synpred2_BUGS355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred2_BUGS357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred2_BUGS357( FOLLOW_TILDE_in_synpred2_BUGS357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred3_BUGS368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred3_BUGS368( FOLLOW_uvNode_in_synpred3_BUGS368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred3_BUGS370_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred3_BUGS370( FOLLOW_LEFTPOINTER_in_synpred3_BUGS370_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred4_BUGS382_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred4_BUGS382( FOLLOW_mvNode_in_synpred4_BUGS382_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred4_BUGS384_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred4_BUGS384( FOLLOW_LEFTPOINTER_in_synpred4_BUGS384_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred5_BUGS396_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred5_BUGS396( FOLLOW_linkFunction_in_synpred5_BUGS396_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred5_BUGS398_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred5_BUGS398( FOLLOW_LEFTPOINTER_in_synpred5_BUGS398_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred6_BUGS433_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred6_BUGS433( FOLLOW_uvNode_in_synpred6_BUGS433_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred7_BUGS503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred7_BUGS503( FOLLOW_uvNode_in_synpred7_BUGS503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred7_BUGS505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred7_BUGS505( FOLLOW_CONSTANTVALUE_in_synpred7_BUGS505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred8_BUGS537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred8_BUGS537( FOLLOW_uvNode_in_synpred8_BUGS537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred8_BUGS539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred8_BUGS539( FOLLOW_CONSTANTVALUE_in_synpred8_BUGS539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred9_BUGS620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred9_BUGS620( FOLLOW_uvNode_in_synpred9_BUGS620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred9_BUGS624_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred9_BUGS624( FOLLOW_linkFunction_in_synpred9_BUGS624_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_synpred10_BUGS886_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_synpred10_BUGS886( FOLLOW_OPENBRACKET_in_synpred10_BUGS886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_synpred10_BUGS888_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_synpred10_BUGS888( FOLLOW_expression_in_synpred10_BUGS888_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_synpred10_BUGS890_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_synpred10_BUGS890( FOLLOW_COLON_in_synpred10_BUGS890_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /home/shriram/bugsparser/Parser/BUGS.g:72:1: prog : ( MODEL OPENBRACE statements CLOSEBRACE )* ;
 */
void
BUGSParser::prog()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:72:6: ( ( MODEL OPENBRACE statements CLOSEBRACE )* )
        // /home/shriram/bugsparser/Parser/BUGS.g:72:8: ( MODEL OPENBRACE statements CLOSEBRACE )*
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:72:8: ( MODEL OPENBRACE statements CLOSEBRACE )*

            for (;;)
            {
                int alt1=2;
                switch ( this->LA(1) )
                {
                case MODEL:
                	{
                		alt1=1;
                	}
                    break;

                }

                switch (alt1)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:72:9: MODEL OPENBRACE statements CLOSEBRACE
            	    {
            	         this->matchToken(MODEL, &FOLLOW_MODEL_in_prog321);
            	        if  (this->hasException())
            	        {
            	            goto ruleprogEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_prog323);
            	        if  (this->hasException())
            	        {
            	            goto ruleprogEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_statements_in_prog325);
            	        statements();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleprogEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_prog327);
            	        if  (this->hasException())
            	        {
            	            goto ruleprogEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop1;	/* break out of the loop */
            	    break;
                }
            }
            loop1: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prog */

/**
 * $ANTLR start statements
 * /home/shriram/bugsparser/Parser/BUGS.g:74:1: statements : ( ( uvNode TILDE )=> stochasticNodeExpr | ( mvNode TILDE )=> stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+ ;
 */
void
BUGSParser::statements()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:74:12: ( ( ( uvNode TILDE )=> stochasticNodeExpr | ( mvNode TILDE )=> stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+ )
        // /home/shriram/bugsparser/Parser/BUGS.g:74:15: ( ( uvNode TILDE )=> stochasticNodeExpr | ( mvNode TILDE )=> stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:74:15: ( ( uvNode TILDE )=> stochasticNodeExpr | ( mvNode TILDE )=> stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+
            {
                int cnt2=0;

                for (;;)
                {
                    int alt2=7;
            	switch ( this->LA(1) )
            	{
            	case NODENAME:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_2 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_BUGS>() )))
            			    {
            			        alt2=1;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred2_BUGS>() )))
            			    {
            			        alt2=2;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt2=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt2=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt2=5;
            			    }

            			}
            		}
            	    break;
            	case LOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_3 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt2=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt2=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt2=5;
            			    }

            			}
            		}
            	    break;
            	case LOGITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_4 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt2=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt2=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt2=5;
            			    }

            			}
            		}
            	    break;
            	case CLOGLOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_5 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt2=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt2=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt2=5;
            			    }

            			}
            		}
            	    break;
            	case PROBITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA2_6 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt2=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt2=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt2=5;
            			    }

            			}
            		}
            	    break;
            	case FORSTART:
            		{
            			alt2=6;
            		}
            	    break;

            	}

            	switch (alt2)
            	{
            	    case 1:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:74:16: ( uvNode TILDE )=> stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements348);
            	            stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 2:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:75:4: ( mvNode TILDE )=> stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements362);
            	            stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 3:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:76:4: ( uvNode LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements375);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 4:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:77:4: ( mvNode LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements389);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 5:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:78:4: ( linkFunction LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements403);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return ;
            	            }


            	        }
            	        break;
            	    case 6:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:79:4: ( startFor statements endFor )
            	        {
            	            // /home/shriram/bugsparser/Parser/BUGS.g:79:4: ( startFor statements endFor )
            	            // /home/shriram/bugsparser/Parser/BUGS.g:79:5: startFor statements endFor
            	            {
            	                this->followPush(FOLLOW_startFor_in_statements410);
            	                startFor();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return ;
            	                }


            	                this->followPush(FOLLOW_statements_in_statements412);
            	                statements();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return ;
            	                }


            	                this->followPush(FOLLOW_endFor_in_statements414);
            	                endFor();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return ;
            	                }


            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt2 >= 1 )
            		{
            		    goto loop2;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return ;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< BUGSParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementsEx;
            	}
            	cnt2++;
                }
                loop2: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementsEx; /* Prevent compiler warnings */
    rulestatementsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end statements */

/**
 * $ANTLR start stochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:83:1: stochasticNodeExpr : ( ( uvNode )=> uvStochasticNodeExpr ( censor | truncation )? | mvStochasticNodeExpr );
 */
void
BUGSParser::stochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:84:2: ( ( uvNode )=> uvStochasticNodeExpr ( censor | truncation )? | mvStochasticNodeExpr )

            ANTLR_UINT32 alt4;

            alt4=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA4_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred6_BUGS>() )))
            		    {
            		        alt4=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt4=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 4 );
            		        ex->set_state( 1 );


            		        goto rulestochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 4 );
                ex->set_state( 0 );


                goto rulestochasticNodeExprEx;

            }

            switch (alt4)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:84:4: ( uvNode )=> uvStochasticNodeExpr ( censor | truncation )?
        	    {
        	        this->followPush(FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr438);
        	        uvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:84:37: ( censor | truncation )?
        	        {
        	            int alt3=3;
        	            switch ( this->LA(1) )
        	            {
        	                case CENSORBEGINWITHC:
        	                case CENSORBEGINWITHI:
        	                	{
        	                		alt3=1;
        	                	}
        	                    break;
        	                case TRUNCATIONBEGIN:
        	                	{
        	                		alt3=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt3)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:84:38: censor
        	        	    {
        	        	        this->followPush(FOLLOW_censor_in_stochasticNodeExpr441);
        	        	        censor();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:84:47: truncation
        	        	    {
        	        	        this->followPush(FOLLOW_truncation_in_stochasticNodeExpr445);
        	        	        truncation();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:85:4: mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr452);
        	        mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestochasticNodeExprEx; /* Prevent compiler warnings */
    rulestochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end stochasticNodeExpr */

/**
 * $ANTLR start uvStochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:88:1: uvStochasticNodeExpr : uvNode TILDE uvDistribution ;
 */
void
BUGSParser::uvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:89:2: ( uvNode TILDE uvDistribution )
        // /home/shriram/bugsparser/Parser/BUGS.g:89:3: uvNode TILDE uvDistribution
        {
            this->followPush(FOLLOW_uvNode_in_uvStochasticNodeExpr463);
            uvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_uvStochasticNodeExpr465);
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_uvDistribution_in_uvStochasticNodeExpr467);
            uvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvStochasticNodeExprEx; /* Prevent compiler warnings */
    ruleuvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end uvStochasticNodeExpr */

/**
 * $ANTLR start mvStochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:91:1: mvStochasticNodeExpr : mvNode TILDE mvDistribution ;
 */
void
BUGSParser::mvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:92:2: ( mvNode TILDE mvDistribution )
        // /home/shriram/bugsparser/Parser/BUGS.g:92:3: mvNode TILDE mvDistribution
        {
            this->followPush(FOLLOW_mvNode_in_mvStochasticNodeExpr477);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr479);
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_mvDistribution_in_mvStochasticNodeExpr481);
            mvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvStochasticNodeExprEx; /* Prevent compiler warnings */
    rulemvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvStochasticNodeExpr */

/**
 * $ANTLR start censor
 * /home/shriram/bugsparser/Parser/BUGS.g:95:1: censor : ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::censor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:96:3: ( ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:96:5: ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
            if ( ((this->LA(1) >= CENSORBEGINWITHC) && (this->LA(1) <= CENSORBEGINWITHI)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulecensorEx;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:96:41: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA5_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 1 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA5_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 2 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto rulecensorEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:96:43: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_censor509);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:96:94: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_censor514);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_censor519);
            if  (this->hasException())
            {
                goto rulecensorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecensorEx; /* Prevent compiler warnings */
    rulecensorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end censor */

/**
 * $ANTLR start truncation
 * /home/shriram/bugsparser/Parser/BUGS.g:98:1: truncation : TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::truncation()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:99:2: ( TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:99:4: TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
             this->matchToken(TRUNCATIONBEGIN, &FOLLOW_TRUNCATIONBEGIN_in_truncation531);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:99:20: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA6_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 1 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA6_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt6=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt6=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 6 );
                		        ex->set_state( 2 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto ruletruncationEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:99:23: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_truncation544);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:99:74: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_truncation548);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_truncation553);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletruncationEx; /* Prevent compiler warnings */
    ruletruncationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end truncation */

/**
 * $ANTLR start lowerWithOptionalUpper
 * /home/shriram/bugsparser/Parser/BUGS.g:102:1: lowerWithOptionalUpper : ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? ;
 */
void
BUGSParser::lowerWithOptionalUpper()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:103:2: ( ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:103:5: ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )?
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:103:5: ( uvNode | CONSTANTVALUE )
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt7=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt7=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 7 );
                    ex->set_state( 0 );


                    goto rulelowerWithOptionalUpperEx;

                }

                switch (alt7)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:103:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper568);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:103:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper570);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_lowerWithOptionalUpper573);
            if  (this->hasException())
            {
                goto rulelowerWithOptionalUpperEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:103:34: ( uvNode | CONSTANTVALUE )?
            {
                int alt8=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt8=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt8=2;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:103:35: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper576);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:103:42: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper578);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelowerWithOptionalUpperEx; /* Prevent compiler warnings */
    rulelowerWithOptionalUpperEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end lowerWithOptionalUpper */

/**
 * $ANTLR start upperWithOptionalLower
 * /home/shriram/bugsparser/Parser/BUGS.g:106:1: upperWithOptionalLower : ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) ;
 */
void
BUGSParser::upperWithOptionalLower()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:107:2: ( ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) )
        // /home/shriram/bugsparser/Parser/BUGS.g:107:5: ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE )
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:107:5: ( uvNode | CONSTANTVALUE )?
            {
                int alt9=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt9=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt9=2;
                    	}
                        break;
                }

                switch (alt9)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:107:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower595);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:107:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower597);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_upperWithOptionalLower601);
            if  (this->hasException())
            {
                goto ruleupperWithOptionalLowerEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:107:35: ( uvNode | CONSTANTVALUE )
            {
                int alt10=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt10=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt10=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 10 );
                    ex->set_state( 0 );


                    goto ruleupperWithOptionalLowerEx;

                }

                switch (alt10)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:107:36: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower604);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:107:43: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower606);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleupperWithOptionalLowerEx; /* Prevent compiler warnings */
    ruleupperWithOptionalLowerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end upperWithOptionalLower */

/**
 * $ANTLR start logicalNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:110:1: logicalNodeExpr : ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions );
 */
void
BUGSParser::logicalNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:111:2: ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions )

            ANTLR_UINT32 alt12;

            alt12=2;

            {
                int LA12_0 = this->LA(1);
                if ( (LA12_0 == NODENAME))
                {
                    {
                        int LA12_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                        {
                            alt12=1;
                        }
                        else if ( (true))
                        {
                            alt12=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return ;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 12 );
                            ex->set_state( 1 );


                            goto rulelogicalNodeExprEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA12_0 == LOGOPENBRACKET))
                {
                    alt12=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA12_0 == LOGITOPENBRACKET))
                {
                    alt12=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA12_0 == CLOGLOGOPENBRACKET))
                {
                    alt12=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA12_0 == PROBITOPENBRACKET))
                {
                    alt12=1;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 12 );
                    ex->set_state( 0 );


                    goto rulelogicalNodeExprEx;

                }
            }
            switch (alt12)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:111:4: ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions
        	    {
        	        // /home/shriram/bugsparser/Parser/BUGS.g:111:31: ( uvNode | linkFunction )
        	        {
        	            int alt11=2;
        	            switch ( this->LA(1) )
        	            {
        	            case NODENAME:
        	            	{
        	            		alt11=1;
        	            	}
        	                break;
        	            case CLOGLOGOPENBRACKET:
        	            case LOGITOPENBRACKET:
        	            case LOGOPENBRACKET:
        	            case PROBITOPENBRACKET:
        	            	{
        	            		alt11=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return ;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 11 );
        	                ex->set_state( 0 );


        	                goto rulelogicalNodeExprEx;

        	            }

        	            switch (alt11)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:111:32: uvNode
        	        	    {
        	        	        this->followPush(FOLLOW_uvNode_in_logicalNodeExpr630);
        	        	        uvNode();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:111:41: linkFunction
        	        	    {
        	        	        this->followPush(FOLLOW_linkFunction_in_logicalNodeExpr634);
        	        	        linkFunction();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr637);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr639);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:112:5: mvNode LEFTPOINTER exprWithNodesFunctions
        	    {
        	        this->followPush(FOLLOW_mvNode_in_logicalNodeExpr645);
        	        mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr647);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr649);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalNodeExprEx; /* Prevent compiler warnings */
    rulelogicalNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end logicalNodeExpr */

/**
 * $ANTLR start linkFunction
 * /home/shriram/bugsparser/Parser/BUGS.g:115:1: linkFunction : ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET );
 */
void
BUGSParser::linkFunction()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:116:2: ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET )

            ANTLR_UINT32 alt13;

            alt13=4;

            switch ( this->LA(1) )
            {
            case LOGOPENBRACKET:
            	{
            		alt13=1;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt13=2;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt13=3;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt13=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 13 );
                ex->set_state( 0 );


                goto rulelinkFunctionEx;

            }

            switch (alt13)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:116:4: LOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_linkFunction661);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction663);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction665);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:117:4: LOGITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_linkFunction671);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction673);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction675);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:118:4: CLOGLOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction680);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction682);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction684);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:119:4: PROBITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_linkFunction689);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction691);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction693);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelinkFunctionEx; /* Prevent compiler warnings */
    rulelinkFunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end linkFunction */

/**
 * $ANTLR start exprWithNodesFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:122:1: exprWithNodesFunctions : ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )? ;
 */
void
BUGSParser::exprWithNodesFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:123:2: ( ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:123:4: ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )?
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:123:4: ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions )
            {
                int alt14=5;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                case NODENAME:
                	{
                		alt14=1;
                	}
                    break;
                case OPENBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case MINUS:
                			{
                				alt14=2;
                			}
                		    break;
                		case CONSTANTINT:
                		case CONSTANTVALUE:
                		case NODENAME:
                		case OPENBRACKET:
                			{
                				alt14=1;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 14 );
                		    ex->set_state( 2 );


                		    goto ruleexprWithNodesFunctionsEx;

                		}

                	}
                    break;
                case MINUS:
                	{
                		alt14=3;
                	}
                    break;
                case ABSOPENBRACKET:
                	{
                		alt14=4;
                	}
                    break;
                case INVERSEOPENBRACKET:
                	{
                		alt14=5;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 14 );
                    ex->set_state( 0 );


                    goto ruleexprWithNodesFunctionsEx;

                }

                switch (alt14)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:5: unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions706);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:23: OPENBRACKET MINUS unaryExpression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions710);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions712);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions714);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions717);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:73: MINUS unaryExpression
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions721);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions723);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:97: scalarFunctions
            	    {
            	        this->followPush(FOLLOW_scalarFunctions_in_exprWithNodesFunctions727);
            	        scalarFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:115: vectorFunctions
            	    {
            	        this->followPush(FOLLOW_vectorFunctions_in_exprWithNodesFunctions731);
            	        vectorFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // /home/shriram/bugsparser/Parser/BUGS.g:123:133: ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )?
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:123:134: ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions
            	    {
            	        if ( this->LA(1) == DIV || this->LA(1) == MINUS || this->LA(1) == MULT || this->LA(1) == PLUS )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return ;
            	            }

            	            new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleexprWithNodesFunctionsEx;
            	        }


            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions746);
            	        exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprWithNodesFunctionsEx; /* Prevent compiler warnings */
    ruleexprWithNodesFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end exprWithNodesFunctions */

/**
 * $ANTLR start uvNode
 * /home/shriram/bugsparser/Parser/BUGS.g:126:1: uvNode : NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )? ;
 */
void
BUGSParser::uvNode()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:127:2: ( NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:127:4: NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )?
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_uvNode760);
            if  (this->hasException())
            {
                goto ruleuvNodeEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:127:13: ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )?
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                    case OPENSQUAREBRACKET:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case CONSTANTINT:
                    		    case CONSTANTVALUE:
                    		    case NODENAME:
                    		    case OPENBRACKET:
                    		    	{
                    		    		alt17=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:127:14: OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET
            	    {
            	         this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_uvNode763);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_expression_in_uvNode765);
            	        expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        // /home/shriram/bugsparser/Parser/BUGS.g:127:43: ( COMMA expression )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt16=1;
            	            	}
            	                break;

            	            }

            	            switch (alt16)
            	            {
            	        	case 1:
            	        	    // /home/shriram/bugsparser/Parser/BUGS.g:127:44: COMMA expression
            	        	    {
            	        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_uvNode768);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	        this->followPush(FOLLOW_expression_in_uvNode770);
            	        	        expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	         this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_uvNode775);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvNodeEx; /* Prevent compiler warnings */
    ruleuvNodeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end uvNode */

/**
 * $ANTLR start mvNode
 * /home/shriram/bugsparser/Parser/BUGS.g:129:1: mvNode : NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET ;
 */
void
BUGSParser::mvNode()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:130:2: ( NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:130:4: NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_mvNode788);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_mvNode790);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_multiIndices_in_mvNode792);
            multiIndices();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_mvNode794);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvNodeEx; /* Prevent compiler warnings */
    rulemvNodeEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvNode */

/**
 * $ANTLR start expression
 * /home/shriram/bugsparser/Parser/BUGS.g:133:1: expression : unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )? ;
 */
void
BUGSParser::expression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:134:2: ( unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:134:4: unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )?
        {
            this->followPush(FOLLOW_unaryExpression_in_expression806);
            unaryExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpressionEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:134:20: ( ( PLUS | MINUS | MULT | DIV ) expression )?
            {
                int alt18=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt18=1;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:134:21: ( PLUS | MINUS | MULT | DIV ) expression
            	    {
            	        if ( this->LA(1) == DIV || this->LA(1) == MINUS || this->LA(1) == MULT || this->LA(1) == PLUS )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return ;
            	            }

            	            new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleexpressionEx;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression819);
            	        expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start unaryExpression
 * /home/shriram/bugsparser/Parser/BUGS.g:137:1: unaryExpression : ( CONSTANTINT | CONSTANTVALUE | uvNode | OPENBRACKET expression CLOSEBRACKET );
 */
void
BUGSParser::unaryExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:138:2: ( CONSTANTINT | CONSTANTVALUE | uvNode | OPENBRACKET expression CLOSEBRACKET )

            ANTLR_UINT32 alt19;

            alt19=4;

            switch ( this->LA(1) )
            {
            case CONSTANTINT:
            	{
            		alt19=1;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt19=2;
            	}
                break;
            case NODENAME:
            	{
            		alt19=3;
            	}
                break;
            case OPENBRACKET:
            	{
            		alt19=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleunaryExpressionEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:138:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression832);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:139:4: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression839);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:140:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_unaryExpression844);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:141:4: OPENBRACKET expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_unaryExpression850);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_unaryExpression852);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_unaryExpression854);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end unaryExpression */

/**
 * $ANTLR start multiIndices
 * /home/shriram/bugsparser/Parser/BUGS.g:144:1: multiIndices : multiDimExpression ( COMMA multiDimExpression )* ;
 */
void
BUGSParser::multiIndices()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:145:2: ( multiDimExpression ( COMMA multiDimExpression )* )
        // /home/shriram/bugsparser/Parser/BUGS.g:145:4: multiDimExpression ( COMMA multiDimExpression )*
        {
            this->followPush(FOLLOW_multiDimExpression_in_multiIndices866);
            multiDimExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiIndicesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:145:23: ( COMMA multiDimExpression )*

            for (;;)
            {
                int alt20=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:145:24: COMMA multiDimExpression
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_multiIndices869);
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_multiDimExpression_in_multiIndices871);
            	        multiDimExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiIndicesEx; /* Prevent compiler warnings */
    rulemultiIndicesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiIndices */

/**
 * $ANTLR start multiDimExpression
 * /home/shriram/bugsparser/Parser/BUGS.g:148:1: multiDimExpression : ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? );
 */
void
BUGSParser::multiDimExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:149:2: ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case OPENBRACKET:
            	{
            		{
            		    int LA22_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
            		    {
            		        alt22=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt22=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 22 );
            		        ex->set_state( 1 );


            		        goto rulemultiDimExpressionEx;

            		    }
            		}
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case NODENAME:
            	{
            		alt22=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto rulemultiDimExpressionEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:149:4: ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_multiDimExpression895);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression897);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression899);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression901);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multiDimExpression903);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:150:4: expression ( COLON expression )?
        	    {
        	        this->followPush(FOLLOW_expression_in_multiDimExpression908);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:150:15: ( COLON expression )?
        	        {
        	            int alt21=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:150:16: COLON expression
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression911);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_multiDimExpression913);
        	        	        expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemultiDimExpressionEx; /* Prevent compiler warnings */
    rulemultiDimExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiDimExpression */

/**
 * $ANTLR start startFor
 * /home/shriram/bugsparser/Parser/BUGS.g:153:1: startFor : FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE ;
 */
void
BUGSParser::startFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:154:2: ( FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE )
        // /home/shriram/bugsparser/Parser/BUGS.g:154:4: FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE
        {
             this->matchToken(FORSTART, &FOLLOW_FORSTART_in_startFor927);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_startFor929);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopVariable_in_startFor931);
            loopVariable();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(IN, &FOLLOW_IN_in_startFor933);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopBegin_in_startFor935);
            loopBegin();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COLON, &FOLLOW_COLON_in_startFor937);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopEnd_in_startFor939);
            loopEnd();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_startFor941);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_startFor943);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestartForEx; /* Prevent compiler warnings */
    rulestartForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end startFor */

/**
 * $ANTLR start endFor
 * /home/shriram/bugsparser/Parser/BUGS.g:157:1: endFor : CLOSEBRACE ;
 */
void
BUGSParser::endFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:158:2: ( CLOSEBRACE )
        // /home/shriram/bugsparser/Parser/BUGS.g:158:4: CLOSEBRACE
        {
             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_endFor956);
            if  (this->hasException())
            {
                goto ruleendForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendForEx; /* Prevent compiler warnings */
    ruleendForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end endFor */

/**
 * $ANTLR start loopVariable
 * /home/shriram/bugsparser/Parser/BUGS.g:161:1: loopVariable : NODENAME ;
 */
void
BUGSParser::loopVariable()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:162:2: ( NODENAME )
        // /home/shriram/bugsparser/Parser/BUGS.g:162:4: NODENAME
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_loopVariable968);
            if  (this->hasException())
            {
                goto ruleloopVariableEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopVariableEx; /* Prevent compiler warnings */
    ruleloopVariableEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopVariable */

/**
 * $ANTLR start loopBegin
 * /home/shriram/bugsparser/Parser/BUGS.g:165:1: loopBegin : ( uvNode | CONSTANTINT );
 */
void
BUGSParser::loopBegin()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:166:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt23;

            alt23=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt23=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt23=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleloopBeginEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:166:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopBegin980);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:167:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopBegin986);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopBeginEx; /* Prevent compiler warnings */
    ruleloopBeginEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopBegin */

/**
 * $ANTLR start loopEnd
 * /home/shriram/bugsparser/Parser/BUGS.g:170:1: loopEnd : ( uvNode | CONSTANTINT );
 */
void
BUGSParser::loopEnd()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:171:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt24;

            alt24=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt24=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt24=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleloopEndEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:171:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopEnd998);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:172:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopEnd1004);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopEndEx; /* Prevent compiler warnings */
    ruleloopEndEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopEnd */

/**
 * $ANTLR start scalarFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:189:1: scalarFunctions : ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET ;
 */
void
BUGSParser::scalarFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:190:2: ( ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:190:4: ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET
        {
             this->matchToken(ABSOPENBRACKET, &FOLLOW_ABSOPENBRACKET_in_scalarFunctions1160);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions1162);
            exprWithNodesFunctions();

            this->followPop();
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions1164);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarFunctionsEx; /* Prevent compiler warnings */
    rulescalarFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end scalarFunctions */

/**
 * $ANTLR start vectorFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:193:1: vectorFunctions : INVERSEOPENBRACKET mvNode CLOSEBRACKET ;
 */
void
BUGSParser::vectorFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:194:2: ( INVERSEOPENBRACKET mvNode CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:194:4: INVERSEOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(INVERSEOPENBRACKET, &FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1176);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_mvNode_in_vectorFunctions1178);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions1180);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorFunctionsEx; /* Prevent compiler warnings */
    rulevectorFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end vectorFunctions */

/**
 * $ANTLR start uvDistribution
 * /home/shriram/bugsparser/Parser/BUGS.g:197:1: uvDistribution : ( discreteUnivariate | continuousUnivariate );
 */
void
BUGSParser::uvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:198:2: ( discreteUnivariate | continuousUnivariate )

            ANTLR_UINT32 alt25;

            alt25=2;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            	{
            		alt25=1;
            	}
                break;
            case BETAOPENBRACKET:
            	{
            		alt25=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleuvDistributionEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:198:4: discreteUnivariate
        	    {
        	        this->followPush(FOLLOW_discreteUnivariate_in_uvDistribution1193);
        	        discreteUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:199:4: continuousUnivariate
        	    {
        	        this->followPush(FOLLOW_continuousUnivariate_in_uvDistribution1199);
        	        continuousUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleuvDistributionEx; /* Prevent compiler warnings */
    ruleuvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end uvDistribution */

/**
 * $ANTLR start mvDistribution
 * /home/shriram/bugsparser/Parser/BUGS.g:202:1: mvDistribution : ( discreteMultivariate | continuousMultivariate );
 */
void
BUGSParser::mvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:203:2: ( discreteMultivariate | continuousMultivariate )

            ANTLR_UINT32 alt26;

            alt26=2;

            switch ( this->LA(1) )
            {
            case MUTLTINOMIALOPENBRACKET:
            	{
            		alt26=1;
            	}
                break;
            case DIRICHLETOPENBRACKET:
            	{
            		alt26=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto rulemvDistributionEx;

            }

            switch (alt26)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:203:4: discreteMultivariate
        	    {
        	        this->followPush(FOLLOW_discreteMultivariate_in_mvDistribution1211);
        	        discreteMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:204:4: continuousMultivariate
        	    {
        	        this->followPush(FOLLOW_continuousMultivariate_in_mvDistribution1217);
        	        continuousMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvDistributionEx; /* Prevent compiler warnings */
    rulemvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvDistribution */

/**
 * $ANTLR start discreteUnivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:207:1: discreteUnivariate : bernoulli ;
 */
void
BUGSParser::discreteUnivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:208:2: ( bernoulli )
        // /home/shriram/bugsparser/Parser/BUGS.g:208:4: bernoulli
        {
            this->followPush(FOLLOW_bernoulli_in_discreteUnivariate1229);
            bernoulli();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteUnivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteUnivariateEx; /* Prevent compiler warnings */
    rulediscreteUnivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end discreteUnivariate */

/**
 * $ANTLR start continuousUnivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:211:1: continuousUnivariate : beta ;
 */
void
BUGSParser::continuousUnivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:212:2: ( beta )
        // /home/shriram/bugsparser/Parser/BUGS.g:212:4: beta
        {
            this->followPush(FOLLOW_beta_in_continuousUnivariate1242);
            beta();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousUnivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousUnivariateEx; /* Prevent compiler warnings */
    rulecontinuousUnivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end continuousUnivariate */

/**
 * $ANTLR start discreteMultivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:215:1: discreteMultivariate : multinomial ;
 */
void
BUGSParser::discreteMultivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:216:2: ( multinomial )
        // /home/shriram/bugsparser/Parser/BUGS.g:216:4: multinomial
        {
            this->followPush(FOLLOW_multinomial_in_discreteMultivariate1255);
            multinomial();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteMultivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteMultivariateEx; /* Prevent compiler warnings */
    rulediscreteMultivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end discreteMultivariate */

/**
 * $ANTLR start continuousMultivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:219:1: continuousMultivariate : dirichlet ;
 */
void
BUGSParser::continuousMultivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:220:2: ( dirichlet )
        // /home/shriram/bugsparser/Parser/BUGS.g:220:4: dirichlet
        {
            this->followPush(FOLLOW_dirichlet_in_continuousMultivariate1267);
            dirichlet();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousMultivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousMultivariateEx; /* Prevent compiler warnings */
    rulecontinuousMultivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end continuousMultivariate */

/**
 * $ANTLR start distributionParameter
 * /home/shriram/bugsparser/Parser/BUGS.g:223:1: distributionParameter : ( uvNode | CONSTANTINT | CONSTANTVALUE );
 */
void
BUGSParser::distributionParameter()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:224:2: ( uvNode | CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt27;

            alt27=3;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt27=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt27=2;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt27=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto ruledistributionParameterEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:224:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_distributionParameter1280);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:224:13: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_distributionParameter1284);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:224:27: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_distributionParameter1288);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledistributionParameterEx; /* Prevent compiler warnings */
    ruledistributionParameterEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end distributionParameter */

/**
 * $ANTLR start bernoulli
 * /home/shriram/bugsparser/Parser/BUGS.g:227:1: bernoulli : BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
void
BUGSParser::bernoulli()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:228:2: ( BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:228:4: BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(BERNOULLIOPENBRACKET, &FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1301);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_bernoulli1303);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_bernoulli1305);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebernoulliEx; /* Prevent compiler warnings */
    rulebernoulliEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end bernoulli */

/**
 * $ANTLR start beta
 * /home/shriram/bugsparser/Parser/BUGS.g:231:1: beta : BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET ;
 */
void
BUGSParser::beta()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:232:2: ( BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:232:4: BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET
        {
             this->matchToken(BETAOPENBRACKET, &FOLLOW_BETAOPENBRACKET_in_beta1317);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1319);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_beta1321);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1323);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_beta1325);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebetaEx; /* Prevent compiler warnings */
    rulebetaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end beta */

/**
 * $ANTLR start multinomial
 * /home/shriram/bugsparser/Parser/BUGS.g:235:1: multinomial : MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET ;
 */
void
BUGSParser::multinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:236:2: ( MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:236:4: MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET
        {
             this->matchToken(MUTLTINOMIALOPENBRACKET, &FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1337);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1339);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_multinomial1341);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_multinomial1343);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_multinomial1345);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1349);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multinomial1351);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultinomialEx; /* Prevent compiler warnings */
    rulemultinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multinomial */

/**
 * $ANTLR start dirichlet
 * /home/shriram/bugsparser/Parser/BUGS.g:240:1: dirichlet : DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA ;
 */
void
BUGSParser::dirichlet()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:241:2: ( DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA )
        // /home/shriram/bugsparser/Parser/BUGS.g:241:4: DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA
        {
             this->matchToken(DIRICHLETOPENBRACKET, &FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1363);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_dirichlet1365);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_dirichlet1367);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1369);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_dirichlet1371);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledirichletEx; /* Prevent compiler warnings */
    ruledirichletEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end dirichlet */

// $ANTLR start synpred1_BUGS
void BUGSParser::msynpred1_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:74:16: ( uvNode TILDE )
    // /home/shriram/bugsparser/Parser/BUGS.g:74:17: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred1_BUGS341);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred1_BUGS343);
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_BUGSEx; /* Prevent compiler warnings */
rulesynpred1_BUGSEx: ;

}
// $ANTLR end synpred1_BUGS

// $ANTLR start synpred2_BUGS
void BUGSParser::msynpred2_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:75:4: ( mvNode TILDE )
    // /home/shriram/bugsparser/Parser/BUGS.g:75:5: mvNode TILDE
    {
        this->followPush(FOLLOW_mvNode_in_synpred2_BUGS355);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred2_BUGS357);
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_BUGSEx; /* Prevent compiler warnings */
rulesynpred2_BUGSEx: ;

}
// $ANTLR end synpred2_BUGS

// $ANTLR start synpred3_BUGS
void BUGSParser::msynpred3_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:76:4: ( uvNode LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:76:5: uvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_uvNode_in_synpred3_BUGS368);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred3_BUGS370);
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_BUGSEx; /* Prevent compiler warnings */
rulesynpred3_BUGSEx: ;

}
// $ANTLR end synpred3_BUGS

// $ANTLR start synpred4_BUGS
void BUGSParser::msynpred4_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:77:4: ( mvNode LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:77:5: mvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_mvNode_in_synpred4_BUGS382);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred4_BUGS384);
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_BUGSEx; /* Prevent compiler warnings */
rulesynpred4_BUGSEx: ;

}
// $ANTLR end synpred4_BUGS

// $ANTLR start synpred5_BUGS
void BUGSParser::msynpred5_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:78:4: ( linkFunction LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:78:5: linkFunction LEFTPOINTER
    {
        this->followPush(FOLLOW_linkFunction_in_synpred5_BUGS396);
        linkFunction();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred5_BUGS398);
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_BUGSEx; /* Prevent compiler warnings */
rulesynpred5_BUGSEx: ;

}
// $ANTLR end synpred5_BUGS

// $ANTLR start synpred6_BUGS
void BUGSParser::msynpred6_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:84:4: ( uvNode )
    // /home/shriram/bugsparser/Parser/BUGS.g:84:5: uvNode
    {
        this->followPush(FOLLOW_uvNode_in_synpred6_BUGS433);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_BUGSEx; /* Prevent compiler warnings */
rulesynpred6_BUGSEx: ;

}
// $ANTLR end synpred6_BUGS

// $ANTLR start synpred7_BUGS
void BUGSParser::msynpred7_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:96:43: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt28;

        alt28=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt28=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt28=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 28 );
            ex->set_state( 0 );


            goto rulesynpred7_BUGSEx;

        }

        switch (alt28)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:96:44: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred7_BUGS503);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:96:51: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred7_BUGS505);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred7_BUGSEx; /* Prevent compiler warnings */
rulesynpred7_BUGSEx: ;

}
// $ANTLR end synpred7_BUGS

// $ANTLR start synpred8_BUGS
void BUGSParser::msynpred8_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:99:23: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt29;

        alt29=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt29=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt29=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 29 );
            ex->set_state( 0 );


            goto rulesynpred8_BUGSEx;

        }

        switch (alt29)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:99:24: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred8_BUGS537);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:99:31: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred8_BUGS539);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred8_BUGSEx; /* Prevent compiler warnings */
rulesynpred8_BUGSEx: ;

}
// $ANTLR end synpred8_BUGS

// $ANTLR start synpred9_BUGS
void BUGSParser::msynpred9_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:111:4: ( uvNode | linkFunction )

        ANTLR_UINT32 alt30;

        alt30=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt30=1;
        	}
            break;
        case CLOGLOGOPENBRACKET:
        case LOGITOPENBRACKET:
        case LOGOPENBRACKET:
        case PROBITOPENBRACKET:
        	{
        		alt30=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 30 );
            ex->set_state( 0 );


            goto rulesynpred9_BUGSEx;

        }

        switch (alt30)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:111:5: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred9_BUGS620);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:111:14: linkFunction
    	    {
    	        this->followPush(FOLLOW_linkFunction_in_synpred9_BUGS624);
    	        linkFunction();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred9_BUGSEx; /* Prevent compiler warnings */
rulesynpred9_BUGSEx: ;

}
// $ANTLR end synpred9_BUGS

// $ANTLR start synpred10_BUGS
void BUGSParser::msynpred10_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:149:4: ( OPENBRACKET expression COLON )
    // /home/shriram/bugsparser/Parser/BUGS.g:149:5: OPENBRACKET expression COLON
    {
         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_synpred10_BUGS886);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_expression_in_synpred10_BUGS888);
        expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COLON, &FOLLOW_COLON_in_synpred10_BUGS890);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_BUGSEx; /* Prevent compiler warnings */
rulesynpred10_BUGSEx: ;

}
// $ANTLR end synpred10_BUGS
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred5_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred1_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred9_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred7_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred2_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred8_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred3_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred10_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred6_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred4_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
