/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /home/shriram/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-06 22:00:33
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace BUGS {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   BUGSParserTokenNames[34+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ABSOPENBRACKET",
        (ANTLR_UINT8*) "BERNOULLIOPENBRACKET",
        (ANTLR_UINT8*) "BETAOPENBRACKET",
        (ANTLR_UINT8*) "CENSORBEGINWITHC",
        (ANTLR_UINT8*) "CENSORBEGINWITHI",
        (ANTLR_UINT8*) "CLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "CLOSEBRACE",
        (ANTLR_UINT8*) "CLOSEBRACKET",
        (ANTLR_UINT8*) "CLOSESQUAREBRACKET",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "CONSTANTINT",
        (ANTLR_UINT8*) "CONSTANTVALUE",
        (ANTLR_UINT8*) "DIRICHLETOPENBRACKET",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "FORSTART",
        (ANTLR_UINT8*) "IN",
        (ANTLR_UINT8*) "INVERSEOPENBRACKET",
        (ANTLR_UINT8*) "LEFTPOINTER",
        (ANTLR_UINT8*) "LOGITOPENBRACKET",
        (ANTLR_UINT8*) "LOGOPENBRACKET",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MODEL",
        (ANTLR_UINT8*) "MULT",
        (ANTLR_UINT8*) "MUTLTINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "NODENAME",
        (ANTLR_UINT8*) "OPENBRACE",
        (ANTLR_UINT8*) "OPENBRACKET",
        (ANTLR_UINT8*) "OPENSQUAREBRACKET",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "PROBITOPENBRACKET",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRUNCATIONBEGIN",
        (ANTLR_UINT8*) "WHITESPACE"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/home/shriram/bugsparser/Parser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void BUGSParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( BUGSParserTokenNames );


}

void
BUGSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
BUGSParser::~BUGSParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return BUGSParserTokenNames;
}





/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MODEL_in_prog323_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MODEL_in_prog323( FOLLOW_MODEL_in_prog323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_prog325_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_prog325( FOLLOW_OPENBRACE_in_prog325_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_prog327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_prog327( FOLLOW_statements_in_prog327_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_prog329_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_prog329( FOLLOW_CLOSEBRACE_in_prog329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements358_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements358( FOLLOW_stochasticNodeExpr_in_statements358_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements375_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements375( FOLLOW_stochasticNodeExpr_in_statements375_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements390_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements390( FOLLOW_logicalNodeExpr_in_statements390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements404_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements404( FOLLOW_logicalNodeExpr_in_statements404_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements418_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements418( FOLLOW_logicalNodeExpr_in_statements418_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_startFor_in_statements425_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_startFor_in_statements425( FOLLOW_startFor_in_statements425_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_statements427_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_statements427( FOLLOW_statements_in_statements427_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_endFor_in_statements429_bits[]	= { ANTLR_UINT64_LIT(0x0000000421880202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_endFor_in_statements429( FOLLOW_endFor_in_statements429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr458_bits[]	= { ANTLR_UINT64_LIT(0x0000001000000182) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr458( FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_censor_in_stochasticNodeExpr461_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_censor_in_stochasticNodeExpr461( FOLLOW_censor_in_stochasticNodeExpr461_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_truncation_in_stochasticNodeExpr465_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_truncation_in_stochasticNodeExpr465( FOLLOW_truncation_in_stochasticNodeExpr465_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr474( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_uvStochasticNodeExpr488_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_uvStochasticNodeExpr488( FOLLOW_uvNode_in_uvStochasticNodeExpr488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_uvStochasticNodeExpr492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_uvStochasticNodeExpr492( FOLLOW_TILDE_in_uvStochasticNodeExpr492_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvDistribution_in_uvStochasticNodeExpr494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvDistribution_in_uvStochasticNodeExpr494( FOLLOW_uvDistribution_in_uvStochasticNodeExpr494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvStochasticNodeExpr507_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvStochasticNodeExpr507( FOLLOW_mvNode_in_mvStochasticNodeExpr507_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr511_bits[]	= { ANTLR_UINT64_LIT(0x0000000010020000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr511( FOLLOW_TILDE_in_mvStochasticNodeExpr511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvDistribution_in_mvStochasticNodeExpr513_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvDistribution_in_mvStochasticNodeExpr513( FOLLOW_mvDistribution_in_mvStochasticNodeExpr513_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_censor526_bits[]	= { ANTLR_UINT64_LIT(0x0000000020014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_censor526( FOLLOW_set_in_censor526_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_censor541_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_censor541( FOLLOW_lowerWithOptionalUpper_in_censor541_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_censor546_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_censor546( FOLLOW_upperWithOptionalLower_in_censor546_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_censor551_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_censor551( FOLLOW_CLOSEBRACKET_in_censor551_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCATIONBEGIN_in_truncation563_bits[]	= { ANTLR_UINT64_LIT(0x0000000020014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCATIONBEGIN_in_truncation563( FOLLOW_TRUNCATIONBEGIN_in_truncation563_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_truncation576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_truncation576( FOLLOW_lowerWithOptionalUpper_in_truncation576_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_truncation580_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_truncation580( FOLLOW_upperWithOptionalLower_in_truncation580_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_truncation585_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_truncation585( FOLLOW_CLOSEBRACKET_in_truncation585_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper600( FOLLOW_uvNode_in_lowerWithOptionalUpper600_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper602_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper602( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper602_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lowerWithOptionalUpper605_bits[]	= { ANTLR_UINT64_LIT(0x0000000020010002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lowerWithOptionalUpper605( FOLLOW_COMMA_in_lowerWithOptionalUpper605_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper608( FOLLOW_uvNode_in_lowerWithOptionalUpper608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper610_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper610( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper610_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower627_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower627( FOLLOW_uvNode_in_upperWithOptionalLower627_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower629_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower629( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower629_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_upperWithOptionalLower633_bits[]	= { ANTLR_UINT64_LIT(0x0000000020010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_upperWithOptionalLower633( FOLLOW_COMMA_in_upperWithOptionalLower633_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower636( FOLLOW_uvNode_in_upperWithOptionalLower636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower638( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalNodeExpr662_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalNodeExpr662( FOLLOW_uvNode_in_logicalNodeExpr662_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_logicalNodeExpr666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_logicalNodeExpr666( FOLLOW_linkFunction_in_logicalNodeExpr666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr669_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr669( FOLLOW_LEFTPOINTER_in_logicalNodeExpr669_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr671_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr671( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_logicalNodeExpr677_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_logicalNodeExpr677( FOLLOW_mvNode_in_logicalNodeExpr677_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr679_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr679( FOLLOW_LEFTPOINTER_in_logicalNodeExpr679_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr681_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr681( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr681_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_linkFunction693_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_linkFunction693( FOLLOW_LOGOPENBRACKET_in_linkFunction693_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction695( FOLLOW_uvNode_in_linkFunction695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction697( FOLLOW_CLOSEBRACKET_in_linkFunction697_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_linkFunction703_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_linkFunction703( FOLLOW_LOGITOPENBRACKET_in_linkFunction703_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction705( FOLLOW_uvNode_in_linkFunction705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction707_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction707( FOLLOW_CLOSEBRACKET_in_linkFunction707_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction712_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction712( FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction712_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction714_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction714( FOLLOW_uvNode_in_linkFunction714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction716( FOLLOW_CLOSEBRACKET_in_linkFunction716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_linkFunction721_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_linkFunction721( FOLLOW_PROBITOPENBRACKET_in_linkFunction721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction723_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction723( FOLLOW_uvNode_in_linkFunction723_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction725_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction725( FOLLOW_CLOSEBRACKET_in_linkFunction725_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions738_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions738( FOLLOW_unaryExpression_in_exprWithNodesFunctions738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions742_bits[]	= { ANTLR_UINT64_LIT(0x0000000002000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions742( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions744_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions744( FOLLOW_MINUS_in_exprWithNodesFunctions744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions746_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions746( FOLLOW_unaryExpression_in_exprWithNodesFunctions746_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions749_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions749( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions749_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions753_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions753( FOLLOW_MINUS_in_exprWithNodesFunctions753_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions755_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions755( FOLLOW_unaryExpression_in_exprWithNodesFunctions755_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_exprWithNodesFunctions759_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_exprWithNodesFunctions759( FOLLOW_scalarFunctions_in_exprWithNodesFunctions759_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_exprWithNodesFunctions763_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_exprWithNodesFunctions763( FOLLOW_vectorFunctions_in_exprWithNodesFunctions763_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_exprWithNodesFunctions768_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_exprWithNodesFunctions768( FOLLOW_set_in_exprWithNodesFunctions768_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions778( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_uvNode792_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_uvNode792( FOLLOW_NODENAME_in_uvNode792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_uvNode795_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_uvNode795( FOLLOW_OPENSQUAREBRACKET_in_uvNode795_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode797_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode797( FOLLOW_expression_in_uvNode797_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uvNode800_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uvNode800( FOLLOW_COMMA_in_uvNode800_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode802( FOLLOW_expression_in_uvNode802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_uvNode807_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_uvNode807( FOLLOW_CLOSESQUAREBRACKET_in_uvNode807_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_mvNode820_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_mvNode820( FOLLOW_NODENAME_in_mvNode820_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_mvNode822_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_mvNode822( FOLLOW_OPENSQUAREBRACKET_in_mvNode822_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiIndices_in_mvNode824_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiIndices_in_mvNode824( FOLLOW_multiIndices_in_mvNode824_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_mvNode826_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_mvNode826( FOLLOW_CLOSESQUAREBRACKET_in_mvNode826_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_expression838_bits[]	= { ANTLR_UINT64_LIT(0x000000020A040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_expression838( FOLLOW_unaryExpression_in_expression838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_expression841_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_expression841( FOLLOW_set_in_expression841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression851_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression851( FOLLOW_expression_in_expression851_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression864_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression864( FOLLOW_CONSTANTINT_in_unaryExpression864_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression871_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression871( FOLLOW_CONSTANTVALUE_in_unaryExpression871_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_unaryExpression876_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_unaryExpression876( FOLLOW_uvNode_in_unaryExpression876_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_unaryExpression882_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_unaryExpression882( FOLLOW_OPENBRACKET_in_unaryExpression882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_unaryExpression884_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_unaryExpression884( FOLLOW_expression_in_unaryExpression884_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_unaryExpression886_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_unaryExpression886( FOLLOW_CLOSEBRACKET_in_unaryExpression886_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices898( FOLLOW_multiDimExpression_in_multiIndices898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multiIndices901_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multiIndices901( FOLLOW_COMMA_in_multiIndices901_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices903( FOLLOW_multiDimExpression_in_multiIndices903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_multiDimExpression927_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_multiDimExpression927( FOLLOW_OPENBRACKET_in_multiDimExpression927_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression929_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression929( FOLLOW_expression_in_multiDimExpression929_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression931_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression931( FOLLOW_COLON_in_multiDimExpression931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression933_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression933( FOLLOW_expression_in_multiDimExpression933_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multiDimExpression935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multiDimExpression935( FOLLOW_CLOSEBRACKET_in_multiDimExpression935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression940_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression940( FOLLOW_expression_in_multiDimExpression940_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression943_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression943( FOLLOW_COLON_in_multiDimExpression943_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression945_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression945( FOLLOW_expression_in_multiDimExpression945_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FORSTART_in_startFor959_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FORSTART_in_startFor959( FOLLOW_FORSTART_in_startFor959_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_startFor961_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_startFor961( FOLLOW_OPENBRACKET_in_startFor961_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopVariable_in_startFor963_bits[]	= { ANTLR_UINT64_LIT(0x0000000000100000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopVariable_in_startFor963( FOLLOW_loopVariable_in_startFor963_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_IN_in_startFor965_bits[]	= { ANTLR_UINT64_LIT(0x0000000020008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_IN_in_startFor965( FOLLOW_IN_in_startFor965_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopBegin_in_startFor967_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopBegin_in_startFor967( FOLLOW_loopBegin_in_startFor967_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_startFor969_bits[]	= { ANTLR_UINT64_LIT(0x0000000020008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_startFor969( FOLLOW_COLON_in_startFor969_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopEnd_in_startFor971_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopEnd_in_startFor971( FOLLOW_loopEnd_in_startFor971_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_startFor973_bits[]	= { ANTLR_UINT64_LIT(0x0000000040000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_startFor973( FOLLOW_CLOSEBRACKET_in_startFor973_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_startFor975_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_startFor975( FOLLOW_OPENBRACE_in_startFor975_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_endFor988_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_endFor988( FOLLOW_CLOSEBRACE_in_endFor988_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_loopVariable1000_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_loopVariable1000( FOLLOW_NODENAME_in_loopVariable1000_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopBegin1012_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopBegin1012( FOLLOW_uvNode_in_loopBegin1012_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopBegin1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopBegin1018( FOLLOW_CONSTANTINT_in_loopBegin1018_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopEnd1030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopEnd1030( FOLLOW_uvNode_in_loopEnd1030_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopEnd1036_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopEnd1036( FOLLOW_CONSTANTINT_in_loopEnd1036_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ABSOPENBRACKET_in_scalarFunctions1195_bits[]	= { ANTLR_UINT64_LIT(0x00000000A2218010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ABSOPENBRACKET_in_scalarFunctions1195( FOLLOW_ABSOPENBRACKET_in_scalarFunctions1195_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions1197_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions1197( FOLLOW_exprWithNodesFunctions_in_scalarFunctions1197_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions1199_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions1199( FOLLOW_CLOSEBRACKET_in_scalarFunctions1199_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1211_bits[]	= { ANTLR_UINT64_LIT(0x0000000020000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1211( FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1211_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions1213_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions1213( FOLLOW_mvNode_in_vectorFunctions1213_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions1215_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions1215( FOLLOW_CLOSEBRACKET_in_vectorFunctions1215_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteUnivariate_in_uvDistribution1231_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteUnivariate_in_uvDistribution1231( FOLLOW_discreteUnivariate_in_uvDistribution1231_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousUnivariate_in_uvDistribution1238_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousUnivariate_in_uvDistribution1238( FOLLOW_continuousUnivariate_in_uvDistribution1238_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteMultivariate_in_mvDistribution1250_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteMultivariate_in_mvDistribution1250( FOLLOW_discreteMultivariate_in_mvDistribution1250_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousMultivariate_in_mvDistribution1256_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousMultivariate_in_mvDistribution1256( FOLLOW_continuousMultivariate_in_mvDistribution1256_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_bernoulli_in_discreteUnivariate1271_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_bernoulli_in_discreteUnivariate1271( FOLLOW_bernoulli_in_discreteUnivariate1271_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_beta_in_continuousUnivariate1285_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_beta_in_continuousUnivariate1285( FOLLOW_beta_in_continuousUnivariate1285_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multinomial_in_discreteMultivariate1298_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multinomial_in_discreteMultivariate1298( FOLLOW_multinomial_in_discreteMultivariate1298_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_dirichlet_in_continuousMultivariate1310_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_dirichlet_in_continuousMultivariate1310( FOLLOW_dirichlet_in_continuousMultivariate1310_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_distributionParameter1323_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_distributionParameter1323( FOLLOW_uvNode_in_distributionParameter1323_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_distributionParameter1327_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_distributionParameter1327( FOLLOW_CONSTANTINT_in_distributionParameter1327_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_distributionParameter1331_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_distributionParameter1331( FOLLOW_CONSTANTVALUE_in_distributionParameter1331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1347_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1347( FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1347_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_bernoulli1349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_bernoulli1349( FOLLOW_distributionParameter_in_bernoulli1349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_bernoulli1351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_bernoulli1351( FOLLOW_CLOSEBRACKET_in_bernoulli1351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BETAOPENBRACKET_in_beta1365_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BETAOPENBRACKET_in_beta1365( FOLLOW_BETAOPENBRACKET_in_beta1365_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1367_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1367( FOLLOW_distributionParameter_in_beta1367_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_beta1369_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_beta1369( FOLLOW_COMMA_in_beta1369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1371( FOLLOW_distributionParameter_in_beta1371_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_beta1373_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_beta1373( FOLLOW_CLOSEBRACKET_in_beta1373_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1385_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1385( FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1387_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1387( FOLLOW_distributionParameter_in_multinomial1387_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_multinomial1389_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_multinomial1389( FOLLOW_OPENSQUAREBRACKET_in_multinomial1389_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_multinomial1391_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_multinomial1391( FOLLOW_CLOSESQUAREBRACKET_in_multinomial1391_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multinomial1393_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multinomial1393( FOLLOW_COMMA_in_multinomial1393_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1397( FOLLOW_distributionParameter_in_multinomial1397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multinomial1399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multinomial1399( FOLLOW_CLOSEBRACKET_in_multinomial1399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1411_bits[]	= { ANTLR_UINT64_LIT(0x0000000020018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1411( FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_dirichlet1413_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_dirichlet1413( FOLLOW_distributionParameter_in_dirichlet1413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_dirichlet1415_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_dirichlet1415( FOLLOW_OPENSQUAREBRACKET_in_dirichlet1415_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1417_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1417( FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1417_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_dirichlet1419_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_dirichlet1419( FOLLOW_COMMA_in_dirichlet1419_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred1_BUGS349_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred1_BUGS349( FOLLOW_uvNode_in_synpred1_BUGS349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred1_BUGS351_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred1_BUGS351( FOLLOW_TILDE_in_synpred1_BUGS351_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred2_BUGS366_bits[]	= { ANTLR_UINT64_LIT(0x0000000800000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred2_BUGS366( FOLLOW_mvNode_in_synpred2_BUGS366_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred2_BUGS368_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred2_BUGS368( FOLLOW_TILDE_in_synpred2_BUGS368_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred3_BUGS383_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred3_BUGS383( FOLLOW_uvNode_in_synpred3_BUGS383_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred3_BUGS385_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred3_BUGS385( FOLLOW_LEFTPOINTER_in_synpred3_BUGS385_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred4_BUGS397_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred4_BUGS397( FOLLOW_mvNode_in_synpred4_BUGS397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred4_BUGS399_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred4_BUGS399( FOLLOW_LEFTPOINTER_in_synpred4_BUGS399_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred5_BUGS411_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred5_BUGS411( FOLLOW_linkFunction_in_synpred5_BUGS411_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred5_BUGS413_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred5_BUGS413( FOLLOW_LEFTPOINTER_in_synpred5_BUGS413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred6_BUGS451_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred6_BUGS451( FOLLOW_uvNode_in_synpred6_BUGS451_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred7_BUGS535_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred7_BUGS535( FOLLOW_uvNode_in_synpred7_BUGS535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred7_BUGS537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred7_BUGS537( FOLLOW_CONSTANTVALUE_in_synpred7_BUGS537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred8_BUGS569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred8_BUGS569( FOLLOW_uvNode_in_synpred8_BUGS569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred8_BUGS571_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred8_BUGS571( FOLLOW_CONSTANTVALUE_in_synpred8_BUGS571_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred9_BUGS652_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred9_BUGS652( FOLLOW_uvNode_in_synpred9_BUGS652_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred9_BUGS656_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred9_BUGS656( FOLLOW_linkFunction_in_synpred9_BUGS656_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_synpred10_BUGS918_bits[]	= { ANTLR_UINT64_LIT(0x00000000A0018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_synpred10_BUGS918( FOLLOW_OPENBRACKET_in_synpred10_BUGS918_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_synpred10_BUGS920_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_synpred10_BUGS920( FOLLOW_expression_in_synpred10_BUGS920_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_synpred10_BUGS922_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_synpred10_BUGS922( FOLLOW_COLON_in_synpred10_BUGS922_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /home/shriram/bugsparser/Parser/BUGS.g:65:1: prog returns [Program program] : MODEL OPENBRACE statements CLOSEBRACE ;
 */
Program
BUGSParser::prog()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Program program;


    list<Node* > statements1;
    typedef	list<Node* > RETURN_TYPE_statements1;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:65:31: ( MODEL OPENBRACE statements CLOSEBRACE )
        // /home/shriram/bugsparser/Parser/BUGS.g:65:33: MODEL OPENBRACE statements CLOSEBRACE
        {
             this->matchToken(MODEL, &FOLLOW_MODEL_in_prog323);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_prog325);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            this->followPush(FOLLOW_statements_in_prog327);
            statements1=statements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_prog329);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            if ( this->get_backtracking()==0 )
            {
                program
                .nodes = statements1
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return program;
}
/* $ANTLR end prog */

/**
 * $ANTLR start statements
 * /home/shriram/bugsparser/Parser/BUGS.g:68:1: statements returns [list<Node* > nodes] : ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+ ;
 */
list<Node* >
BUGSParser::statements()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    list<Node* > nodes;


    StochasticNode* ste1;
    typedef	StochasticNode* RETURN_TYPE_ste1;

    StochasticNode* ste2;
    typedef	StochasticNode* RETURN_TYPE_ste2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:68:40: ( ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+ )
        // /home/shriram/bugsparser/Parser/BUGS.g:69:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:69:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=> logicalNodeExpr | ( mvNode LEFTPOINTER )=> logicalNodeExpr | ( linkFunction LEFTPOINTER )=> logicalNodeExpr | ( startFor statements endFor ) )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=7;
            	switch ( this->LA(1) )
            	{
            	case NODENAME:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_2 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_BUGS>() )))
            			    {
            			        alt1=1;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred2_BUGS>() )))
            			    {
            			        alt1=2;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_3 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_4 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case CLOGLOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_5 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case PROBITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_6 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case FORSTART:
            		{
            			alt1=6;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:69:3: ( uvNode TILDE )=>ste1= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements358);
            	            ste1=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(ste1
            	                );
            	            }


            	        }
            	        break;
            	    case 2:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:70:4: ( mvNode TILDE )=>ste2= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements375);
            	            ste2=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(ste2
            	                );
            	            }


            	        }
            	        break;
            	    case 3:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:71:4: ( uvNode LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements390);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	        }
            	        break;
            	    case 4:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:72:4: ( mvNode LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements404);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	        }
            	        break;
            	    case 5:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:73:4: ( linkFunction LEFTPOINTER )=> logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements418);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	        }
            	        break;
            	    case 6:
            	        // /home/shriram/bugsparser/Parser/BUGS.g:74:4: ( startFor statements endFor )
            	        {
            	            // /home/shriram/bugsparser/Parser/BUGS.g:74:4: ( startFor statements endFor )
            	            // /home/shriram/bugsparser/Parser/BUGS.g:74:5: startFor statements endFor
            	            {
            	                this->followPush(FOLLOW_startFor_in_statements425);
            	                startFor();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return nodes;
            	                }


            	                this->followPush(FOLLOW_statements_in_statements427);
            	                statements();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return nodes;
            	                }


            	                this->followPush(FOLLOW_endFor_in_statements429);
            	                endFor();

            	                this->followPop();
            	                if  (this->hasException())
            	                {
            	                    goto rulestatementsEx;
            	                }
            	                if (this->hasFailed())
            	                {
            	                    return nodes;
            	                }


            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return nodes;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< BUGSParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementsEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementsEx; /* Prevent compiler warnings */
    rulestatementsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return nodes;
}
/* $ANTLR end statements */

/**
 * $ANTLR start stochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:78:1: stochasticNodeExpr returns [StochasticNode* stochasticNode] : ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? | mvStochasticNodeExpr );
 */
StochasticNode*
BUGSParser::stochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNode* stochasticNode;


    UnivariateNode uvsne;
    typedef	UnivariateNode RETURN_TYPE_uvsne;

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:79:2: ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? | mvStochasticNodeExpr )

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA3_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred6_BUGS>() )))
            		    {
            		        alt3=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt3=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return stochasticNode;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 3 );
            		        ex->set_state( 1 );


            		        goto rulestochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return stochasticNode;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto rulestochasticNodeExprEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:79:4: ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )?
        	    {
        	        this->followPush(FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr458);
        	        uvsne=uvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNode;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:79:43: ( censor | truncation )?
        	        {
        	            int alt2=3;
        	            switch ( this->LA(1) )
        	            {
        	                case CENSORBEGINWITHC:
        	                case CENSORBEGINWITHI:
        	                	{
        	                		alt2=1;
        	                	}
        	                    break;
        	                case TRUNCATIONBEGIN:
        	                	{
        	                		alt2=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt2)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:79:44: censor
        	        	    {
        	        	        this->followPush(FOLLOW_censor_in_stochasticNodeExpr461);
        	        	        censor();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNode;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:79:53: truncation
        	        	    {
        	        	        this->followPush(FOLLOW_truncation_in_stochasticNodeExpr465);
        	        	        truncation();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNode;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNode= &
        	            uvsne
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:80:4: mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr474);
        	        mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNode;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestochasticNodeExprEx; /* Prevent compiler warnings */
    rulestochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stochasticNode;
}
/* $ANTLR end stochasticNodeExpr */

/**
 * $ANTLR start uvStochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:83:1: uvStochasticNodeExpr returns [UnivariateNode univariateNode] : uvNode TILDE uvDistribution ;
 */
UnivariateNode
BUGSParser::uvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateNode univariateNode;


    BUGSParser_uvNode_return uvNode2;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode2;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:84:2: ( uvNode TILDE uvDistribution )
        // /home/shriram/bugsparser/Parser/BUGS.g:84:3: uvNode TILDE uvDistribution
        {
            this->followPush(FOLLOW_uvNode_in_uvStochasticNodeExpr488);
            uvNode2=uvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                univariateNode
                .nodename = (this->get_strstream()->toStringTT(uvNode2.start, uvNode2.stop))
                ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_uvStochasticNodeExpr492);
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            this->followPush(FOLLOW_uvDistribution_in_uvStochasticNodeExpr494);
            uvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvStochasticNodeExprEx; /* Prevent compiler warnings */
    ruleuvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return univariateNode;
}
/* $ANTLR end uvStochasticNodeExpr */

/**
 * $ANTLR start mvStochasticNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:86:1: mvStochasticNodeExpr returns [MultivariateNode multivariateNode] : mvNode TILDE mvDistribution ;
 */
MultivariateNode
BUGSParser::mvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateNode multivariateNode;


    BUGSParser_mvNode_return mvNode3;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_mvNode3;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:87:2: ( mvNode TILDE mvDistribution )
        // /home/shriram/bugsparser/Parser/BUGS.g:87:3: mvNode TILDE mvDistribution
        {
            this->followPush(FOLLOW_mvNode_in_mvStochasticNodeExpr507);
            mvNode3=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                multivariateNode
                .nodename = (this->get_strstream()->toStringTT(mvNode3.start, mvNode3.stop))
                ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr511);
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


            this->followPush(FOLLOW_mvDistribution_in_mvStochasticNodeExpr513);
            mvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvStochasticNodeExprEx; /* Prevent compiler warnings */
    rulemvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return multivariateNode;
}
/* $ANTLR end mvStochasticNodeExpr */

/**
 * $ANTLR start censor
 * /home/shriram/bugsparser/Parser/BUGS.g:90:1: censor : ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::censor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:91:3: ( ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:91:5: ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
            if ( ((this->LA(1) >= CENSORBEGINWITHC) && (this->LA(1) <= CENSORBEGINWITHI)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulecensorEx;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:91:41: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA4_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 1 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA4_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 2 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulecensorEx;

                }

                switch (alt4)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:91:43: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_censor541);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:91:94: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_censor546);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_censor551);
            if  (this->hasException())
            {
                goto rulecensorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecensorEx; /* Prevent compiler warnings */
    rulecensorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end censor */

/**
 * $ANTLR start truncation
 * /home/shriram/bugsparser/Parser/BUGS.g:93:1: truncation : TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::truncation()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:94:2: ( TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:94:4: TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
             this->matchToken(TRUNCATIONBEGIN, &FOLLOW_TRUNCATIONBEGIN_in_truncation563);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:94:20: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA5_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 1 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA5_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 2 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto ruletruncationEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:94:23: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_truncation576);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:94:74: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_truncation580);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_truncation585);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletruncationEx; /* Prevent compiler warnings */
    ruletruncationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end truncation */

/**
 * $ANTLR start lowerWithOptionalUpper
 * /home/shriram/bugsparser/Parser/BUGS.g:97:1: lowerWithOptionalUpper : ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? ;
 */
void
BUGSParser::lowerWithOptionalUpper()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:98:2: ( ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:98:5: ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )?
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:98:5: ( uvNode | CONSTANTVALUE )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt6=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto rulelowerWithOptionalUpperEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:98:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper600);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:98:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper602);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_lowerWithOptionalUpper605);
            if  (this->hasException())
            {
                goto rulelowerWithOptionalUpperEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:98:34: ( uvNode | CONSTANTVALUE )?
            {
                int alt7=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt7=2;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:98:35: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper608);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:98:42: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper610);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelowerWithOptionalUpperEx; /* Prevent compiler warnings */
    rulelowerWithOptionalUpperEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end lowerWithOptionalUpper */

/**
 * $ANTLR start upperWithOptionalLower
 * /home/shriram/bugsparser/Parser/BUGS.g:101:1: upperWithOptionalLower : ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) ;
 */
void
BUGSParser::upperWithOptionalLower()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:102:2: ( ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) )
        // /home/shriram/bugsparser/Parser/BUGS.g:102:5: ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE )
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:102:5: ( uvNode | CONSTANTVALUE )?
            {
                int alt8=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt8=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt8=2;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:102:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower627);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:102:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower629);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_upperWithOptionalLower633);
            if  (this->hasException())
            {
                goto ruleupperWithOptionalLowerEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:102:35: ( uvNode | CONSTANTVALUE )
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt9=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt9=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleupperWithOptionalLowerEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:102:36: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower636);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:102:43: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower638);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleupperWithOptionalLowerEx; /* Prevent compiler warnings */
    ruleupperWithOptionalLowerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end upperWithOptionalLower */

/**
 * $ANTLR start logicalNodeExpr
 * /home/shriram/bugsparser/Parser/BUGS.g:105:1: logicalNodeExpr : ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions );
 */
void
BUGSParser::logicalNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:106:2: ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions )

            ANTLR_UINT32 alt11;

            alt11=2;

            {
                int LA11_0 = this->LA(1);
                if ( (LA11_0 == NODENAME))
                {
                    {
                        int LA11_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                        {
                            alt11=1;
                        }
                        else if ( (true))
                        {
                            alt11=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return ;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 11 );
                            ex->set_state( 1 );


                            goto rulelogicalNodeExprEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGITOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == CLOGLOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == PROBITOPENBRACKET))
                {
                    alt11=1;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto rulelogicalNodeExprEx;

                }
            }
            switch (alt11)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:106:4: ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions
        	    {
        	        // /home/shriram/bugsparser/Parser/BUGS.g:106:31: ( uvNode | linkFunction )
        	        {
        	            int alt10=2;
        	            switch ( this->LA(1) )
        	            {
        	            case NODENAME:
        	            	{
        	            		alt10=1;
        	            	}
        	                break;
        	            case CLOGLOGOPENBRACKET:
        	            case LOGITOPENBRACKET:
        	            case LOGOPENBRACKET:
        	            case PROBITOPENBRACKET:
        	            	{
        	            		alt10=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return ;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 10 );
        	                ex->set_state( 0 );


        	                goto rulelogicalNodeExprEx;

        	            }

        	            switch (alt10)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:106:32: uvNode
        	        	    {
        	        	        this->followPush(FOLLOW_uvNode_in_logicalNodeExpr662);
        	        	        uvNode();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:106:41: linkFunction
        	        	    {
        	        	        this->followPush(FOLLOW_linkFunction_in_logicalNodeExpr666);
        	        	        linkFunction();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr669);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr671);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:107:5: mvNode LEFTPOINTER exprWithNodesFunctions
        	    {
        	        this->followPush(FOLLOW_mvNode_in_logicalNodeExpr677);
        	        mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr679);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr681);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalNodeExprEx; /* Prevent compiler warnings */
    rulelogicalNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end logicalNodeExpr */

/**
 * $ANTLR start linkFunction
 * /home/shriram/bugsparser/Parser/BUGS.g:110:1: linkFunction : ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET );
 */
void
BUGSParser::linkFunction()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:111:2: ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET )

            ANTLR_UINT32 alt12;

            alt12=4;

            switch ( this->LA(1) )
            {
            case LOGOPENBRACKET:
            	{
            		alt12=1;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt12=2;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt12=3;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt12=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto rulelinkFunctionEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:111:4: LOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_linkFunction693);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction695);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction697);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:112:4: LOGITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_linkFunction703);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction705);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction707);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:113:4: CLOGLOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction712);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction714);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction716);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:114:4: PROBITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_linkFunction721);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction723);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction725);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelinkFunctionEx; /* Prevent compiler warnings */
    rulelinkFunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end linkFunction */

/**
 * $ANTLR start exprWithNodesFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:117:1: exprWithNodesFunctions : ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )? ;
 */
void
BUGSParser::exprWithNodesFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:118:2: ( ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:118:4: ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions ) ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )?
        {
            // /home/shriram/bugsparser/Parser/BUGS.g:118:4: ( unaryExpression | OPENBRACKET MINUS unaryExpression CLOSEBRACKET | MINUS unaryExpression | scalarFunctions | vectorFunctions )
            {
                int alt13=5;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                case NODENAME:
                	{
                		alt13=1;
                	}
                    break;
                case OPENBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case MINUS:
                			{
                				alt13=2;
                			}
                		    break;
                		case CONSTANTINT:
                		case CONSTANTVALUE:
                		case NODENAME:
                		case OPENBRACKET:
                			{
                				alt13=1;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 2 );


                		    goto ruleexprWithNodesFunctionsEx;

                		}

                	}
                    break;
                case MINUS:
                	{
                		alt13=3;
                	}
                    break;
                case ABSOPENBRACKET:
                	{
                		alt13=4;
                	}
                    break;
                case INVERSEOPENBRACKET:
                	{
                		alt13=5;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleexprWithNodesFunctionsEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:5: unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions738);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:23: OPENBRACKET MINUS unaryExpression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions742);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions744);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions746);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions749);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:73: MINUS unaryExpression
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions753);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions755);
            	        unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:97: scalarFunctions
            	    {
            	        this->followPush(FOLLOW_scalarFunctions_in_exprWithNodesFunctions759);
            	        scalarFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:115: vectorFunctions
            	    {
            	        this->followPush(FOLLOW_vectorFunctions_in_exprWithNodesFunctions763);
            	        vectorFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // /home/shriram/bugsparser/Parser/BUGS.g:118:133: ( ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions )?
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:118:134: ( PLUS | MINUS | MULT | DIV ) exprWithNodesFunctions
            	    {
            	        if ( this->LA(1) == DIV || this->LA(1) == MINUS || this->LA(1) == MULT || this->LA(1) == PLUS )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return ;
            	            }

            	            new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleexprWithNodesFunctionsEx;
            	        }


            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions778);
            	        exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprWithNodesFunctionsEx; /* Prevent compiler warnings */
    ruleexprWithNodesFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end exprWithNodesFunctions */

/**
 * $ANTLR start uvNode
 * /home/shriram/bugsparser/Parser/BUGS.g:121:1: uvNode : NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )? ;
 */
BUGSParser_uvNode_return
BUGSParser::uvNode()
{
    BUGSParser_uvNode_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:122:2: ( NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:122:4: NODENAME ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )?
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_uvNode792);
            if  (this->hasException())
            {
                goto ruleuvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:122:13: ( OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET )?
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                    case OPENSQUAREBRACKET:
                    	{
                    		switch ( this->LA(2) )
                    		{
                    		    case CONSTANTINT:
                    		    case CONSTANTVALUE:
                    		    case NODENAME:
                    		    case OPENBRACKET:
                    		    	{
                    		    		alt16=1;
                    		    	}
                    		        break;
                    		}

                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:122:14: OPENSQUAREBRACKET expression ( COMMA expression )* CLOSESQUAREBRACKET
            	    {
            	         this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_uvNode795);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_in_uvNode797);
            	        expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        // /home/shriram/bugsparser/Parser/BUGS.g:122:43: ( COMMA expression )*

            	        for (;;)
            	        {
            	            int alt15=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt15=1;
            	            	}
            	                break;

            	            }

            	            switch (alt15)
            	            {
            	        	case 1:
            	        	    // /home/shriram/bugsparser/Parser/BUGS.g:122:44: COMMA expression
            	        	    {
            	        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_uvNode800);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_expression_in_uvNode802);
            	        	        expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop15;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop15: ; /* Jump out to here if this rule does not match */


            	         this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_uvNode807);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvNodeEx; /* Prevent compiler warnings */
    ruleuvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end uvNode */

/**
 * $ANTLR start mvNode
 * /home/shriram/bugsparser/Parser/BUGS.g:124:1: mvNode : NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET ;
 */
BUGSParser_mvNode_return
BUGSParser::mvNode()
{
    BUGSParser_mvNode_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:125:2: ( NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:125:4: NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_mvNode820);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_mvNode822);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_multiIndices_in_mvNode824);
            multiIndices();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_mvNode826);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvNodeEx; /* Prevent compiler warnings */
    rulemvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end mvNode */

/**
 * $ANTLR start expression
 * /home/shriram/bugsparser/Parser/BUGS.g:128:1: expression : unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )? ;
 */
void
BUGSParser::expression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:129:2: ( unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )? )
        // /home/shriram/bugsparser/Parser/BUGS.g:129:4: unaryExpression ( ( PLUS | MINUS | MULT | DIV ) expression )?
        {
            this->followPush(FOLLOW_unaryExpression_in_expression838);
            unaryExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexpressionEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:129:20: ( ( PLUS | MINUS | MULT | DIV ) expression )?
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:129:21: ( PLUS | MINUS | MULT | DIV ) expression
            	    {
            	        if ( this->LA(1) == DIV || this->LA(1) == MINUS || this->LA(1) == MULT || this->LA(1) == PLUS )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return ;
            	            }

            	            new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleexpressionEx;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression851);
            	        expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end expression */

/**
 * $ANTLR start unaryExpression
 * /home/shriram/bugsparser/Parser/BUGS.g:132:1: unaryExpression : ( CONSTANTINT | CONSTANTVALUE | uvNode | OPENBRACKET expression CLOSEBRACKET );
 */
void
BUGSParser::unaryExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:133:2: ( CONSTANTINT | CONSTANTVALUE | uvNode | OPENBRACKET expression CLOSEBRACKET )

            ANTLR_UINT32 alt18;

            alt18=4;

            switch ( this->LA(1) )
            {
            case CONSTANTINT:
            	{
            		alt18=1;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt18=2;
            	}
                break;
            case NODENAME:
            	{
            		alt18=3;
            	}
                break;
            case OPENBRACKET:
            	{
            		alt18=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 18 );
                ex->set_state( 0 );


                goto ruleunaryExpressionEx;

            }

            switch (alt18)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:133:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression864);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:134:4: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression871);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:135:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_unaryExpression876);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:136:4: OPENBRACKET expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_unaryExpression882);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_unaryExpression884);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_unaryExpression886);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end unaryExpression */

/**
 * $ANTLR start multiIndices
 * /home/shriram/bugsparser/Parser/BUGS.g:139:1: multiIndices : multiDimExpression ( COMMA multiDimExpression )* ;
 */
void
BUGSParser::multiIndices()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:140:2: ( multiDimExpression ( COMMA multiDimExpression )* )
        // /home/shriram/bugsparser/Parser/BUGS.g:140:4: multiDimExpression ( COMMA multiDimExpression )*
        {
            this->followPush(FOLLOW_multiDimExpression_in_multiIndices898);
            multiDimExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiIndicesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /home/shriram/bugsparser/Parser/BUGS.g:140:23: ( COMMA multiDimExpression )*

            for (;;)
            {
                int alt19=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt19=1;
                	}
                    break;

                }

                switch (alt19)
                {
            	case 1:
            	    // /home/shriram/bugsparser/Parser/BUGS.g:140:24: COMMA multiDimExpression
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_multiIndices901);
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_multiDimExpression_in_multiIndices903);
            	        multiDimExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop19;	/* break out of the loop */
            	    break;
                }
            }
            loop19: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiIndicesEx; /* Prevent compiler warnings */
    rulemultiIndicesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiIndices */

/**
 * $ANTLR start multiDimExpression
 * /home/shriram/bugsparser/Parser/BUGS.g:143:1: multiDimExpression : ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? );
 */
void
BUGSParser::multiDimExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:144:2: ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? )

            ANTLR_UINT32 alt21;

            alt21=2;

            switch ( this->LA(1) )
            {
            case OPENBRACKET:
            	{
            		{
            		    int LA21_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
            		    {
            		        alt21=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt21=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 21 );
            		        ex->set_state( 1 );


            		        goto rulemultiDimExpressionEx;

            		    }
            		}
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case NODENAME:
            	{
            		alt21=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 21 );
                ex->set_state( 0 );


                goto rulemultiDimExpressionEx;

            }

            switch (alt21)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:144:4: ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_multiDimExpression927);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression929);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression931);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression933);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multiDimExpression935);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:145:4: expression ( COLON expression )?
        	    {
        	        this->followPush(FOLLOW_expression_in_multiDimExpression940);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // /home/shriram/bugsparser/Parser/BUGS.g:145:15: ( COLON expression )?
        	        {
        	            int alt20=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt20=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt20)
        	            {
        	        	case 1:
        	        	    // /home/shriram/bugsparser/Parser/BUGS.g:145:16: COLON expression
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression943);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_multiDimExpression945);
        	        	        expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemultiDimExpressionEx; /* Prevent compiler warnings */
    rulemultiDimExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiDimExpression */

/**
 * $ANTLR start startFor
 * /home/shriram/bugsparser/Parser/BUGS.g:148:1: startFor : FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE ;
 */
void
BUGSParser::startFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:149:2: ( FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE )
        // /home/shriram/bugsparser/Parser/BUGS.g:149:4: FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE
        {
             this->matchToken(FORSTART, &FOLLOW_FORSTART_in_startFor959);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_startFor961);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopVariable_in_startFor963);
            loopVariable();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(IN, &FOLLOW_IN_in_startFor965);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopBegin_in_startFor967);
            loopBegin();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COLON, &FOLLOW_COLON_in_startFor969);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_loopEnd_in_startFor971);
            loopEnd();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_startFor973);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_startFor975);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestartForEx; /* Prevent compiler warnings */
    rulestartForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end startFor */

/**
 * $ANTLR start endFor
 * /home/shriram/bugsparser/Parser/BUGS.g:152:1: endFor : CLOSEBRACE ;
 */
void
BUGSParser::endFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:153:2: ( CLOSEBRACE )
        // /home/shriram/bugsparser/Parser/BUGS.g:153:4: CLOSEBRACE
        {
             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_endFor988);
            if  (this->hasException())
            {
                goto ruleendForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendForEx; /* Prevent compiler warnings */
    ruleendForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end endFor */

/**
 * $ANTLR start loopVariable
 * /home/shriram/bugsparser/Parser/BUGS.g:156:1: loopVariable : NODENAME ;
 */
void
BUGSParser::loopVariable()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:157:2: ( NODENAME )
        // /home/shriram/bugsparser/Parser/BUGS.g:157:4: NODENAME
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_loopVariable1000);
            if  (this->hasException())
            {
                goto ruleloopVariableEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopVariableEx; /* Prevent compiler warnings */
    ruleloopVariableEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopVariable */

/**
 * $ANTLR start loopBegin
 * /home/shriram/bugsparser/Parser/BUGS.g:160:1: loopBegin : ( uvNode | CONSTANTINT );
 */
void
BUGSParser::loopBegin()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:161:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt22=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt22=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto ruleloopBeginEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:161:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopBegin1012);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:162:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopBegin1018);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopBeginEx; /* Prevent compiler warnings */
    ruleloopBeginEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopBegin */

/**
 * $ANTLR start loopEnd
 * /home/shriram/bugsparser/Parser/BUGS.g:165:1: loopEnd : ( uvNode | CONSTANTINT );
 */
void
BUGSParser::loopEnd()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:166:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt23;

            alt23=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt23=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt23=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleloopEndEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:166:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopEnd1030);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:167:4: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopEnd1036);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopEndEx; /* Prevent compiler warnings */
    ruleloopEndEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end loopEnd */

/**
 * $ANTLR start scalarFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:184:1: scalarFunctions : ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET ;
 */
void
BUGSParser::scalarFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:185:2: ( ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:185:4: ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET
        {
             this->matchToken(ABSOPENBRACKET, &FOLLOW_ABSOPENBRACKET_in_scalarFunctions1195);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions1197);
            exprWithNodesFunctions();

            this->followPop();
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions1199);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarFunctionsEx; /* Prevent compiler warnings */
    rulescalarFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end scalarFunctions */

/**
 * $ANTLR start vectorFunctions
 * /home/shriram/bugsparser/Parser/BUGS.g:188:1: vectorFunctions : INVERSEOPENBRACKET mvNode CLOSEBRACKET ;
 */
void
BUGSParser::vectorFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:189:2: ( INVERSEOPENBRACKET mvNode CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:189:4: INVERSEOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(INVERSEOPENBRACKET, &FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1211);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_mvNode_in_vectorFunctions1213);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions1215);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorFunctionsEx; /* Prevent compiler warnings */
    rulevectorFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end vectorFunctions */

/**
 * $ANTLR start uvDistribution
 * /home/shriram/bugsparser/Parser/BUGS.g:192:1: uvDistribution returns [UnivariateDistribution uvdis] : ( discreteUnivariate | continuousUnivariate );
 */
UnivariateDistribution
BUGSParser::uvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateDistribution uvdis;


    BUGSParser_discreteUnivariate_return discreteUnivariate4;
    typedef	BUGSParser_discreteUnivariate_return RETURN_TYPE_discreteUnivariate4;

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:193:2: ( discreteUnivariate | continuousUnivariate )

            ANTLR_UINT32 alt24;

            alt24=2;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            	{
            		alt24=1;
            	}
                break;
            case BETAOPENBRACKET:
            	{
            		alt24=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return uvdis;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleuvDistributionEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:193:4: discreteUnivariate
        	    {
        	        this->followPush(FOLLOW_discreteUnivariate_in_uvDistribution1231);
        	        discreteUnivariate4=discreteUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uvdis;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uvdis
        	            .name = discreteUnivariate4.name
        	            ; uvdis
        	            .parameters = discreteUnivariate4.parameters
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:194:4: continuousUnivariate
        	    {
        	        this->followPush(FOLLOW_continuousUnivariate_in_uvDistribution1238);
        	        continuousUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uvdis;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleuvDistributionEx; /* Prevent compiler warnings */
    ruleuvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uvdis;
}
/* $ANTLR end uvDistribution */

/**
 * $ANTLR start mvDistribution
 * /home/shriram/bugsparser/Parser/BUGS.g:197:1: mvDistribution : ( discreteMultivariate | continuousMultivariate );
 */
void
BUGSParser::mvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:198:2: ( discreteMultivariate | continuousMultivariate )

            ANTLR_UINT32 alt25;

            alt25=2;

            switch ( this->LA(1) )
            {
            case MUTLTINOMIALOPENBRACKET:
            	{
            		alt25=1;
            	}
                break;
            case DIRICHLETOPENBRACKET:
            	{
            		alt25=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto rulemvDistributionEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:198:4: discreteMultivariate
        	    {
        	        this->followPush(FOLLOW_discreteMultivariate_in_mvDistribution1250);
        	        discreteMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:199:4: continuousMultivariate
        	    {
        	        this->followPush(FOLLOW_continuousMultivariate_in_mvDistribution1256);
        	        continuousMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvDistributionEx; /* Prevent compiler warnings */
    rulemvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvDistribution */

/**
 * $ANTLR start discreteUnivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:202:1: discreteUnivariate returns [std::string name, std::list<string> parameters] : bernoulli ;
 */
BUGSParser_discreteUnivariate_return
BUGSParser::discreteUnivariate()
{
    BUGSParser_discreteUnivariate_return retval(this);


    std::list<string> bernoulli5;
    typedef	std::list<string> RETURN_TYPE_bernoulli5;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:203:2: ( bernoulli )
        // /home/shriram/bugsparser/Parser/BUGS.g:203:4: bernoulli
        {
            this->followPush(FOLLOW_bernoulli_in_discreteUnivariate1271);
            bernoulli5=bernoulli();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteUnivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="BERNOULLI";
                 retval.parameters=
                bernoulli5
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteUnivariateEx; /* Prevent compiler warnings */
    rulediscreteUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteUnivariate */

/**
 * $ANTLR start continuousUnivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:206:1: continuousUnivariate : beta ;
 */
void
BUGSParser::continuousUnivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:207:2: ( beta )
        // /home/shriram/bugsparser/Parser/BUGS.g:207:4: beta
        {
            this->followPush(FOLLOW_beta_in_continuousUnivariate1285);
            beta();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousUnivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousUnivariateEx; /* Prevent compiler warnings */
    rulecontinuousUnivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end continuousUnivariate */

/**
 * $ANTLR start discreteMultivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:210:1: discreteMultivariate : multinomial ;
 */
void
BUGSParser::discreteMultivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:211:2: ( multinomial )
        // /home/shriram/bugsparser/Parser/BUGS.g:211:4: multinomial
        {
            this->followPush(FOLLOW_multinomial_in_discreteMultivariate1298);
            multinomial();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteMultivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteMultivariateEx; /* Prevent compiler warnings */
    rulediscreteMultivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end discreteMultivariate */

/**
 * $ANTLR start continuousMultivariate
 * /home/shriram/bugsparser/Parser/BUGS.g:214:1: continuousMultivariate : dirichlet ;
 */
void
BUGSParser::continuousMultivariate()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:215:2: ( dirichlet )
        // /home/shriram/bugsparser/Parser/BUGS.g:215:4: dirichlet
        {
            this->followPush(FOLLOW_dirichlet_in_continuousMultivariate1310);
            dirichlet();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousMultivariateEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousMultivariateEx; /* Prevent compiler warnings */
    rulecontinuousMultivariateEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end continuousMultivariate */

/**
 * $ANTLR start distributionParameter
 * /home/shriram/bugsparser/Parser/BUGS.g:218:1: distributionParameter : ( uvNode | CONSTANTINT | CONSTANTVALUE );
 */
BUGSParser_distributionParameter_return
BUGSParser::distributionParameter()
{
    BUGSParser_distributionParameter_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /home/shriram/bugsparser/Parser/BUGS.g:219:2: ( uvNode | CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt26;

            alt26=3;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt26=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt26=2;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt26=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto ruledistributionParameterEx;

            }

            switch (alt26)
            {
        	case 1:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:219:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_distributionParameter1323);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:219:13: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_distributionParameter1327);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /home/shriram/bugsparser/Parser/BUGS.g:219:27: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_distributionParameter1331);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledistributionParameterEx; /* Prevent compiler warnings */
    ruledistributionParameterEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end distributionParameter */

/**
 * $ANTLR start bernoulli
 * /home/shriram/bugsparser/Parser/BUGS.g:222:1: bernoulli returns [std::list<string> parameters] : BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::bernoulli()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_distributionParameter_return distributionParameter6;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_distributionParameter6;

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:223:2: ( BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:223:4: BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(BERNOULLIOPENBRACKET, &FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1347);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_bernoulli1349);
            distributionParameter6=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_bernoulli1351);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(distributionParameter6.start, distributionParameter6.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebernoulliEx; /* Prevent compiler warnings */
    rulebernoulliEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end bernoulli */

/**
 * $ANTLR start beta
 * /home/shriram/bugsparser/Parser/BUGS.g:226:1: beta : BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET ;
 */
void
BUGSParser::beta()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:227:2: ( BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:227:4: BETAOPENBRACKET distributionParameter COMMA distributionParameter CLOSEBRACKET
        {
             this->matchToken(BETAOPENBRACKET, &FOLLOW_BETAOPENBRACKET_in_beta1365);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1367);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_beta1369);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1371);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_beta1373);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebetaEx; /* Prevent compiler warnings */
    rulebetaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end beta */

/**
 * $ANTLR start multinomial
 * /home/shriram/bugsparser/Parser/BUGS.g:230:1: multinomial : MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET ;
 */
void
BUGSParser::multinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:231:2: ( MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET )
        // /home/shriram/bugsparser/Parser/BUGS.g:231:4: MUTLTINOMIALOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA distributionParameter CLOSEBRACKET
        {
             this->matchToken(MUTLTINOMIALOPENBRACKET, &FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1385);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1387);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_multinomial1389);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_multinomial1391);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_multinomial1393);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1397);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multinomial1399);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultinomialEx; /* Prevent compiler warnings */
    rulemultinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multinomial */

/**
 * $ANTLR start dirichlet
 * /home/shriram/bugsparser/Parser/BUGS.g:235:1: dirichlet : DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA ;
 */
void
BUGSParser::dirichlet()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /home/shriram/bugsparser/Parser/BUGS.g:236:2: ( DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA )
        // /home/shriram/bugsparser/Parser/BUGS.g:236:4: DIRICHLETOPENBRACKET distributionParameter OPENSQUAREBRACKET CLOSESQUAREBRACKET COMMA
        {
             this->matchToken(DIRICHLETOPENBRACKET, &FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1411);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_distributionParameter_in_dirichlet1413);
            distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_dirichlet1415);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_dirichlet1417);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_dirichlet1419);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledirichletEx; /* Prevent compiler warnings */
    ruledirichletEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end dirichlet */

// $ANTLR start synpred1_BUGS
void BUGSParser::msynpred1_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:69:3: ( uvNode TILDE )
    // /home/shriram/bugsparser/Parser/BUGS.g:69:4: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred1_BUGS349);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred1_BUGS351);
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_BUGSEx; /* Prevent compiler warnings */
rulesynpred1_BUGSEx: ;

}
// $ANTLR end synpred1_BUGS

// $ANTLR start synpred2_BUGS
void BUGSParser::msynpred2_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:70:4: ( mvNode TILDE )
    // /home/shriram/bugsparser/Parser/BUGS.g:70:5: mvNode TILDE
    {
        this->followPush(FOLLOW_mvNode_in_synpred2_BUGS366);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred2_BUGS368);
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_BUGSEx; /* Prevent compiler warnings */
rulesynpred2_BUGSEx: ;

}
// $ANTLR end synpred2_BUGS

// $ANTLR start synpred3_BUGS
void BUGSParser::msynpred3_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:71:4: ( uvNode LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:71:5: uvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_uvNode_in_synpred3_BUGS383);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred3_BUGS385);
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_BUGSEx; /* Prevent compiler warnings */
rulesynpred3_BUGSEx: ;

}
// $ANTLR end synpred3_BUGS

// $ANTLR start synpred4_BUGS
void BUGSParser::msynpred4_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:72:4: ( mvNode LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:72:5: mvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_mvNode_in_synpred4_BUGS397);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred4_BUGS399);
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_BUGSEx; /* Prevent compiler warnings */
rulesynpred4_BUGSEx: ;

}
// $ANTLR end synpred4_BUGS

// $ANTLR start synpred5_BUGS
void BUGSParser::msynpred5_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:73:4: ( linkFunction LEFTPOINTER )
    // /home/shriram/bugsparser/Parser/BUGS.g:73:5: linkFunction LEFTPOINTER
    {
        this->followPush(FOLLOW_linkFunction_in_synpred5_BUGS411);
        linkFunction();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred5_BUGS413);
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_BUGSEx; /* Prevent compiler warnings */
rulesynpred5_BUGSEx: ;

}
// $ANTLR end synpred5_BUGS

// $ANTLR start synpred6_BUGS
void BUGSParser::msynpred6_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:79:4: ( uvNode )
    // /home/shriram/bugsparser/Parser/BUGS.g:79:5: uvNode
    {
        this->followPush(FOLLOW_uvNode_in_synpred6_BUGS451);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_BUGSEx; /* Prevent compiler warnings */
rulesynpred6_BUGSEx: ;

}
// $ANTLR end synpred6_BUGS

// $ANTLR start synpred7_BUGS
void BUGSParser::msynpred7_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:91:43: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt27;

        alt27=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt27=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt27=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 27 );
            ex->set_state( 0 );


            goto rulesynpred7_BUGSEx;

        }

        switch (alt27)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:91:44: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred7_BUGS535);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:91:51: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred7_BUGS537);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred7_BUGSEx; /* Prevent compiler warnings */
rulesynpred7_BUGSEx: ;

}
// $ANTLR end synpred7_BUGS

// $ANTLR start synpred8_BUGS
void BUGSParser::msynpred8_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:94:23: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt28;

        alt28=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt28=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt28=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 28 );
            ex->set_state( 0 );


            goto rulesynpred8_BUGSEx;

        }

        switch (alt28)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:94:24: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred8_BUGS569);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:94:31: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred8_BUGS571);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred8_BUGSEx; /* Prevent compiler warnings */
rulesynpred8_BUGSEx: ;

}
// $ANTLR end synpred8_BUGS

// $ANTLR start synpred9_BUGS
void BUGSParser::msynpred9_BUGS_fragment(  )
{
    {
        //  /home/shriram/bugsparser/Parser/BUGS.g:106:4: ( uvNode | linkFunction )

        ANTLR_UINT32 alt29;

        alt29=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt29=1;
        	}
            break;
        case CLOGLOGOPENBRACKET:
        case LOGITOPENBRACKET:
        case LOGOPENBRACKET:
        case PROBITOPENBRACKET:
        	{
        		alt29=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 29 );
            ex->set_state( 0 );


            goto rulesynpred9_BUGSEx;

        }

        switch (alt29)
        {
    	case 1:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:106:5: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred9_BUGS652);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /home/shriram/bugsparser/Parser/BUGS.g:106:14: linkFunction
    	    {
    	        this->followPush(FOLLOW_linkFunction_in_synpred9_BUGS656);
    	        linkFunction();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred9_BUGSEx; /* Prevent compiler warnings */
rulesynpred9_BUGSEx: ;

}
// $ANTLR end synpred9_BUGS

// $ANTLR start synpred10_BUGS
void BUGSParser::msynpred10_BUGS_fragment(  )
{
    // /home/shriram/bugsparser/Parser/BUGS.g:144:4: ( OPENBRACKET expression COLON )
    // /home/shriram/bugsparser/Parser/BUGS.g:144:5: OPENBRACKET expression COLON
    {
         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_synpred10_BUGS918);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_expression_in_synpred10_BUGS920);
        expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COLON, &FOLLOW_COLON_in_synpred10_BUGS922);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_BUGSEx; /* Prevent compiler warnings */
rulesynpred10_BUGSEx: ;

}
// $ANTLR end synpred10_BUGS
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred5_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred1_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred9_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred7_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred2_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred8_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred3_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred10_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred6_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred4_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
