/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /u/s/h/shrirams/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-11 16:45:38
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace BUGS {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   BUGSParserTokenNames[36+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ABSOPENBRACKET",
        (ANTLR_UINT8*) "BERNOULLIOPENBRACKET",
        (ANTLR_UINT8*) "BETAOPENBRACKET",
        (ANTLR_UINT8*) "CENSORBEGINWITHC",
        (ANTLR_UINT8*) "CENSORBEGINWITHI",
        (ANTLR_UINT8*) "CLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "CLOSEBRACE",
        (ANTLR_UINT8*) "CLOSEBRACKET",
        (ANTLR_UINT8*) "CLOSESQUAREBRACKET",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "CONSTANTINT",
        (ANTLR_UINT8*) "CONSTANTVALUE",
        (ANTLR_UINT8*) "DIRICHLETOPENBRACKET",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "DOT",
        (ANTLR_UINT8*) "EQUALTO",
        (ANTLR_UINT8*) "FORSTART",
        (ANTLR_UINT8*) "IN",
        (ANTLR_UINT8*) "INVERSEOPENBRACKET",
        (ANTLR_UINT8*) "LEFTPOINTER",
        (ANTLR_UINT8*) "LOGITOPENBRACKET",
        (ANTLR_UINT8*) "LOGOPENBRACKET",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MODEL",
        (ANTLR_UINT8*) "MULT",
        (ANTLR_UINT8*) "MUTLTINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "NODENAME",
        (ANTLR_UINT8*) "OPENBRACE",
        (ANTLR_UINT8*) "OPENBRACKET",
        (ANTLR_UINT8*) "OPENSQUAREBRACKET",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "PROBITOPENBRACKET",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRUNCATIONBEGIN",
        (ANTLR_UINT8*) "WHITESPACE"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/u/s/h/shrirams/bugsparser/Parser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void BUGSParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( BUGSParserTokenNames );


}

void
BUGSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
BUGSParser::~BUGSParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return BUGSParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MODEL_in_prog329_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MODEL_in_prog329( FOLLOW_MODEL_in_prog329_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_prog331_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_prog331( FOLLOW_OPENBRACE_in_prog331_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_prog333_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_prog333( FOLLOW_statements_in_prog333_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_prog335_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_prog335( FOLLOW_CLOSEBRACE_in_prog335_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements364_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements364( FOLLOW_stochasticNodeExpr_in_statements364_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements381_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements381( FOLLOW_stochasticNodeExpr_in_statements381_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements397_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements397( FOLLOW_logicalNodeExpr_in_statements397_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements413_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements413( FOLLOW_logicalNodeExpr_in_statements413_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements430_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements430( FOLLOW_logicalNodeExpr_in_statements430_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_startFor_in_statements438_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_startFor_in_statements438( FOLLOW_startFor_in_statements438_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_statements440_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_statements440( FOLLOW_statements_in_statements440_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_endFor_in_statements442_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_endFor_in_statements442( FOLLOW_endFor_in_statements442_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr467_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000182) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr467( FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr467_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_censor_in_stochasticNodeExpr470_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_censor_in_stochasticNodeExpr470( FOLLOW_censor_in_stochasticNodeExpr470_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_truncation_in_stochasticNodeExpr474_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_truncation_in_stochasticNodeExpr474( FOLLOW_truncation_in_stochasticNodeExpr474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr485_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr485( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_uvStochasticNodeExpr499_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_uvStochasticNodeExpr499( FOLLOW_uvNode_in_uvStochasticNodeExpr499_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_uvStochasticNodeExpr505_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_uvStochasticNodeExpr505( FOLLOW_TILDE_in_uvStochasticNodeExpr505_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvDistribution_in_uvStochasticNodeExpr509_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvDistribution_in_uvStochasticNodeExpr509( FOLLOW_uvDistribution_in_uvStochasticNodeExpr509_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvStochasticNodeExpr520_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvStochasticNodeExpr520( FOLLOW_mvNode_in_mvStochasticNodeExpr520_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr522_bits[]	= { ANTLR_UINT64_LIT(0x0000000040020000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr522( FOLLOW_TILDE_in_mvStochasticNodeExpr522_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvDistribution_in_mvStochasticNodeExpr524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvDistribution_in_mvStochasticNodeExpr524( FOLLOW_mvDistribution_in_mvStochasticNodeExpr524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_censor538_bits[]	= { ANTLR_UINT64_LIT(0x0000000080014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_censor538( FOLLOW_set_in_censor538_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_censor553_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_censor553( FOLLOW_lowerWithOptionalUpper_in_censor553_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_censor558_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_censor558( FOLLOW_upperWithOptionalLower_in_censor558_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_censor563_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_censor563( FOLLOW_CLOSEBRACKET_in_censor563_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCATIONBEGIN_in_truncation575_bits[]	= { ANTLR_UINT64_LIT(0x0000000080014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCATIONBEGIN_in_truncation575( FOLLOW_TRUNCATIONBEGIN_in_truncation575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_truncation588_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_truncation588( FOLLOW_lowerWithOptionalUpper_in_truncation588_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_truncation592_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_truncation592( FOLLOW_upperWithOptionalLower_in_truncation592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_truncation597_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_truncation597( FOLLOW_CLOSEBRACKET_in_truncation597_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper612( FOLLOW_uvNode_in_lowerWithOptionalUpper612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper614( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lowerWithOptionalUpper617_bits[]	= { ANTLR_UINT64_LIT(0x0000000080010002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lowerWithOptionalUpper617( FOLLOW_COMMA_in_lowerWithOptionalUpper617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper620_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper620( FOLLOW_uvNode_in_lowerWithOptionalUpper620_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper622_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper622( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper622_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower639_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower639( FOLLOW_uvNode_in_upperWithOptionalLower639_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower641_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower641( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower641_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_upperWithOptionalLower645_bits[]	= { ANTLR_UINT64_LIT(0x0000000080010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_upperWithOptionalLower645( FOLLOW_COMMA_in_upperWithOptionalLower645_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower648( FOLLOW_uvNode_in_upperWithOptionalLower648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower650_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower650( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower650_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalNodeExpr676_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalNodeExpr676( FOLLOW_uvNode_in_logicalNodeExpr676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_logicalNodeExpr680_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_logicalNodeExpr680( FOLLOW_linkFunction_in_logicalNodeExpr680_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr686_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr686( FOLLOW_LEFTPOINTER_in_logicalNodeExpr686_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr688_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr688( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr688_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_logicalNodeExpr694_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_logicalNodeExpr694( FOLLOW_mvNode_in_logicalNodeExpr694_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr696_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr696( FOLLOW_LEFTPOINTER_in_logicalNodeExpr696_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr698_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr698( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr698_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_linkFunction711_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_linkFunction711( FOLLOW_LOGOPENBRACKET_in_linkFunction711_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction713_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction713( FOLLOW_uvNode_in_linkFunction713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction715_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction715( FOLLOW_CLOSEBRACKET_in_linkFunction715_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_linkFunction722_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_linkFunction722( FOLLOW_LOGITOPENBRACKET_in_linkFunction722_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction724_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction724( FOLLOW_uvNode_in_linkFunction724_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction726_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction726( FOLLOW_CLOSEBRACKET_in_linkFunction726_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction732_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction732( FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction732_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction734_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction734( FOLLOW_uvNode_in_linkFunction734_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction736_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction736( FOLLOW_CLOSEBRACKET_in_linkFunction736_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_linkFunction742_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_linkFunction742( FOLLOW_PROBITOPENBRACKET_in_linkFunction742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction744_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction744( FOLLOW_uvNode_in_linkFunction744_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction746_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction746( FOLLOW_CLOSEBRACKET_in_linkFunction746_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions761_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions761( FOLLOW_unaryExpression_in_exprWithNodesFunctions761_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_exprWithNodesFunctions766_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_exprWithNodesFunctions766( FOLLOW_uvNode_in_exprWithNodesFunctions766_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions772_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions772( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions774( FOLLOW_MINUS_in_exprWithNodesFunctions774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions778_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions778( FOLLOW_unaryExpression_in_exprWithNodesFunctions778_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions781_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions781( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions781_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_exprWithNodesFunctions787_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_exprWithNodesFunctions787( FOLLOW_scalarFunctions_in_exprWithNodesFunctions787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_exprWithNodesFunctions792_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_exprWithNodesFunctions792( FOLLOW_vectorFunctions_in_exprWithNodesFunctions792_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions798_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions798( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions802_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions802( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions802_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions804_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions804( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions804_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_exprWithNodesFunctions809_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_exprWithNodesFunctions809( FOLLOW_set_in_exprWithNodesFunctions809_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions825_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions825( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_uvNode842_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_uvNode842( FOLLOW_NODENAME_in_uvNode842_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_uvNode850_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_uvNode850( FOLLOW_OPENSQUAREBRACKET_in_uvNode850_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode854_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode854( FOLLOW_expression_in_uvNode854_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uvNode863_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uvNode863( FOLLOW_COMMA_in_uvNode863_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode867_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode867( FOLLOW_expression_in_uvNode867_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_uvNode878_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_uvNode878( FOLLOW_CLOSESQUAREBRACKET_in_uvNode878_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_mvNode894_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_mvNode894( FOLLOW_NODENAME_in_mvNode894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_mvNode896_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_mvNode896( FOLLOW_OPENSQUAREBRACKET_in_mvNode896_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiIndices_in_mvNode898_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiIndices_in_mvNode898( FOLLOW_multiIndices_in_mvNode898_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_mvNode900_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_mvNode900( FOLLOW_CLOSESQUAREBRACKET_in_mvNode900_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_expression916_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_expression916( FOLLOW_unaryExpression_in_expression916_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_expression924_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_expression924( FOLLOW_uvNode_in_expression924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_expression931_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_expression931( FOLLOW_OPENBRACKET_in_expression931_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression935_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression935( FOLLOW_expression_in_expression935_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_expression937_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_expression937( FOLLOW_CLOSEBRACKET_in_expression937_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_expression944_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PLUS_in_expression944( FOLLOW_PLUS_in_expression944_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression948_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression948( FOLLOW_expression_in_expression948_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expression954_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_expression954( FOLLOW_MINUS_in_expression954_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression958_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression958( FOLLOW_expression_in_expression958_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MULT_in_expression964_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MULT_in_expression964( FOLLOW_MULT_in_expression964_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression968_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression968( FOLLOW_expression_in_expression968_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_expression974_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIV_in_expression974( FOLLOW_DIV_in_expression974_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression978_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression978( FOLLOW_expression_in_expression978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression997_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression997( FOLLOW_CONSTANTINT_in_unaryExpression997_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression1005_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression1005( FOLLOW_CONSTANTVALUE_in_unaryExpression1005_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1018_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1018( FOLLOW_multiDimExpression_in_multiIndices1018_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multiIndices1021_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multiIndices1021( FOLLOW_COMMA_in_multiIndices1021_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1023_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1023( FOLLOW_multiDimExpression_in_multiIndices1023_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_multiDimExpression1047_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_multiDimExpression1047( FOLLOW_OPENBRACKET_in_multiDimExpression1047_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1049_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1049( FOLLOW_expression_in_multiDimExpression1049_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1051_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1051( FOLLOW_COLON_in_multiDimExpression1051_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1053_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1053( FOLLOW_expression_in_multiDimExpression1053_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multiDimExpression1055_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multiDimExpression1055( FOLLOW_CLOSEBRACKET_in_multiDimExpression1055_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1060( FOLLOW_expression_in_multiDimExpression1060_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1063_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1063( FOLLOW_COLON_in_multiDimExpression1063_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1065_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1065( FOLLOW_expression_in_multiDimExpression1065_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FORSTART_in_startFor1082_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FORSTART_in_startFor1082( FOLLOW_FORSTART_in_startFor1082_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_startFor1084_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_startFor1084( FOLLOW_OPENBRACKET_in_startFor1084_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopVariable_in_startFor1086_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopVariable_in_startFor1086( FOLLOW_loopVariable_in_startFor1086_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_IN_in_startFor1088_bits[]	= { ANTLR_UINT64_LIT(0x0000000080008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_IN_in_startFor1088( FOLLOW_IN_in_startFor1088_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopBegin_in_startFor1090_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopBegin_in_startFor1090( FOLLOW_loopBegin_in_startFor1090_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_startFor1092_bits[]	= { ANTLR_UINT64_LIT(0x0000000080008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_startFor1092( FOLLOW_COLON_in_startFor1092_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopEnd_in_startFor1094_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopEnd_in_startFor1094( FOLLOW_loopEnd_in_startFor1094_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_startFor1096_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_startFor1096( FOLLOW_CLOSEBRACKET_in_startFor1096_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_startFor1098_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_startFor1098( FOLLOW_OPENBRACE_in_startFor1098_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_endFor1114_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_endFor1114( FOLLOW_CLOSEBRACE_in_endFor1114_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_loopVariable1126_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_loopVariable1126( FOLLOW_NODENAME_in_loopVariable1126_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopBegin1142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopBegin1142( FOLLOW_uvNode_in_loopBegin1142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopBegin1147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopBegin1147( FOLLOW_CONSTANTINT_in_loopBegin1147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopEnd1164_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopEnd1164( FOLLOW_uvNode_in_loopEnd1164_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopEnd1171_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopEnd1171( FOLLOW_CONSTANTINT_in_loopEnd1171_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ABSOPENBRACKET_in_scalarFunctions1374_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ABSOPENBRACKET_in_scalarFunctions1374( FOLLOW_ABSOPENBRACKET_in_scalarFunctions1374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions1376_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions1376( FOLLOW_exprWithNodesFunctions_in_scalarFunctions1376_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions1378_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions1378( FOLLOW_CLOSEBRACKET_in_scalarFunctions1378_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1390_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1390( FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions1392_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions1392( FOLLOW_mvNode_in_vectorFunctions1392_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions1394_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions1394( FOLLOW_CLOSEBRACKET_in_vectorFunctions1394_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteUnivariate_in_uvDistribution1407_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteUnivariate_in_uvDistribution1407( FOLLOW_discreteUnivariate_in_uvDistribution1407_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousUnivariate_in_uvDistribution1412_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousUnivariate_in_uvDistribution1412( FOLLOW_continuousUnivariate_in_uvDistribution1412_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteMultivariate_in_mvDistribution1423_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteMultivariate_in_mvDistribution1423( FOLLOW_discreteMultivariate_in_mvDistribution1423_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousMultivariate_in_mvDistribution1429_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousMultivariate_in_mvDistribution1429( FOLLOW_continuousMultivariate_in_mvDistribution1429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_bernoulli_in_discreteUnivariate1445_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_bernoulli_in_discreteUnivariate1445( FOLLOW_bernoulli_in_discreteUnivariate1445_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_beta_in_continuousUnivariate1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_beta_in_continuousUnivariate1462( FOLLOW_beta_in_continuousUnivariate1462_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multinomial_in_discreteMultivariate1479_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multinomial_in_discreteMultivariate1479( FOLLOW_multinomial_in_discreteMultivariate1479_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_dirichlet_in_continuousMultivariate1497_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_dirichlet_in_continuousMultivariate1497( FOLLOW_dirichlet_in_continuousMultivariate1497_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_distributionParameter1511_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_distributionParameter1511( FOLLOW_uvNode_in_distributionParameter1511_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_distributionParameter1515_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_distributionParameter1515( FOLLOW_CONSTANTINT_in_distributionParameter1515_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_distributionParameter1519_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_distributionParameter1519( FOLLOW_CONSTANTVALUE_in_distributionParameter1519_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1535_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1535( FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1535_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_bernoulli1537_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_bernoulli1537( FOLLOW_distributionParameter_in_bernoulli1537_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_bernoulli1539_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_bernoulli1539( FOLLOW_CLOSEBRACKET_in_bernoulli1539_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BETAOPENBRACKET_in_beta1556_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BETAOPENBRACKET_in_beta1556( FOLLOW_BETAOPENBRACKET_in_beta1556_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1560_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1560( FOLLOW_distributionParameter_in_beta1560_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_beta1563_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_beta1563( FOLLOW_COMMA_in_beta1563_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1567_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1567( FOLLOW_distributionParameter_in_beta1567_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_beta1569_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_beta1569( FOLLOW_CLOSEBRACKET_in_beta1569_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1586_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1586( FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1586_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_multinomial1590_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_multinomial1590( FOLLOW_mvNode_in_multinomial1590_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multinomial1592_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multinomial1592( FOLLOW_COMMA_in_multinomial1592_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1598_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1598( FOLLOW_distributionParameter_in_multinomial1598_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multinomial1600_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multinomial1600( FOLLOW_CLOSEBRACKET_in_multinomial1600_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1617_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1617( FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1617_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_dirichlet1619_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_dirichlet1619( FOLLOW_mvNode_in_dirichlet1619_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_dirichlet1621_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_dirichlet1621( FOLLOW_CLOSEBRACKET_in_dirichlet1621_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred1_BUGS355_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred1_BUGS355( FOLLOW_uvNode_in_synpred1_BUGS355_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred1_BUGS357_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred1_BUGS357( FOLLOW_TILDE_in_synpred1_BUGS357_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred2_BUGS372_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred2_BUGS372( FOLLOW_mvNode_in_synpred2_BUGS372_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred2_BUGS374_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred2_BUGS374( FOLLOW_TILDE_in_synpred2_BUGS374_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred3_BUGS388_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred3_BUGS388( FOLLOW_uvNode_in_synpred3_BUGS388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred3_BUGS390_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred3_BUGS390( FOLLOW_LEFTPOINTER_in_synpred3_BUGS390_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred4_BUGS404_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred4_BUGS404( FOLLOW_mvNode_in_synpred4_BUGS404_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred4_BUGS406_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred4_BUGS406( FOLLOW_LEFTPOINTER_in_synpred4_BUGS406_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred5_BUGS420_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred5_BUGS420( FOLLOW_linkFunction_in_synpred5_BUGS420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred5_BUGS422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred5_BUGS422( FOLLOW_LEFTPOINTER_in_synpred5_BUGS422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred6_BUGS460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred6_BUGS460( FOLLOW_uvNode_in_synpred6_BUGS460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred7_BUGS547_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred7_BUGS547( FOLLOW_uvNode_in_synpred7_BUGS547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred7_BUGS549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred7_BUGS549( FOLLOW_CONSTANTVALUE_in_synpred7_BUGS549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred8_BUGS581_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred8_BUGS581( FOLLOW_uvNode_in_synpred8_BUGS581_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred8_BUGS583_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred8_BUGS583( FOLLOW_CONSTANTVALUE_in_synpred8_BUGS583_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred9_BUGS664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred9_BUGS664( FOLLOW_uvNode_in_synpred9_BUGS664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred9_BUGS668_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred9_BUGS668( FOLLOW_linkFunction_in_synpred9_BUGS668_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_synpred10_BUGS1038_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_synpred10_BUGS1038( FOLLOW_OPENBRACKET_in_synpred10_BUGS1038_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_synpred10_BUGS1040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_synpred10_BUGS1040( FOLLOW_expression_in_synpred10_BUGS1040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_synpred10_BUGS1042_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_synpred10_BUGS1042( FOLLOW_COLON_in_synpred10_BUGS1042_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:67:1: prog returns [Program program] : MODEL OPENBRACE statements CLOSEBRACE ;
 */
Program
BUGSParser::prog()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Program program;


    list<IStatement* > statements1;
    typedef	list<IStatement* > RETURN_TYPE_statements1;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:68:2: ( MODEL OPENBRACE statements CLOSEBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:68:4: MODEL OPENBRACE statements CLOSEBRACE
        {
             this->matchToken(MODEL, &FOLLOW_MODEL_in_prog329);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_prog331);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            this->followPush(FOLLOW_statements_in_prog333);
            statements1=statements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_prog335);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            if ( this->get_backtracking()==0 )
            {
                program
                .statements = statements1
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return program;
}
/* $ANTLR end prog */

/**
 * $ANTLR start statements
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:71:1: statements returns [list<IStatement* > stat] : ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor statements endFor )+ ;
 */
list<IStatement* >
BUGSParser::statements()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    list<IStatement* > stat;


    StochasticNodeStatement* ste1;
    typedef	StochasticNodeStatement* RETURN_TYPE_ste1;

    StochasticNodeStatement* ste2;
    typedef	StochasticNodeStatement* RETURN_TYPE_ste2;

    BUGSParser_startFor_return sf;
    typedef	BUGSParser_startFor_return RETURN_TYPE_sf;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:71:45: ( ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor statements endFor )+ )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:72:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor statements endFor )+
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:72:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr |sf= startFor statements endFor )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=7;
            	switch ( this->LA(1) )
            	{
            	case NODENAME:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_2 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_BUGS>() )))
            			    {
            			        alt1=1;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred2_BUGS>() )))
            			    {
            			        alt1=2;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_3 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_4 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case CLOGLOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_5 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case PROBITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_6 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case FORSTART:
            		{
            			alt1=6;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:72:3: ( uvNode TILDE )=>ste1= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements364);
            	            ste1=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                stat
            	                .push_back(ste1
            	                );
            	            }


            	        }
            	        break;
            	    case 2:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:73:4: ( mvNode TILDE )=>ste2= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements381);
            	            ste2=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	        }
            	        break;
            	    case 3:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:74:4: ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements397);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	        }
            	        break;
            	    case 4:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:75:4: ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements413);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	        }
            	        break;
            	    case 5:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:76:4: ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements430);
            	            logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	        }
            	        break;
            	    case 6:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:77:4: sf= startFor statements endFor
            	        {
            	            this->followPush(FOLLOW_startFor_in_statements438);
            	            sf=startFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            this->followPush(FOLLOW_statements_in_statements440);
            	            statements();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	            this->followPush(FOLLOW_endFor_in_statements442);
            	            endFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return stat;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return stat;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< BUGSParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementsEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementsEx; /* Prevent compiler warnings */
    rulestatementsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stat;
}
/* $ANTLR end statements */

/**
 * $ANTLR start stochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:80:1: stochasticNodeExpr returns [StochasticNodeStatement* stochasticNodeStatement = new StochasticNodeStatement()] : ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr );
 */
StochasticNodeStatement*
BUGSParser::stochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNodeStatement* stochasticNodeStatement;


    UnivariateNode* uvsne;
    typedef	UnivariateNode* RETURN_TYPE_uvsne;

    /* Initialize rule variables
     */
    stochasticNodeStatement =  new StochasticNodeStatement();



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:2: ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr )

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA3_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred6_BUGS>() )))
            		    {
            		        alt3=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt3=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return stochasticNodeStatement;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 3 );
            		        ex->set_state( 1 );


            		        goto rulestochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return stochasticNodeStatement;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto rulestochasticNodeExprEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:4: ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )?
        	    {
        	        this->followPush(FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr467);
        	        uvsne=uvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNodeStatement;
        	        }


        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:43: ( censor | truncation )?
        	        {
        	            int alt2=3;
        	            switch ( this->LA(1) )
        	            {
        	                case CENSORBEGINWITHC:
        	                case CENSORBEGINWITHI:
        	                	{
        	                		alt2=1;
        	                	}
        	                    break;
        	                case TRUNCATIONBEGIN:
        	                	{
        	                		alt2=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt2)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:44: censor
        	        	    {
        	        	        this->followPush(FOLLOW_censor_in_stochasticNodeExpr470);
        	        	        censor();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNodeStatement;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:53: truncation
        	        	    {
        	        	        this->followPush(FOLLOW_truncation_in_stochasticNodeExpr474);
        	        	        truncation();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNodeStatement;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNodeStatement
        	            ->node = uvsne
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:82:4: mvsne= mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr485);
        	        mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNodeStatement;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestochasticNodeExprEx; /* Prevent compiler warnings */
    rulestochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stochasticNodeStatement;
}
/* $ANTLR end stochasticNodeExpr */

/**
 * $ANTLR start uvStochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:85:1: uvStochasticNodeExpr returns [UnivariateNode* univariateNode = new UnivariateNode()] : uvNode TILDE uvDistribution ;
 */
UnivariateNode*
BUGSParser::uvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateNode* univariateNode;


    BUGSParser_uvNode_return uvNode2;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode2;

    /* Initialize rule variables
     */
    univariateNode =  new UnivariateNode();



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:86:2: ( uvNode TILDE uvDistribution )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:86:3: uvNode TILDE uvDistribution
        {
            this->followPush(FOLLOW_uvNode_in_uvStochasticNodeExpr499);
            uvNode2=uvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                univariateNode
                ->nodeid = uvNode2.nodeid
                ; univariateNode
                ->indices = uvNode2.indices
                ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_uvStochasticNodeExpr505);
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            this->followPush(FOLLOW_uvDistribution_in_uvStochasticNodeExpr509);
            uvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvStochasticNodeExprEx; /* Prevent compiler warnings */
    ruleuvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return univariateNode;
}
/* $ANTLR end uvStochasticNodeExpr */

/**
 * $ANTLR start mvStochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:90:1: mvStochasticNodeExpr : mvNode TILDE mvDistribution ;
 */
void
BUGSParser::mvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:91:2: ( mvNode TILDE mvDistribution )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:91:3: mvNode TILDE mvDistribution
        {
            this->followPush(FOLLOW_mvNode_in_mvStochasticNodeExpr520);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr522);
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_mvDistribution_in_mvStochasticNodeExpr524);
            mvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvStochasticNodeExprEx; /* Prevent compiler warnings */
    rulemvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvStochasticNodeExpr */

/**
 * $ANTLR start censor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:94:1: censor : ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::censor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:3: ( ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:5: ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
            if ( ((this->LA(1) >= CENSORBEGINWITHC) && (this->LA(1) <= CENSORBEGINWITHI)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulecensorEx;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:41: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA4_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 1 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA4_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 2 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulecensorEx;

                }

                switch (alt4)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:43: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_censor553);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:94: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_censor558);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_censor563);
            if  (this->hasException())
            {
                goto rulecensorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecensorEx; /* Prevent compiler warnings */
    rulecensorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end censor */

/**
 * $ANTLR start truncation
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:97:1: truncation : TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::truncation()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:2: ( TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:4: TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
             this->matchToken(TRUNCATIONBEGIN, &FOLLOW_TRUNCATIONBEGIN_in_truncation575);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:20: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA5_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 1 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA5_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 2 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto ruletruncationEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:23: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_truncation588);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:74: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_truncation592);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_truncation597);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletruncationEx; /* Prevent compiler warnings */
    ruletruncationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end truncation */

/**
 * $ANTLR start lowerWithOptionalUpper
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:101:1: lowerWithOptionalUpper : ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? ;
 */
void
BUGSParser::lowerWithOptionalUpper()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:2: ( ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:5: ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:5: ( uvNode | CONSTANTVALUE )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt6=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto rulelowerWithOptionalUpperEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper612);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper614);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_lowerWithOptionalUpper617);
            if  (this->hasException())
            {
                goto rulelowerWithOptionalUpperEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:34: ( uvNode | CONSTANTVALUE )?
            {
                int alt7=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt7=2;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:35: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper620);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:42: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper622);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelowerWithOptionalUpperEx; /* Prevent compiler warnings */
    rulelowerWithOptionalUpperEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end lowerWithOptionalUpper */

/**
 * $ANTLR start upperWithOptionalLower
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:105:1: upperWithOptionalLower : ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) ;
 */
void
BUGSParser::upperWithOptionalLower()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:2: ( ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:5: ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE )
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:5: ( uvNode | CONSTANTVALUE )?
            {
                int alt8=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt8=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt8=2;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower639);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower641);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_upperWithOptionalLower645);
            if  (this->hasException())
            {
                goto ruleupperWithOptionalLowerEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:35: ( uvNode | CONSTANTVALUE )
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt9=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt9=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleupperWithOptionalLowerEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:36: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower648);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:43: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower650);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleupperWithOptionalLowerEx; /* Prevent compiler warnings */
    ruleupperWithOptionalLowerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end upperWithOptionalLower */

/**
 * $ANTLR start logicalNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:109:1: logicalNodeExpr : ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions );
 */
void
BUGSParser::logicalNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:2: ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions )

            ANTLR_UINT32 alt11;

            alt11=2;

            {
                int LA11_0 = this->LA(1);
                if ( (LA11_0 == NODENAME))
                {
                    {
                        int LA11_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                        {
                            alt11=1;
                        }
                        else if ( (true))
                        {
                            alt11=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return ;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 11 );
                            ex->set_state( 1 );


                            goto rulelogicalNodeExprEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGITOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == CLOGLOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == PROBITOPENBRACKET))
                {
                    alt11=1;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto rulelogicalNodeExprEx;

                }
            }
            switch (alt11)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:4: ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions
        	    {
        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:111:2: ( uvNode | linkFunction )
        	        {
        	            int alt10=2;
        	            switch ( this->LA(1) )
        	            {
        	            case NODENAME:
        	            	{
        	            		alt10=1;
        	            	}
        	                break;
        	            case CLOGLOGOPENBRACKET:
        	            case LOGITOPENBRACKET:
        	            case LOGOPENBRACKET:
        	            case PROBITOPENBRACKET:
        	            	{
        	            		alt10=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return ;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 10 );
        	                ex->set_state( 0 );


        	                goto rulelogicalNodeExprEx;

        	            }

        	            switch (alt10)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:111:3: uvNode
        	        	    {
        	        	        this->followPush(FOLLOW_uvNode_in_logicalNodeExpr676);
        	        	        uvNode();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:111:12: linkFunction
        	        	    {
        	        	        this->followPush(FOLLOW_linkFunction_in_logicalNodeExpr680);
        	        	        linkFunction();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr686);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr688);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:113:5: mvNode LEFTPOINTER exprWithNodesFunctions
        	    {
        	        this->followPush(FOLLOW_mvNode_in_logicalNodeExpr694);
        	        mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr696);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr698);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalNodeExprEx; /* Prevent compiler warnings */
    rulelogicalNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end logicalNodeExpr */

/**
 * $ANTLR start linkFunction
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:116:1: linkFunction : ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET );
 */
void
BUGSParser::linkFunction()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:117:2: ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET )

            ANTLR_UINT32 alt12;

            alt12=4;

            switch ( this->LA(1) )
            {
            case LOGOPENBRACKET:
            	{
            		alt12=1;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt12=2;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt12=3;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt12=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto rulelinkFunctionEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:117:4: LOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_linkFunction711);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction713);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction715);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:118:4: LOGITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_linkFunction722);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction724);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction726);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:119:4: CLOGLOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction732);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction734);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction736);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 4:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:120:4: PROBITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_linkFunction742);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction744);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction746);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelinkFunctionEx; /* Prevent compiler warnings */
    rulelinkFunctionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end linkFunction */

/**
 * $ANTLR start exprWithNodesFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:123:1: exprWithNodesFunctions : (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )? ;
 */
void
BUGSParser::exprWithNodesFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    float ue1;
    typedef	float RETURN_TYPE_ue1;

    float ue2;
    typedef	float RETURN_TYPE_ue2;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:2: ( (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:4: (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:4: (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET )
            {
                int alt13=6;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                	{
                		alt13=1;
                	}
                    break;
                case NODENAME:
                	{
                		alt13=2;
                	}
                    break;
                case OPENBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case MINUS:
                			{
                				alt13=3;
                			}
                		    break;
                		case ABSOPENBRACKET:
                		case CONSTANTINT:
                		case CONSTANTVALUE:
                		case INVERSEOPENBRACKET:
                		case NODENAME:
                		case OPENBRACKET:
                			{
                				alt13=6;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 3 );


                		    goto ruleexprWithNodesFunctionsEx;

                		}

                	}
                    break;
                case ABSOPENBRACKET:
                	{
                		alt13=4;
                	}
                    break;
                case INVERSEOPENBRACKET:
                	{
                		alt13=5;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleexprWithNodesFunctionsEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:5: ue1= unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions761);
            	        ue1=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:125:4: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_exprWithNodesFunctions766);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:126:4: OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions772);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions774);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions778);
            	        ue2=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions781);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:127:4: scalarFunctions
            	    {
            	        this->followPush(FOLLOW_scalarFunctions_in_exprWithNodesFunctions787);
            	        scalarFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:128:4: vectorFunctions
            	    {
            	        this->followPush(FOLLOW_vectorFunctions_in_exprWithNodesFunctions792);
            	        vectorFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 6:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:129:4: OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions798);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions802);
            	        exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions804);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:130:2: ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )?
            {
                int alt14=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt14=1;
                    	}
                        break;
                }

                switch (alt14)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:130:3: ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions
            	    {
            	        if ( this->LA(1) == DIV || this->LA(1) == MINUS || this->LA(1) == MULT || this->LA(1) == PLUS )
            	        {
            	            this->consume();
            	            this->set_perror_recovery(false);
            	             this->set_failedflag(false); 

            	        }
            	        else
            	        {
            	            if (this->get_backtracking()>0)
            	            {
            	                this->set_failedflag( true );
            	                return ;
            	            }

            	            new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            this->get_exception()->set_expectingSet(NULL);

            	            goto ruleexprWithNodesFunctionsEx;
            	        }


            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions825);
            	        exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprWithNodesFunctionsEx; /* Prevent compiler warnings */
    ruleexprWithNodesFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end exprWithNodesFunctions */

/**
 * $ANTLR start uvNode
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:133:1: uvNode returns [std::string nodeid, vector<Expression*> indices] : NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? ;
 */
BUGSParser_uvNode_return
BUGSParser::uvNode()
{
    BUGSParser_uvNode_return retval(this);


    const CommonTokenType*    NODENAME3;
    Expression* exp1;
    typedef	Expression* RETURN_TYPE_exp1;

    Expression* exp2;
    typedef	Expression* RETURN_TYPE_exp2;

    /* Initialize rule variables
     */

    NODENAME3       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:134:2: ( NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:134:4: NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
        {
            NODENAME3 =  this->matchToken(NODENAME, &FOLLOW_NODENAME_in_uvNode842);
            if  (this->hasException())
            {
                goto ruleuvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.nodeid= (NODENAME3->getText());

            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:135:2: ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
            {
                int alt16=2;
                switch ( this->LA(1) )
                {
                    case OPENSQUAREBRACKET:
                    	{
                    		alt16=1;
                    	}
                        break;
                }

                switch (alt16)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:136:2: OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET
            	    {
            	         this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_uvNode850);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_in_uvNode854);
            	        exp1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            retval.indices
            	            .push_back(exp1
            	            );
            	        }


            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:137:2: ( COMMA exp2= expression )*

            	        for (;;)
            	        {
            	            int alt15=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt15=1;
            	            	}
            	                break;

            	            }

            	            switch (alt15)
            	            {
            	        	case 1:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:138:2: COMMA exp2= expression
            	        	    {
            	        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_uvNode863);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_expression_in_uvNode867);
            	        	        exp2=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            retval.indices
            	        	            .push_back(exp2
            	        	            );
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop15;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop15: ; /* Jump out to here if this rule does not match */


            	         this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_uvNode878);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvNodeEx; /* Prevent compiler warnings */
    ruleuvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end uvNode */

/**
 * $ANTLR start mvNode
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:143:1: mvNode : NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET ;
 */
BUGSParser_mvNode_return
BUGSParser::mvNode()
{
    BUGSParser_mvNode_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:144:2: ( NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:144:4: NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_mvNode894);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_mvNode896);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_multiIndices_in_mvNode898);
            multiIndices();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_mvNode900);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvNodeEx; /* Prevent compiler warnings */
    rulemvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end mvNode */

/**
 * $ANTLR start expression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:147:1: expression returns [Expression* exp = new Expression()] : ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )? ;
 */
Expression*
BUGSParser::expression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Expression* exp;


    Expression* e5;
    typedef	Expression* RETURN_TYPE_e5;

    Expression* e1;
    typedef	Expression* RETURN_TYPE_e1;

    Expression* e2;
    typedef	Expression* RETURN_TYPE_e2;

    Expression* e3;
    typedef	Expression* RETURN_TYPE_e3;

    Expression* e4;
    typedef	Expression* RETURN_TYPE_e4;

    float unaryExpression4;
    typedef	float RETURN_TYPE_unaryExpression4;

    BUGSParser_uvNode_return uvNode5;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode5;

    /* Initialize rule variables
     */
    exp =  new Expression();



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:148:2: ( ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:148:4: ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:148:4: ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET )
            {
                int alt17=3;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                	{
                		alt17=1;
                	}
                    break;
                case NODENAME:
                	{
                		alt17=2;
                	}
                    break;
                case OPENBRACKET:
                	{
                		alt17=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return exp;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 17 );
                    ex->set_state( 0 );


                    goto ruleexpressionEx;

                }

                switch (alt17)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:148:5: unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_expression916);
            	        unaryExpression4=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->expvalue=unaryExpression4
            	            ; exp
            	            ->type=CONSTANT;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:149:4: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_expression924);
            	        uvNode5=uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            UnivariateNode* uvnode = new UnivariateNode(); uvnode->nodeid = uvNode5.nodeid
            	            ; uvnode->indices = uvNode5.indices
            	            ; exp
            	            ->uvnode=uvnode; exp
            	            ->type=NODE;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:150:4: OPENBRACKET e5= expression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_expression931);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression935);
            	        e5=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_expression937);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->exp = e5
            	            ; exp
            	            ->type=EXPRESSION;
            	        }


            	    }
            	    break;

                }
            }

            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:151:2: ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )?
            {
                int alt18=5;
                switch ( this->LA(1) )
                {
                    case PLUS:
                    	{
                    		alt18=1;
                    	}
                        break;
                    case MINUS:
                    	{
                    		alt18=2;
                    	}
                        break;
                    case MULT:
                    	{
                    		alt18=3;
                    	}
                        break;
                    case DIV:
                    	{
                    		alt18=4;
                    	}
                        break;
                }

                switch (alt18)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:151:3: PLUS e1= expression
            	    {
            	         this->matchToken(PLUS, &FOLLOW_PLUS_in_expression944);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression948);
            	        e1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->op ='+'; exp
            	            ->children.push_back(e1
            	            );
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:152:3: MINUS e2= expression
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expression954);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression958);
            	        e2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->op ='-'; exp
            	            ->children.push_back(e2
            	            );
            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:153:3: MULT e3= expression
            	    {
            	         this->matchToken(MULT, &FOLLOW_MULT_in_expression964);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression968);
            	        e3=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->op ='*'; exp
            	            ->children.push_back(e3
            	            );
            	        }


            	    }
            	    break;
            	case 4:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:154:3: DIV e4= expression
            	    {
            	         this->matchToken(DIV, &FOLLOW_DIV_in_expression974);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression978);
            	        e4=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return exp;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            exp
            	            ->op ='/'; exp
            	            ->children.push_back(e4
            	            );
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return exp;
}
/* $ANTLR end expression */

/**
 * $ANTLR start unaryExpression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:157:1: unaryExpression returns [float uexpvalue] : ( CONSTANTINT | CONSTANTVALUE );
 */
float
BUGSParser::unaryExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    float uexpvalue;


    const CommonTokenType*    CONSTANTINT6;
    const CommonTokenType*    CONSTANTVALUE7;

    /* Initialize rule variables
     */

    CONSTANTINT6       = NULL;
    CONSTANTVALUE7       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:158:2: ( CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt19;

            alt19=2;

            switch ( this->LA(1) )
            {
            case CONSTANTINT:
            	{
            		alt19=1;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt19=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return uexpvalue;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 19 );
                ex->set_state( 0 );


                goto ruleunaryExpressionEx;

            }

            switch (alt19)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:158:4: CONSTANTINT
        	    {
        	        CONSTANTINT6 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression997);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atoi((CONSTANTINT6->getText()).c_str());

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:159:4: CONSTANTVALUE
        	    {
        	        CONSTANTVALUE7 =  this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression1005);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atof((CONSTANTVALUE7->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uexpvalue;
}
/* $ANTLR end unaryExpression */

/**
 * $ANTLR start multiIndices
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:161:1: multiIndices : multiDimExpression ( COMMA multiDimExpression )* ;
 */
void
BUGSParser::multiIndices()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:2: ( multiDimExpression ( COMMA multiDimExpression )* )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:4: multiDimExpression ( COMMA multiDimExpression )*
        {
            this->followPush(FOLLOW_multiDimExpression_in_multiIndices1018);
            multiDimExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiIndicesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:23: ( COMMA multiDimExpression )*

            for (;;)
            {
                int alt20=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt20=1;
                	}
                    break;

                }

                switch (alt20)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:24: COMMA multiDimExpression
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_multiIndices1021);
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_multiDimExpression_in_multiIndices1023);
            	        multiDimExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop20;	/* break out of the loop */
            	    break;
                }
            }
            loop20: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiIndicesEx; /* Prevent compiler warnings */
    rulemultiIndicesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiIndices */

/**
 * $ANTLR start multiDimExpression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:165:1: multiDimExpression : ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? );
 */
void
BUGSParser::multiDimExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:2: ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? )

            ANTLR_UINT32 alt22;

            alt22=2;

            switch ( this->LA(1) )
            {
            case OPENBRACKET:
            	{
            		{
            		    int LA22_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
            		    {
            		        alt22=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt22=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 22 );
            		        ex->set_state( 1 );


            		        goto rulemultiDimExpressionEx;

            		    }
            		}
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case NODENAME:
            	{
            		alt22=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 22 );
                ex->set_state( 0 );


                goto rulemultiDimExpressionEx;

            }

            switch (alt22)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:4: ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_multiDimExpression1047);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1049);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1051);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1053);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multiDimExpression1055);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:167:4: expression ( COLON expression )?
        	    {
        	        this->followPush(FOLLOW_expression_in_multiDimExpression1060);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:167:15: ( COLON expression )?
        	        {
        	            int alt21=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt21=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt21)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:167:16: COLON expression
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1063);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_multiDimExpression1065);
        	        	        expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemultiDimExpressionEx; /* Prevent compiler warnings */
    rulemultiDimExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiDimExpression */

/**
 * $ANTLR start startFor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:170:1: startFor returns [std::string loopvariable, int loopbegin, int loopend] : FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE ;
 */
BUGSParser_startFor_return
BUGSParser::startFor()
{
    BUGSParser_startFor_return retval(this);


    BUGSParser_loopVariable_return loopVariable8;
    typedef	BUGSParser_loopVariable_return RETURN_TYPE_loopVariable8;

    int loopBegin9;
    typedef	int RETURN_TYPE_loopBegin9;

    int loopEnd10;
    typedef	int RETURN_TYPE_loopEnd10;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:171:2: ( FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:171:4: FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE
        {
             this->matchToken(FORSTART, &FOLLOW_FORSTART_in_startFor1082);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_startFor1084);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopVariable_in_startFor1086);
            loopVariable8=loopVariable();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(IN, &FOLLOW_IN_in_startFor1088);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopBegin_in_startFor1090);
            loopBegin9=loopBegin();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(COLON, &FOLLOW_COLON_in_startFor1092);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopEnd_in_startFor1094);
            loopEnd10=loopEnd();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_startFor1096);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_startFor1098);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.loopvariable= 
                (this->get_strstream()->toStringTT(loopVariable8.start, loopVariable8.stop))
                ;
                 retval.loopbegin= 
                loopBegin9
                ;
                 retval.loopend= 
                loopEnd10
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestartForEx; /* Prevent compiler warnings */
    rulestartForEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end startFor */

/**
 * $ANTLR start endFor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:175:1: endFor : CLOSEBRACE ;
 */
void
BUGSParser::endFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:176:2: ( CLOSEBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:176:4: CLOSEBRACE
        {
             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_endFor1114);
            if  (this->hasException())
            {
                goto ruleendForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendForEx; /* Prevent compiler warnings */
    ruleendForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end endFor */

/**
 * $ANTLR start loopVariable
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:179:1: loopVariable : NODENAME ;
 */
BUGSParser_loopVariable_return
BUGSParser::loopVariable()
{
    BUGSParser_loopVariable_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:2: ( NODENAME )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:4: NODENAME
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_loopVariable1126);
            if  (this->hasException())
            {
                goto ruleloopVariableEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopVariableEx; /* Prevent compiler warnings */
    ruleloopVariableEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end loopVariable */

/**
 * $ANTLR start loopBegin
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:183:1: loopBegin returns [int value] : ( uvNode | CONSTANTINT );
 */
int
BUGSParser::loopBegin()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int value;


    const CommonTokenType*    CONSTANTINT11;

    /* Initialize rule variables
     */

    CONSTANTINT11       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt23;

            alt23=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt23=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt23=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return value;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto ruleloopBeginEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopBegin1142);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:185:4: CONSTANTINT
        	    {
        	        CONSTANTINT11 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopBegin1147);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= ::atoi((CONSTANTINT11->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopBeginEx; /* Prevent compiler warnings */
    ruleloopBeginEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return value;
}
/* $ANTLR end loopBegin */

/**
 * $ANTLR start loopEnd
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:188:1: loopEnd returns [int value] : ( uvNode | CONSTANTINT );
 */
int
BUGSParser::loopEnd()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int value;


    const CommonTokenType*    CONSTANTINT12;

    /* Initialize rule variables
     */

    CONSTANTINT12       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:189:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt24;

            alt24=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt24=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt24=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return value;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleloopEndEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:189:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopEnd1164);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:190:4: CONSTANTINT
        	    {
        	        CONSTANTINT12 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopEnd1171);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= ::atoi((CONSTANTINT12->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopEndEx; /* Prevent compiler warnings */
    ruleloopEndEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return value;
}
/* $ANTLR end loopEnd */

/**
 * $ANTLR start scalarFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:208:1: scalarFunctions : ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET ;
 */
void
BUGSParser::scalarFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:209:2: ( ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:209:4: ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET
        {
             this->matchToken(ABSOPENBRACKET, &FOLLOW_ABSOPENBRACKET_in_scalarFunctions1374);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions1376);
            exprWithNodesFunctions();

            this->followPop();
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions1378);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarFunctionsEx; /* Prevent compiler warnings */
    rulescalarFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end scalarFunctions */

/**
 * $ANTLR start vectorFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:212:1: vectorFunctions : INVERSEOPENBRACKET mvNode CLOSEBRACKET ;
 */
void
BUGSParser::vectorFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:213:2: ( INVERSEOPENBRACKET mvNode CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:213:4: INVERSEOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(INVERSEOPENBRACKET, &FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1390);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            this->followPush(FOLLOW_mvNode_in_vectorFunctions1392);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions1394);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorFunctionsEx; /* Prevent compiler warnings */
    rulevectorFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end vectorFunctions */

/**
 * $ANTLR start uvDistribution
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:216:1: uvDistribution : ( discreteUnivariate | continuousUnivariate );
 */
void
BUGSParser::uvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:217:2: ( discreteUnivariate | continuousUnivariate )

            ANTLR_UINT32 alt25;

            alt25=2;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            	{
            		alt25=1;
            	}
                break;
            case BETAOPENBRACKET:
            	{
            		alt25=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleuvDistributionEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:217:4: discreteUnivariate
        	    {
        	        this->followPush(FOLLOW_discreteUnivariate_in_uvDistribution1407);
        	        discreteUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:218:4: continuousUnivariate
        	    {
        	        this->followPush(FOLLOW_continuousUnivariate_in_uvDistribution1412);
        	        continuousUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleuvDistributionEx; /* Prevent compiler warnings */
    ruleuvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end uvDistribution */

/**
 * $ANTLR start mvDistribution
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:221:1: mvDistribution : ( discreteMultivariate | continuousMultivariate );
 */
void
BUGSParser::mvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:222:2: ( discreteMultivariate | continuousMultivariate )

            ANTLR_UINT32 alt26;

            alt26=2;

            switch ( this->LA(1) )
            {
            case MUTLTINOMIALOPENBRACKET:
            	{
            		alt26=1;
            	}
                break;
            case DIRICHLETOPENBRACKET:
            	{
            		alt26=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto rulemvDistributionEx;

            }

            switch (alt26)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:222:4: discreteMultivariate
        	    {
        	        this->followPush(FOLLOW_discreteMultivariate_in_mvDistribution1423);
        	        discreteMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:223:4: continuousMultivariate
        	    {
        	        this->followPush(FOLLOW_continuousMultivariate_in_mvDistribution1429);
        	        continuousMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvDistributionEx; /* Prevent compiler warnings */
    rulemvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end mvDistribution */

/**
 * $ANTLR start discreteUnivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:226:1: discreteUnivariate returns [std::string name, std::list<string> parameters] : bernoulli ;
 */
BUGSParser_discreteUnivariate_return
BUGSParser::discreteUnivariate()
{
    BUGSParser_discreteUnivariate_return retval(this);


    std::list<string> bernoulli13;
    typedef	std::list<string> RETURN_TYPE_bernoulli13;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:227:2: ( bernoulli )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:227:4: bernoulli
        {
            this->followPush(FOLLOW_bernoulli_in_discreteUnivariate1445);
            bernoulli13=bernoulli();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteUnivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="BERNOULLI";
                 retval.parameters=
                bernoulli13
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteUnivariateEx; /* Prevent compiler warnings */
    rulediscreteUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteUnivariate */

/**
 * $ANTLR start continuousUnivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:230:1: continuousUnivariate returns [std::string name, std::list<string> parameters] : beta ;
 */
BUGSParser_continuousUnivariate_return
BUGSParser::continuousUnivariate()
{
    BUGSParser_continuousUnivariate_return retval(this);


    std::list<string> beta14;
    typedef	std::list<string> RETURN_TYPE_beta14;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:231:2: ( beta )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:231:4: beta
        {
            this->followPush(FOLLOW_beta_in_continuousUnivariate1462);
            beta14=beta();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousUnivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="BETA";
                 retval.parameters=
                beta14
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousUnivariateEx; /* Prevent compiler warnings */
    rulecontinuousUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousUnivariate */

/**
 * $ANTLR start discreteMultivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:234:1: discreteMultivariate returns [std::string name, std::list<string> parameters] : multinomial ;
 */
BUGSParser_discreteMultivariate_return
BUGSParser::discreteMultivariate()
{
    BUGSParser_discreteMultivariate_return retval(this);


    std::list<string> multinomial15;
    typedef	std::list<string> RETURN_TYPE_multinomial15;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:235:2: ( multinomial )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:235:4: multinomial
        {
            this->followPush(FOLLOW_multinomial_in_discreteMultivariate1479);
            multinomial15=multinomial();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteMultivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="MULTINOMIAL";
                 retval.parameters=
                multinomial15
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteMultivariateEx; /* Prevent compiler warnings */
    rulediscreteMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteMultivariate */

/**
 * $ANTLR start continuousMultivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:238:1: continuousMultivariate returns [std::string name, std::list<string> parameters] : dirichlet ;
 */
BUGSParser_continuousMultivariate_return
BUGSParser::continuousMultivariate()
{
    BUGSParser_continuousMultivariate_return retval(this);


    std::list<string> dirichlet16;
    typedef	std::list<string> RETURN_TYPE_dirichlet16;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:239:2: ( dirichlet )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:239:4: dirichlet
        {
            this->followPush(FOLLOW_dirichlet_in_continuousMultivariate1497);
            dirichlet16=dirichlet();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousMultivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="DIRICHLET";
                 retval.parameters=
                dirichlet16
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousMultivariateEx; /* Prevent compiler warnings */
    rulecontinuousMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousMultivariate */

/**
 * $ANTLR start distributionParameter
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:242:1: distributionParameter : ( uvNode | CONSTANTINT | CONSTANTVALUE );
 */
BUGSParser_distributionParameter_return
BUGSParser::distributionParameter()
{
    BUGSParser_distributionParameter_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:243:2: ( uvNode | CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt27;

            alt27=3;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt27=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt27=2;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt27=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto ruledistributionParameterEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:243:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_distributionParameter1511);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:243:13: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_distributionParameter1515);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:243:27: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_distributionParameter1519);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledistributionParameterEx; /* Prevent compiler warnings */
    ruledistributionParameterEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end distributionParameter */

/**
 * $ANTLR start bernoulli
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:246:1: bernoulli returns [std::list<string> parameters] : BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::bernoulli()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_distributionParameter_return distributionParameter17;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_distributionParameter17;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:247:2: ( BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:247:4: BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(BERNOULLIOPENBRACKET, &FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1535);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_bernoulli1537);
            distributionParameter17=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_bernoulli1539);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(distributionParameter17.start, distributionParameter17.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebernoulliEx; /* Prevent compiler warnings */
    rulebernoulliEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end bernoulli */

/**
 * $ANTLR start beta
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:250:1: beta returns [std::list<string> parameters] : BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::beta()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_distributionParameter_return dp1;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp1;

    BUGSParser_distributionParameter_return dp2;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:251:2: ( BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:251:4: BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(BETAOPENBRACKET, &FOLLOW_BETAOPENBRACKET_in_beta1556);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1560);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_beta1563);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1567);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_beta1569);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(dp1.start, dp1.stop))
                ); parameters
                .push_back((this->get_strstream()->toStringTT(dp2.start, dp2.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebetaEx; /* Prevent compiler warnings */
    rulebetaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end beta */

/**
 * $ANTLR start multinomial
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:254:1: multinomial returns [std::list<string> parameters] : MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::multinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_mvNode_return dp1;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_dp1;

    BUGSParser_distributionParameter_return dp2;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:255:2: ( MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:255:4: MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(MUTLTINOMIALOPENBRACKET, &FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1586);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_multinomial1590);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_multinomial1592);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1598);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multinomial1600);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(dp1.start, dp1.stop))
                ); parameters
                .push_back((this->get_strstream()->toStringTT(dp2.start, dp2.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultinomialEx; /* Prevent compiler warnings */
    rulemultinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end multinomial */

/**
 * $ANTLR start dirichlet
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:259:1: dirichlet returns [std::list<string> parameters] : DIRICHLETOPENBRACKET mvNode CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::dirichlet()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_mvNode_return mvNode18;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_mvNode18;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:260:2: ( DIRICHLETOPENBRACKET mvNode CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:260:4: DIRICHLETOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(DIRICHLETOPENBRACKET, &FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1617);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_dirichlet1619);
            mvNode18=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_dirichlet1621);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(mvNode18.start, mvNode18.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledirichletEx; /* Prevent compiler warnings */
    ruledirichletEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end dirichlet */

// $ANTLR start synpred1_BUGS
void BUGSParser::msynpred1_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:72:3: ( uvNode TILDE )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:72:4: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred1_BUGS355);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred1_BUGS357);
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_BUGSEx; /* Prevent compiler warnings */
rulesynpred1_BUGSEx: ;

}
// $ANTLR end synpred1_BUGS

// $ANTLR start synpred2_BUGS
void BUGSParser::msynpred2_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:73:4: ( mvNode TILDE )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:73:5: mvNode TILDE
    {
        this->followPush(FOLLOW_mvNode_in_synpred2_BUGS372);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred2_BUGS374);
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_BUGSEx; /* Prevent compiler warnings */
rulesynpred2_BUGSEx: ;

}
// $ANTLR end synpred2_BUGS

// $ANTLR start synpred3_BUGS
void BUGSParser::msynpred3_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:74:4: ( uvNode LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:74:5: uvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_uvNode_in_synpred3_BUGS388);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred3_BUGS390);
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_BUGSEx; /* Prevent compiler warnings */
rulesynpred3_BUGSEx: ;

}
// $ANTLR end synpred3_BUGS

// $ANTLR start synpred4_BUGS
void BUGSParser::msynpred4_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:75:4: ( mvNode LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:75:5: mvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_mvNode_in_synpred4_BUGS404);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred4_BUGS406);
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_BUGSEx; /* Prevent compiler warnings */
rulesynpred4_BUGSEx: ;

}
// $ANTLR end synpred4_BUGS

// $ANTLR start synpred5_BUGS
void BUGSParser::msynpred5_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:76:4: ( linkFunction LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:76:5: linkFunction LEFTPOINTER
    {
        this->followPush(FOLLOW_linkFunction_in_synpred5_BUGS420);
        linkFunction();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred5_BUGS422);
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_BUGSEx; /* Prevent compiler warnings */
rulesynpred5_BUGSEx: ;

}
// $ANTLR end synpred5_BUGS

// $ANTLR start synpred6_BUGS
void BUGSParser::msynpred6_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:4: ( uvNode )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:5: uvNode
    {
        this->followPush(FOLLOW_uvNode_in_synpred6_BUGS460);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_BUGSEx; /* Prevent compiler warnings */
rulesynpred6_BUGSEx: ;

}
// $ANTLR end synpred6_BUGS

// $ANTLR start synpred7_BUGS
void BUGSParser::msynpred7_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:43: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt28;

        alt28=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt28=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt28=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 28 );
            ex->set_state( 0 );


            goto rulesynpred7_BUGSEx;

        }

        switch (alt28)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:44: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred7_BUGS547);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:95:51: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred7_BUGS549);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred7_BUGSEx; /* Prevent compiler warnings */
rulesynpred7_BUGSEx: ;

}
// $ANTLR end synpred7_BUGS

// $ANTLR start synpred8_BUGS
void BUGSParser::msynpred8_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:23: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt29;

        alt29=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt29=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt29=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 29 );
            ex->set_state( 0 );


            goto rulesynpred8_BUGSEx;

        }

        switch (alt29)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:24: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred8_BUGS581);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:31: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred8_BUGS583);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred8_BUGSEx; /* Prevent compiler warnings */
rulesynpred8_BUGSEx: ;

}
// $ANTLR end synpred8_BUGS

// $ANTLR start synpred9_BUGS
void BUGSParser::msynpred9_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:4: ( uvNode | linkFunction )

        ANTLR_UINT32 alt30;

        alt30=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt30=1;
        	}
            break;
        case CLOGLOGOPENBRACKET:
        case LOGITOPENBRACKET:
        case LOGOPENBRACKET:
        case PROBITOPENBRACKET:
        	{
        		alt30=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 30 );
            ex->set_state( 0 );


            goto rulesynpred9_BUGSEx;

        }

        switch (alt30)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:5: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred9_BUGS664);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:14: linkFunction
    	    {
    	        this->followPush(FOLLOW_linkFunction_in_synpred9_BUGS668);
    	        linkFunction();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred9_BUGSEx; /* Prevent compiler warnings */
rulesynpred9_BUGSEx: ;

}
// $ANTLR end synpred9_BUGS

// $ANTLR start synpred10_BUGS
void BUGSParser::msynpred10_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:4: ( OPENBRACKET expression COLON )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:5: OPENBRACKET expression COLON
    {
         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_synpred10_BUGS1038);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_expression_in_synpred10_BUGS1040);
        expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COLON, &FOLLOW_COLON_in_synpred10_BUGS1042);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_BUGSEx; /* Prevent compiler warnings */
rulesynpred10_BUGSEx: ;

}
// $ANTLR end synpred10_BUGS
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred5_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred1_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred9_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred7_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred2_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred8_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred3_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred10_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred6_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred4_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
