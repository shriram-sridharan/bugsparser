/** \file
 *  This C++ source file was generated by $ANTLR version 3.5-rc-2
 *
 *     -  From the grammar source file : /u/s/h/shrirams/bugsparser/Parser/BUGS.g
 *     -                            On : 2013-01-09 18:08:46
 *     -                for the parser : BUGSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "BUGSParser.hpp"
/* ----------------------------------------- */


/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

	namespace BUGS {

using namespace antlr3;
/** \brief Table of all token names in symbolic order, mainly used for
 *         error reporting.
 */
ANTLR_UINT8*   BUGSParserTokenNames[36+4]
     = {
        (ANTLR_UINT8*) "<invalid>",       /* String to print to indicate an invalid token */
        (ANTLR_UINT8*) "<EOR>",
        (ANTLR_UINT8*) "<DOWN>",
        (ANTLR_UINT8*) "<UP>",
        (ANTLR_UINT8*) "ABSOPENBRACKET",
        (ANTLR_UINT8*) "BERNOULLIOPENBRACKET",
        (ANTLR_UINT8*) "BETAOPENBRACKET",
        (ANTLR_UINT8*) "CENSORBEGINWITHC",
        (ANTLR_UINT8*) "CENSORBEGINWITHI",
        (ANTLR_UINT8*) "CLOGLOGOPENBRACKET",
        (ANTLR_UINT8*) "CLOSEBRACE",
        (ANTLR_UINT8*) "CLOSEBRACKET",
        (ANTLR_UINT8*) "CLOSESQUAREBRACKET",
        (ANTLR_UINT8*) "COLON",
        (ANTLR_UINT8*) "COMMA",
        (ANTLR_UINT8*) "CONSTANTINT",
        (ANTLR_UINT8*) "CONSTANTVALUE",
        (ANTLR_UINT8*) "DIRICHLETOPENBRACKET",
        (ANTLR_UINT8*) "DIV",
        (ANTLR_UINT8*) "DOT",
        (ANTLR_UINT8*) "EQUALTO",
        (ANTLR_UINT8*) "FORSTART",
        (ANTLR_UINT8*) "IN",
        (ANTLR_UINT8*) "INVERSEOPENBRACKET",
        (ANTLR_UINT8*) "LEFTPOINTER",
        (ANTLR_UINT8*) "LOGITOPENBRACKET",
        (ANTLR_UINT8*) "LOGOPENBRACKET",
        (ANTLR_UINT8*) "MINUS",
        (ANTLR_UINT8*) "MODEL",
        (ANTLR_UINT8*) "MULT",
        (ANTLR_UINT8*) "MUTLTINOMIALOPENBRACKET",
        (ANTLR_UINT8*) "NODENAME",
        (ANTLR_UINT8*) "OPENBRACE",
        (ANTLR_UINT8*) "OPENBRACKET",
        (ANTLR_UINT8*) "OPENSQUAREBRACKET",
        (ANTLR_UINT8*) "PLUS",
        (ANTLR_UINT8*) "PROBITOPENBRACKET",
        (ANTLR_UINT8*) "TILDE",
        (ANTLR_UINT8*) "TRUNCATIONBEGIN",
        (ANTLR_UINT8*) "WHITESPACE"
       };


/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/u/s/h/shrirams/bugsparser/Parser/BUGS.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* BUGSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream);
}

/** \brief Create a new BUGSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
BUGSParser::BUGSParser( StreamType* instream, RecognizerSharedStateType* state)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream );
}

void BUGSParser::init(StreamType* instream)
{
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( BUGSParserTokenNames );


}

void
BUGSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
BUGSParser::~BUGSParser()
 {
}

/** Return token names used by this 
parser

 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return BUGSParserTokenNames;
}


    IData* data;
    bool calculateNodeValue = true;
    map<string,int> loopvariable;


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MODEL_in_prog343_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MODEL_in_prog343( FOLLOW_MODEL_in_prog343_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_prog345_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_prog345( FOLLOW_OPENBRACE_in_prog345_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_prog347_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_prog347( FOLLOW_statements_in_prog347_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_prog349_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_prog349( FOLLOW_CLOSEBRACE_in_prog349_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements378_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements378( FOLLOW_stochasticNodeExpr_in_statements378_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_stochasticNodeExpr_in_statements395_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_stochasticNodeExpr_in_statements395( FOLLOW_stochasticNodeExpr_in_statements395_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements412_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements412( FOLLOW_logicalNodeExpr_in_statements412_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements429_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements429( FOLLOW_logicalNodeExpr_in_statements429_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_logicalNodeExpr_in_statements447_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_logicalNodeExpr_in_statements447( FOLLOW_logicalNodeExpr_in_statements447_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_startFor_in_statements454_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200200) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_startFor_in_statements454( FOLLOW_startFor_in_statements454_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_statements_in_statements456_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000400) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_statements_in_statements456( FOLLOW_statements_in_statements456_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_endFor_in_statements458_bits[]	= { ANTLR_UINT64_LIT(0x0000001086200202) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_endFor_in_statements458( FOLLOW_endFor_in_statements458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr485_bits[]	= { ANTLR_UINT64_LIT(0x0000004000000182) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr485( FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr485_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_censor_in_stochasticNodeExpr488_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_censor_in_stochasticNodeExpr488( FOLLOW_censor_in_stochasticNodeExpr488_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_truncation_in_stochasticNodeExpr492_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_truncation_in_stochasticNodeExpr492( FOLLOW_truncation_in_stochasticNodeExpr492_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr503_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr503( FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr503_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_uvStochasticNodeExpr518_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_uvStochasticNodeExpr518( FOLLOW_uvNode_in_uvStochasticNodeExpr518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_uvStochasticNodeExpr524_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000060) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_uvStochasticNodeExpr524( FOLLOW_TILDE_in_uvStochasticNodeExpr524_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvDistribution_in_uvStochasticNodeExpr528_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvDistribution_in_uvStochasticNodeExpr528( FOLLOW_uvDistribution_in_uvStochasticNodeExpr528_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_mvStochasticNodeExpr543_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_mvStochasticNodeExpr543( FOLLOW_mvNode_in_mvStochasticNodeExpr543_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_mvStochasticNodeExpr547_bits[]	= { ANTLR_UINT64_LIT(0x0000000040020000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_mvStochasticNodeExpr547( FOLLOW_TILDE_in_mvStochasticNodeExpr547_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvDistribution_in_mvStochasticNodeExpr549_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvDistribution_in_mvStochasticNodeExpr549( FOLLOW_mvDistribution_in_mvStochasticNodeExpr549_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_set_in_censor564_bits[]	= { ANTLR_UINT64_LIT(0x0000000080014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_set_in_censor564( FOLLOW_set_in_censor564_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_censor579_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_censor579( FOLLOW_lowerWithOptionalUpper_in_censor579_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_censor584_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_censor584( FOLLOW_upperWithOptionalLower_in_censor584_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_censor589_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_censor589( FOLLOW_CLOSEBRACKET_in_censor589_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TRUNCATIONBEGIN_in_truncation601_bits[]	= { ANTLR_UINT64_LIT(0x0000000080014000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TRUNCATIONBEGIN_in_truncation601( FOLLOW_TRUNCATIONBEGIN_in_truncation601_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_lowerWithOptionalUpper_in_truncation614_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_lowerWithOptionalUpper_in_truncation614( FOLLOW_lowerWithOptionalUpper_in_truncation614_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_upperWithOptionalLower_in_truncation618_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_upperWithOptionalLower_in_truncation618( FOLLOW_upperWithOptionalLower_in_truncation618_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_truncation623_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_truncation623( FOLLOW_CLOSEBRACKET_in_truncation623_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper638_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper638( FOLLOW_uvNode_in_lowerWithOptionalUpper638_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper640_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper640( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper640_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_lowerWithOptionalUpper643_bits[]	= { ANTLR_UINT64_LIT(0x0000000080010002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_lowerWithOptionalUpper643( FOLLOW_COMMA_in_lowerWithOptionalUpper643_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_lowerWithOptionalUpper646_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_lowerWithOptionalUpper646( FOLLOW_uvNode_in_lowerWithOptionalUpper646_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper648_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper648( FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper648_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower665_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower665( FOLLOW_uvNode_in_upperWithOptionalLower665_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower667_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower667( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower667_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_upperWithOptionalLower671_bits[]	= { ANTLR_UINT64_LIT(0x0000000080010000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_upperWithOptionalLower671( FOLLOW_COMMA_in_upperWithOptionalLower671_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_upperWithOptionalLower674_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_upperWithOptionalLower674( FOLLOW_uvNode_in_upperWithOptionalLower674_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower676_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower676( FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower676_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_logicalNodeExpr713_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_logicalNodeExpr713( FOLLOW_uvNode_in_logicalNodeExpr713_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_logicalNodeExpr721_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_logicalNodeExpr721( FOLLOW_linkFunction_in_logicalNodeExpr721_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr728_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr728( FOLLOW_LEFTPOINTER_in_logicalNodeExpr728_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr730_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr730( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr730_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_logicalNodeExpr738_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_logicalNodeExpr738( FOLLOW_mvNode_in_logicalNodeExpr738_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_logicalNodeExpr740_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_logicalNodeExpr740( FOLLOW_LEFTPOINTER_in_logicalNodeExpr740_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr742_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr742( FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr742_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGOPENBRACKET_in_linkFunction760_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGOPENBRACKET_in_linkFunction760( FOLLOW_LOGOPENBRACKET_in_linkFunction760_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction762_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction762( FOLLOW_uvNode_in_linkFunction762_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction764_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction764( FOLLOW_CLOSEBRACKET_in_linkFunction764_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LOGITOPENBRACKET_in_linkFunction772_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LOGITOPENBRACKET_in_linkFunction772( FOLLOW_LOGITOPENBRACKET_in_linkFunction772_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction774_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction774( FOLLOW_uvNode_in_linkFunction774_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction776_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction776( FOLLOW_CLOSEBRACKET_in_linkFunction776_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction783_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction783( FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction783_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction785_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction785( FOLLOW_uvNode_in_linkFunction785_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction787_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction787( FOLLOW_CLOSEBRACKET_in_linkFunction787_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PROBITOPENBRACKET_in_linkFunction794_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PROBITOPENBRACKET_in_linkFunction794( FOLLOW_PROBITOPENBRACKET_in_linkFunction794_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_linkFunction796_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_linkFunction796( FOLLOW_uvNode_in_linkFunction796_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_linkFunction798_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_linkFunction798( FOLLOW_CLOSEBRACKET_in_linkFunction798_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions818_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions818( FOLLOW_unaryExpression_in_exprWithNodesFunctions818_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_exprWithNodesFunctions825_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_exprWithNodesFunctions825( FOLLOW_uvNode_in_exprWithNodesFunctions825_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions832_bits[]	= { ANTLR_UINT64_LIT(0x0000000008000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions832( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions832_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions834_bits[]	= { ANTLR_UINT64_LIT(0x0000000000018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions834( FOLLOW_MINUS_in_exprWithNodesFunctions834_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_exprWithNodesFunctions838_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_exprWithNodesFunctions838( FOLLOW_unaryExpression_in_exprWithNodesFunctions838_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions841_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions841( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions841_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_scalarFunctions_in_exprWithNodesFunctions848_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_scalarFunctions_in_exprWithNodesFunctions848( FOLLOW_scalarFunctions_in_exprWithNodesFunctions848_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_vectorFunctions_in_exprWithNodesFunctions855_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_vectorFunctions_in_exprWithNodesFunctions855( FOLLOW_vectorFunctions_in_exprWithNodesFunctions855_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_exprWithNodesFunctions862_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_exprWithNodesFunctions862( FOLLOW_OPENBRACKET_in_exprWithNodesFunctions862_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions866_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions866( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions866_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions868_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions868( FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions868_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_exprWithNodesFunctions878_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PLUS_in_exprWithNodesFunctions878( FOLLOW_PLUS_in_exprWithNodesFunctions878_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_exprWithNodesFunctions882_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_exprWithNodesFunctions882( FOLLOW_MINUS_in_exprWithNodesFunctions882_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MULT_in_exprWithNodesFunctions889_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MULT_in_exprWithNodesFunctions889( FOLLOW_MULT_in_exprWithNodesFunctions889_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_exprWithNodesFunctions894_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIV_in_exprWithNodesFunctions894( FOLLOW_DIV_in_exprWithNodesFunctions894_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions903_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions903( FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions903_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_uvNode924_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_uvNode924( FOLLOW_NODENAME_in_uvNode924_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_uvNode932_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_uvNode932( FOLLOW_OPENSQUAREBRACKET_in_uvNode932_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode936_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode936( FOLLOW_expression_in_uvNode936_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_uvNode945_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_uvNode945( FOLLOW_COMMA_in_uvNode945_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_uvNode949_bits[]	= { ANTLR_UINT64_LIT(0x0000000000005000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_uvNode949( FOLLOW_expression_in_uvNode949_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_uvNode960_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_uvNode960( FOLLOW_CLOSESQUAREBRACKET_in_uvNode960_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_mvNode976_bits[]	= { ANTLR_UINT64_LIT(0x0000000400000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_mvNode976( FOLLOW_NODENAME_in_mvNode976_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENSQUAREBRACKET_in_mvNode978_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENSQUAREBRACKET_in_mvNode978( FOLLOW_OPENSQUAREBRACKET_in_mvNode978_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiIndices_in_mvNode980_bits[]	= { ANTLR_UINT64_LIT(0x0000000000001000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiIndices_in_mvNode980( FOLLOW_multiIndices_in_mvNode980_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSESQUAREBRACKET_in_mvNode982_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSESQUAREBRACKET_in_mvNode982( FOLLOW_CLOSESQUAREBRACKET_in_mvNode982_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_unaryExpression_in_expression998_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_unaryExpression_in_expression998( FOLLOW_unaryExpression_in_expression998_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_expression1006_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_expression1006( FOLLOW_uvNode_in_expression1006_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_expression1013_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_expression1013( FOLLOW_OPENBRACKET_in_expression1013_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression1017_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression1017( FOLLOW_expression_in_expression1017_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_expression1019_bits[]	= { ANTLR_UINT64_LIT(0x0000000828040002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_expression1019( FOLLOW_CLOSEBRACKET_in_expression1019_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_PLUS_in_expression1026_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_PLUS_in_expression1026( FOLLOW_PLUS_in_expression1026_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression1030_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression1030( FOLLOW_expression_in_expression1030_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MINUS_in_expression1036_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MINUS_in_expression1036( FOLLOW_MINUS_in_expression1036_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression1040_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression1040( FOLLOW_expression_in_expression1040_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MULT_in_expression1046_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MULT_in_expression1046( FOLLOW_MULT_in_expression1046_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression1050_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression1050( FOLLOW_expression_in_expression1050_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIV_in_expression1056_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIV_in_expression1056( FOLLOW_DIV_in_expression1056_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_expression1060_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_expression1060( FOLLOW_expression_in_expression1060_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_unaryExpression1079_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_unaryExpression1079( FOLLOW_CONSTANTINT_in_unaryExpression1079_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_unaryExpression1087_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_unaryExpression1087( FOLLOW_CONSTANTVALUE_in_unaryExpression1087_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1100( FOLLOW_multiDimExpression_in_multiIndices1100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multiIndices1103_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multiIndices1103( FOLLOW_COMMA_in_multiIndices1103_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multiDimExpression_in_multiIndices1105_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multiDimExpression_in_multiIndices1105( FOLLOW_multiDimExpression_in_multiIndices1105_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_multiDimExpression1129_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_multiDimExpression1129( FOLLOW_OPENBRACKET_in_multiDimExpression1129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1131( FOLLOW_expression_in_multiDimExpression1131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1133_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1133( FOLLOW_COLON_in_multiDimExpression1133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1135( FOLLOW_expression_in_multiDimExpression1135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multiDimExpression1137_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multiDimExpression1137( FOLLOW_CLOSEBRACKET_in_multiDimExpression1137_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1142_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1142( FOLLOW_expression_in_multiDimExpression1142_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_multiDimExpression1145_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_multiDimExpression1145( FOLLOW_COLON_in_multiDimExpression1145_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_multiDimExpression1147_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_multiDimExpression1147( FOLLOW_expression_in_multiDimExpression1147_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_FORSTART_in_startFor1164_bits[]	= { ANTLR_UINT64_LIT(0x0000000200000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_FORSTART_in_startFor1164( FOLLOW_FORSTART_in_startFor1164_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_startFor1166_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_startFor1166( FOLLOW_OPENBRACKET_in_startFor1166_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopVariable_in_startFor1168_bits[]	= { ANTLR_UINT64_LIT(0x0000000000400000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopVariable_in_startFor1168( FOLLOW_loopVariable_in_startFor1168_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_IN_in_startFor1170_bits[]	= { ANTLR_UINT64_LIT(0x0000000080008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_IN_in_startFor1170( FOLLOW_IN_in_startFor1170_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopBegin_in_startFor1172_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopBegin_in_startFor1172( FOLLOW_loopBegin_in_startFor1172_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_startFor1174_bits[]	= { ANTLR_UINT64_LIT(0x0000000080008000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_startFor1174( FOLLOW_COLON_in_startFor1174_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_loopEnd_in_startFor1176_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_loopEnd_in_startFor1176( FOLLOW_loopEnd_in_startFor1176_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_startFor1178_bits[]	= { ANTLR_UINT64_LIT(0x0000000100000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_startFor1178( FOLLOW_CLOSEBRACKET_in_startFor1178_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACE_in_startFor1180_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACE_in_startFor1180( FOLLOW_OPENBRACE_in_startFor1180_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACE_in_endFor1196_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACE_in_endFor1196( FOLLOW_CLOSEBRACE_in_endFor1196_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_NODENAME_in_loopVariable1208_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_NODENAME_in_loopVariable1208( FOLLOW_NODENAME_in_loopVariable1208_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopBegin1223_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopBegin1223( FOLLOW_uvNode_in_loopBegin1223_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopBegin1230_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopBegin1230( FOLLOW_CONSTANTINT_in_loopBegin1230_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_loopEnd1247_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_loopEnd1247( FOLLOW_uvNode_in_loopEnd1247_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_loopEnd1255_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_loopEnd1255( FOLLOW_CONSTANTINT_in_loopEnd1255_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_ABSOPENBRACKET_in_scalarFunctions1458_bits[]	= { ANTLR_UINT64_LIT(0x0000000280818010) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_ABSOPENBRACKET_in_scalarFunctions1458( FOLLOW_ABSOPENBRACKET_in_scalarFunctions1458_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_exprWithNodesFunctions_in_scalarFunctions1460_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_exprWithNodesFunctions_in_scalarFunctions1460( FOLLOW_exprWithNodesFunctions_in_scalarFunctions1460_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_scalarFunctions1462_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_scalarFunctions1462( FOLLOW_CLOSEBRACKET_in_scalarFunctions1462_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1474_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1474( FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1474_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_vectorFunctions1476_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_vectorFunctions1476( FOLLOW_mvNode_in_vectorFunctions1476_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_vectorFunctions1478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_vectorFunctions1478( FOLLOW_CLOSEBRACKET_in_vectorFunctions1478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteUnivariate_in_uvDistribution1494_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteUnivariate_in_uvDistribution1494( FOLLOW_discreteUnivariate_in_uvDistribution1494_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousUnivariate_in_uvDistribution1501_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousUnivariate_in_uvDistribution1501( FOLLOW_continuousUnivariate_in_uvDistribution1501_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_discreteMultivariate_in_mvDistribution1518_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_discreteMultivariate_in_mvDistribution1518( FOLLOW_discreteMultivariate_in_mvDistribution1518_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_continuousMultivariate_in_mvDistribution1525_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_continuousMultivariate_in_mvDistribution1525( FOLLOW_continuousMultivariate_in_mvDistribution1525_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_bernoulli_in_discreteUnivariate1542_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_bernoulli_in_discreteUnivariate1542( FOLLOW_bernoulli_in_discreteUnivariate1542_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_beta_in_continuousUnivariate1559_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_beta_in_continuousUnivariate1559( FOLLOW_beta_in_continuousUnivariate1559_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_multinomial_in_discreteMultivariate1576_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_multinomial_in_discreteMultivariate1576( FOLLOW_multinomial_in_discreteMultivariate1576_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_dirichlet_in_continuousMultivariate1594_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_dirichlet_in_continuousMultivariate1594( FOLLOW_dirichlet_in_continuousMultivariate1594_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_distributionParameter1608_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_distributionParameter1608( FOLLOW_uvNode_in_distributionParameter1608_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTINT_in_distributionParameter1612_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTINT_in_distributionParameter1612( FOLLOW_CONSTANTINT_in_distributionParameter1612_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_distributionParameter1616_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_distributionParameter1616( FOLLOW_CONSTANTVALUE_in_distributionParameter1616_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1632_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1632( FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1632_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_bernoulli1634_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_bernoulli1634( FOLLOW_distributionParameter_in_bernoulli1634_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_bernoulli1636_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_bernoulli1636( FOLLOW_CLOSEBRACKET_in_bernoulli1636_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_BETAOPENBRACKET_in_beta1653_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_BETAOPENBRACKET_in_beta1653( FOLLOW_BETAOPENBRACKET_in_beta1653_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1657_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1657( FOLLOW_distributionParameter_in_beta1657_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_beta1660_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_beta1660( FOLLOW_COMMA_in_beta1660_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_beta1664_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_beta1664( FOLLOW_distributionParameter_in_beta1664_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_beta1666_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_beta1666( FOLLOW_CLOSEBRACKET_in_beta1666_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1683_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1683( FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1683_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_multinomial1687_bits[]	= { ANTLR_UINT64_LIT(0x0000000000004000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_multinomial1687( FOLLOW_mvNode_in_multinomial1687_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COMMA_in_multinomial1689_bits[]	= { ANTLR_UINT64_LIT(0x0000000080018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COMMA_in_multinomial1689( FOLLOW_COMMA_in_multinomial1689_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_distributionParameter_in_multinomial1695_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_distributionParameter_in_multinomial1695( FOLLOW_distributionParameter_in_multinomial1695_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_multinomial1697_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_multinomial1697( FOLLOW_CLOSEBRACKET_in_multinomial1697_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1714_bits[]	= { ANTLR_UINT64_LIT(0x0000000080000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1714( FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1714_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_dirichlet1716_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000800) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_dirichlet1716( FOLLOW_mvNode_in_dirichlet1716_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CLOSEBRACKET_in_dirichlet1718_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CLOSEBRACKET_in_dirichlet1718( FOLLOW_CLOSEBRACKET_in_dirichlet1718_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred1_BUGS369_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred1_BUGS369( FOLLOW_uvNode_in_synpred1_BUGS369_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred1_BUGS371_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred1_BUGS371( FOLLOW_TILDE_in_synpred1_BUGS371_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred2_BUGS386_bits[]	= { ANTLR_UINT64_LIT(0x0000002000000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred2_BUGS386( FOLLOW_mvNode_in_synpred2_BUGS386_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_TILDE_in_synpred2_BUGS388_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_TILDE_in_synpred2_BUGS388( FOLLOW_TILDE_in_synpred2_BUGS388_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred3_BUGS403_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred3_BUGS403( FOLLOW_uvNode_in_synpred3_BUGS403_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred3_BUGS405_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred3_BUGS405( FOLLOW_LEFTPOINTER_in_synpred3_BUGS405_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_mvNode_in_synpred4_BUGS420_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_mvNode_in_synpred4_BUGS420( FOLLOW_mvNode_in_synpred4_BUGS420_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred4_BUGS422_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred4_BUGS422( FOLLOW_LEFTPOINTER_in_synpred4_BUGS422_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred5_BUGS437_bits[]	= { ANTLR_UINT64_LIT(0x0000000001000000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred5_BUGS437( FOLLOW_linkFunction_in_synpred5_BUGS437_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_LEFTPOINTER_in_synpred5_BUGS439_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_LEFTPOINTER_in_synpred5_BUGS439( FOLLOW_LEFTPOINTER_in_synpred5_BUGS439_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred6_BUGS478_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred6_BUGS478( FOLLOW_uvNode_in_synpred6_BUGS478_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred7_BUGS573_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred7_BUGS573( FOLLOW_uvNode_in_synpred7_BUGS573_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred7_BUGS575_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred7_BUGS575( FOLLOW_CONSTANTVALUE_in_synpred7_BUGS575_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred8_BUGS607_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred8_BUGS607( FOLLOW_uvNode_in_synpred8_BUGS607_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_CONSTANTVALUE_in_synpred8_BUGS609_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_CONSTANTVALUE_in_synpred8_BUGS609( FOLLOW_CONSTANTVALUE_in_synpred8_BUGS609_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_uvNode_in_synpred9_BUGS701_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_uvNode_in_synpred9_BUGS701( FOLLOW_uvNode_in_synpred9_BUGS701_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_linkFunction_in_synpred9_BUGS705_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_linkFunction_in_synpred9_BUGS705( FOLLOW_linkFunction_in_synpred9_BUGS705_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_OPENBRACKET_in_synpred10_BUGS1120_bits[]	= { ANTLR_UINT64_LIT(0x0000000280018000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_OPENBRACKET_in_synpred10_BUGS1120( FOLLOW_OPENBRACKET_in_synpred10_BUGS1120_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_expression_in_synpred10_BUGS1122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000002000) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_expression_in_synpred10_BUGS1122( FOLLOW_expression_in_synpred10_BUGS1122_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: BUGSParser  */
static	ANTLR_BITWORD FOLLOW_COLON_in_synpred10_BUGS1124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  BUGSParserImplTraits::BitsetListType FOLLOW_COLON_in_synpred10_BUGS1124( FOLLOW_COLON_in_synpred10_BUGS1124_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start prog
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:71:1: prog[IData* inputdata] returns [Program program] : MODEL OPENBRACE statements CLOSEBRACE ;
 */
Program
BUGSParser::prog(IData* inputdata)
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    Program program;


    vector<Node* > statements1;
    typedef	vector<Node* > RETURN_TYPE_statements1;

    /* Initialize rule variables
     */


    	data = inputdata;


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:75:2: ( MODEL OPENBRACE statements CLOSEBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:75:4: MODEL OPENBRACE statements CLOSEBRACE
        {
             this->matchToken(MODEL, &FOLLOW_MODEL_in_prog343);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_prog345);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            this->followPush(FOLLOW_statements_in_prog347);
            statements1=statements();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_prog349);
            if  (this->hasException())
            {
                goto ruleprogEx;
            }
            if (this->hasFailed())
            {
                return program;
            }


            if ( this->get_backtracking()==0 )
            {
                program
                .nodes = statements1
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprogEx; /* Prevent compiler warnings */
    ruleprogEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return program;
}
/* $ANTLR end prog */

/**
 * $ANTLR start statements
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:78:1: statements returns [vector<Node* > nodes] : ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr | startFor statements endFor )+ ;
 */
vector<Node* >
BUGSParser::statements()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    vector<Node* > nodes;


    StochasticNode* ste1;
    typedef	StochasticNode* RETURN_TYPE_ste1;

    StochasticNode* ste2;
    typedef	StochasticNode* RETURN_TYPE_ste2;

    LogicalNode* lne1;
    typedef	LogicalNode* RETURN_TYPE_lne1;

    LogicalNode* lne2;
    typedef	LogicalNode* RETURN_TYPE_lne2;

    LogicalNode* lne3;
    typedef	LogicalNode* RETURN_TYPE_lne3;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:78:42: ( ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr | startFor statements endFor )+ )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:79:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr | startFor statements endFor )+
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:79:2: ( ( uvNode TILDE )=>ste1= stochasticNodeExpr | ( mvNode TILDE )=>ste2= stochasticNodeExpr | ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr | ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr | ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr | startFor statements endFor )+
            {
                int cnt1=0;

                for (;;)
                {
                    int alt1=7;
            	switch ( this->LA(1) )
            	{
            	case NODENAME:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_2 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred1_BUGS>() )))
            			    {
            			        alt1=1;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred2_BUGS>() )))
            			    {
            			        alt1=2;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_3 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case LOGITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_4 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case CLOGLOGOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_5 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case PROBITOPENBRACKET:
            		{
            			{
            			   /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
            			    */
            			    int LA1_6 = this->LA(2);
            			    if ( (this->msynpred( antlr3::ClassForwarder<synpred3_BUGS>() )))
            			    {
            			        alt1=3;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred4_BUGS>() )))
            			    {
            			        alt1=4;
            			    }
            			    else if ( (this->msynpred( antlr3::ClassForwarder<synpred5_BUGS>() )))
            			    {
            			        alt1=5;
            			    }

            			}
            		}
            	    break;
            	case FORSTART:
            		{
            			alt1=6;
            		}
            	    break;

            	}

            	switch (alt1)
            	{
            	    case 1:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:79:3: ( uvNode TILDE )=>ste1= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements378);
            	            ste1=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(ste1
            	                );
            	            }


            	        }
            	        break;
            	    case 2:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:80:4: ( mvNode TILDE )=>ste2= stochasticNodeExpr
            	        {
            	            this->followPush(FOLLOW_stochasticNodeExpr_in_statements395);
            	            ste2=stochasticNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(ste2
            	                );
            	            }


            	        }
            	        break;
            	    case 3:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:4: ( uvNode LEFTPOINTER )=>lne1= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements412);
            	            lne1=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(lne1
            	                );
            	            }


            	        }
            	        break;
            	    case 4:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:82:4: ( mvNode LEFTPOINTER )=>lne2= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements429);
            	            lne2=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(lne2
            	                );
            	            }


            	        }
            	        break;
            	    case 5:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:83:4: ( linkFunction LEFTPOINTER )=>lne3= logicalNodeExpr
            	        {
            	            this->followPush(FOLLOW_logicalNodeExpr_in_statements447);
            	            lne3=logicalNodeExpr();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            if ( this->get_backtracking()==0 )
            	            {
            	                nodes
            	                .push_back(lne3
            	                );
            	            }


            	        }
            	        break;
            	    case 6:
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:84:4: startFor statements endFor
            	        {
            	            this->followPush(FOLLOW_startFor_in_statements454);
            	            startFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            this->followPush(FOLLOW_statements_in_statements456);
            	            statements();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	            this->followPush(FOLLOW_endFor_in_statements458);
            	            endFor();

            	            this->followPop();
            	            if  (this->hasException())
            	            {
            	                goto rulestatementsEx;
            	            }
            	            if (this->hasFailed())
            	            {
            	                return nodes;
            	            }


            	        }
            	        break;

            	    default:

            		if ( cnt1 >= 1 )
            		{
            		    goto loop1;
            		}
            		if (this->get_backtracking()>0)
            		{
            		    this->set_failedflag( true );
            		    return nodes;
            		}

            		/* mismatchedSetEx()
            		 */
            		new ANTLR_Exception< BUGSParserImplTraits, EARLY_EXIT_EXCEPTION, StreamType>( this->get_rec(), "" );


            		goto rulestatementsEx;
            	}
            	cnt1++;
                }
                loop1: ;	/* Jump to here if this rule does not match */
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulestatementsEx; /* Prevent compiler warnings */
    rulestatementsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return nodes;
}
/* $ANTLR end statements */

/**
 * $ANTLR start stochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:88:1: stochasticNodeExpr returns [StochasticNode* stochasticNode] : ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr );
 */
StochasticNode*
BUGSParser::stochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    StochasticNode* stochasticNode;


    UnivariateNode* uvsne;
    typedef	UnivariateNode* RETURN_TYPE_uvsne;

    MultivariateNode* mvsne;
    typedef	MultivariateNode* RETURN_TYPE_mvsne;

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:2: ( ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )? |mvsne= mvStochasticNodeExpr )

            ANTLR_UINT32 alt3;

            alt3=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		{
            		    int LA3_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred6_BUGS>() )))
            		    {
            		        alt3=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt3=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return stochasticNode;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 3 );
            		        ex->set_state( 1 );


            		        goto rulestochasticNodeExprEx;

            		    }
            		}
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return stochasticNode;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 3 );
                ex->set_state( 0 );


                goto rulestochasticNodeExprEx;

            }

            switch (alt3)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:4: ( uvNode )=>uvsne= uvStochasticNodeExpr ( censor | truncation )?
        	    {
        	        this->followPush(FOLLOW_uvStochasticNodeExpr_in_stochasticNodeExpr485);
        	        uvsne=uvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNode;
        	        }


        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:43: ( censor | truncation )?
        	        {
        	            int alt2=3;
        	            switch ( this->LA(1) )
        	            {
        	                case CENSORBEGINWITHC:
        	                case CENSORBEGINWITHI:
        	                	{
        	                		alt2=1;
        	                	}
        	                    break;
        	                case TRUNCATIONBEGIN:
        	                	{
        	                		alt2=2;
        	                	}
        	                    break;
        	            }

        	            switch (alt2)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:44: censor
        	        	    {
        	        	        this->followPush(FOLLOW_censor_in_stochasticNodeExpr488);
        	        	        censor();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNode;
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:53: truncation
        	        	    {
        	        	        this->followPush(FOLLOW_truncation_in_stochasticNodeExpr492);
        	        	        truncation();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulestochasticNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return stochasticNode;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNode= 
        	            uvsne
        	            ;

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:90:4: mvsne= mvStochasticNodeExpr
        	    {
        	        this->followPush(FOLLOW_mvStochasticNodeExpr_in_stochasticNodeExpr503);
        	        mvsne=mvStochasticNodeExpr();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulestochasticNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return stochasticNode;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            stochasticNode= 
        	            mvsne
        	            ;

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulestochasticNodeExprEx; /* Prevent compiler warnings */
    rulestochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return stochasticNode;
}
/* $ANTLR end stochasticNodeExpr */

/**
 * $ANTLR start uvStochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:93:1: uvStochasticNodeExpr returns [UnivariateNode* univariateNode = new UnivariateNode()] : uvNode TILDE uvDistribution ;
 */
UnivariateNode*
BUGSParser::uvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateNode* univariateNode;


    BUGSParser_uvNode_return uvNode2;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode2;

    UnivariateDistribution* uvDistribution3;
    typedef	UnivariateDistribution* RETURN_TYPE_uvDistribution3;

    /* Initialize rule variables
     */
    univariateNode =  new UnivariateNode();



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:94:2: ( uvNode TILDE uvDistribution )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:94:3: uvNode TILDE uvDistribution
        {
            this->followPush(FOLLOW_uvNode_in_uvStochasticNodeExpr518);
            uvNode2=uvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                univariateNode
                ->nodename = uvNode2.name
                ; univariateNode
                ->parameters = uvNode2.parameters
                ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_uvStochasticNodeExpr524);
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            this->followPush(FOLLOW_uvDistribution_in_uvStochasticNodeExpr528);
            uvDistribution3=uvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleuvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return univariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                univariateNode
                ->distribution = uvDistribution3
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvStochasticNodeExprEx; /* Prevent compiler warnings */
    ruleuvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return univariateNode;
}
/* $ANTLR end uvStochasticNodeExpr */

/**
 * $ANTLR start mvStochasticNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:98:1: mvStochasticNodeExpr returns [MultivariateNode* multivariateNode = new MultivariateNode()] : mvNode TILDE mvDistribution ;
 */
MultivariateNode*
BUGSParser::mvStochasticNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateNode* multivariateNode;


    BUGSParser_mvNode_return mvNode4;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_mvNode4;

    MultivariateDistribution* mvDistribution5;
    typedef	MultivariateDistribution* RETURN_TYPE_mvDistribution5;

    /* Initialize rule variables
     */
    multivariateNode =  new MultivariateNode();



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:99:2: ( mvNode TILDE mvDistribution )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:99:3: mvNode TILDE mvDistribution
        {
            this->followPush(FOLLOW_mvNode_in_mvStochasticNodeExpr543);
            mvNode4=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                multivariateNode
                ->nodename = (this->get_strstream()->toStringTT(mvNode4.start, mvNode4.stop))
                ;
            }


             this->matchToken(TILDE, &FOLLOW_TILDE_in_mvStochasticNodeExpr547);
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


            this->followPush(FOLLOW_mvDistribution_in_mvStochasticNodeExpr549);
            mvDistribution5=mvDistribution();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvStochasticNodeExprEx;
            }
            if (this->hasFailed())
            {
                return multivariateNode;
            }


            if ( this->get_backtracking()==0 )
            {
                multivariateNode
                ->distribution = mvDistribution5
                ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvStochasticNodeExprEx; /* Prevent compiler warnings */
    rulemvStochasticNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return multivariateNode;
}
/* $ANTLR end mvStochasticNodeExpr */

/**
 * $ANTLR start censor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:102:1: censor : ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::censor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:3: ( ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:5: ( CENSORBEGINWITHC | CENSORBEGINWITHI ) ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
            if ( ((this->LA(1) >= CENSORBEGINWITHC) && (this->LA(1) <= CENSORBEGINWITHI)) )
            {
                this->consume();
                this->set_perror_recovery(false);
                 this->set_failedflag(false); 

            }
            else
            {
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                new ANTLR_Exception< BUGSParserImplTraits, MISMATCHED_SET_EXCEPTION, StreamType>( this->get_rec(), "" );
                this->get_exception()->set_expectingSet(NULL);

                goto rulecensorEx;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:41: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt4=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA4_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 1 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA4_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred7_BUGS>() )))
                		    {
                		        alt4=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt4=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 4 );
                		        ex->set_state( 2 );


                		        goto rulecensorEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt4=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 4 );
                    ex->set_state( 0 );


                    goto rulecensorEx;

                }

                switch (alt4)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:43: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_censor579);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:94: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_censor584);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulecensorEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_censor589);
            if  (this->hasException())
            {
                goto rulecensorEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecensorEx; /* Prevent compiler warnings */
    rulecensorEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end censor */

/**
 * $ANTLR start truncation
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:105:1: truncation : TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET ;
 */
void
BUGSParser::truncation()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:2: ( TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:4: TRUNCATIONBEGIN ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower ) CLOSEBRACKET
        {
             this->matchToken(TRUNCATIONBEGIN, &FOLLOW_TRUNCATIONBEGIN_in_truncation601);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:20: ( ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper | upperWithOptionalLower )
            {
                int alt5=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		{
                		    int LA5_1 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 1 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		{
                		    int LA5_2 = this->LA(2);
                		    if ( (this->msynpred( antlr3::ClassForwarder<synpred8_BUGS>() )))
                		    {
                		        alt5=1;
                		    }
                		    else if ( (true))
                		    {
                		        alt5=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 5 );
                		        ex->set_state( 2 );


                		        goto ruletruncationEx;

                		    }
                		}
                	}
                    break;
                case COMMA:
                	{
                		alt5=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 5 );
                    ex->set_state( 0 );


                    goto ruletruncationEx;

                }

                switch (alt5)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:23: ( uvNode | CONSTANTVALUE )=> lowerWithOptionalUpper
            	    {
            	        this->followPush(FOLLOW_lowerWithOptionalUpper_in_truncation614);
            	        lowerWithOptionalUpper();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:74: upperWithOptionalLower
            	    {
            	        this->followPush(FOLLOW_upperWithOptionalLower_in_truncation618);
            	        upperWithOptionalLower();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruletruncationEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_truncation623);
            if  (this->hasException())
            {
                goto ruletruncationEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruletruncationEx; /* Prevent compiler warnings */
    ruletruncationEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end truncation */

/**
 * $ANTLR start lowerWithOptionalUpper
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:109:1: lowerWithOptionalUpper : ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? ;
 */
void
BUGSParser::lowerWithOptionalUpper()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:2: ( ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:5: ( uvNode | CONSTANTVALUE ) COMMA ( uvNode | CONSTANTVALUE )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:5: ( uvNode | CONSTANTVALUE )
            {
                int alt6=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt6=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt6=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 6 );
                    ex->set_state( 0 );


                    goto rulelowerWithOptionalUpperEx;

                }

                switch (alt6)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper638);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper640);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_lowerWithOptionalUpper643);
            if  (this->hasException())
            {
                goto rulelowerWithOptionalUpperEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:34: ( uvNode | CONSTANTVALUE )?
            {
                int alt7=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt7=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt7=2;
                    	}
                        break;
                }

                switch (alt7)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:35: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_lowerWithOptionalUpper646);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:110:42: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_lowerWithOptionalUpper648);
            	        if  (this->hasException())
            	        {
            	            goto rulelowerWithOptionalUpperEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulelowerWithOptionalUpperEx; /* Prevent compiler warnings */
    rulelowerWithOptionalUpperEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end lowerWithOptionalUpper */

/**
 * $ANTLR start upperWithOptionalLower
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:113:1: upperWithOptionalLower : ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) ;
 */
void
BUGSParser::upperWithOptionalLower()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:2: ( ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE ) )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:5: ( uvNode | CONSTANTVALUE )? COMMA ( uvNode | CONSTANTVALUE )
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:5: ( uvNode | CONSTANTVALUE )?
            {
                int alt8=3;
                switch ( this->LA(1) )
                {
                    case NODENAME:
                    	{
                    		alt8=1;
                    	}
                        break;
                    case CONSTANTVALUE:
                    	{
                    		alt8=2;
                    	}
                        break;
                }

                switch (alt8)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:6: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower665);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:13: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower667);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

             this->matchToken(COMMA, &FOLLOW_COMMA_in_upperWithOptionalLower671);
            if  (this->hasException())
            {
                goto ruleupperWithOptionalLowerEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:35: ( uvNode | CONSTANTVALUE )
            {
                int alt9=2;
                switch ( this->LA(1) )
                {
                case NODENAME:
                	{
                		alt9=1;
                	}
                    break;
                case CONSTANTVALUE:
                	{
                		alt9=2;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 9 );
                    ex->set_state( 0 );


                    goto ruleupperWithOptionalLowerEx;

                }

                switch (alt9)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:36: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_upperWithOptionalLower674);
            	        uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:114:43: CONSTANTVALUE
            	    {
            	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_upperWithOptionalLower676);
            	        if  (this->hasException())
            	        {
            	            goto ruleupperWithOptionalLowerEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleupperWithOptionalLowerEx; /* Prevent compiler warnings */
    ruleupperWithOptionalLowerEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end upperWithOptionalLower */

/**
 * $ANTLR start logicalNodeExpr
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:117:1: logicalNodeExpr returns [LogicalNode* logicalNode = new LogicalNode()] : ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions );
 */
LogicalNode*
BUGSParser::logicalNodeExpr()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    LogicalNode* logicalNode;


    BUGSParser_uvNode_return uvNode6;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode6;

    BUGSParser_linkFunction_return linkFunction7;
    typedef	BUGSParser_linkFunction_return RETURN_TYPE_linkFunction7;

    std::vector<ExpressionNode*> exprWithNodesFunctions8;
    typedef	std::vector<ExpressionNode*> RETURN_TYPE_exprWithNodesFunctions8;

    BUGSParser_mvNode_return mvNode9;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_mvNode9;

    /* Initialize rule variables
     */
    logicalNode =  new LogicalNode();



    calculateNodeValue=false; 


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:2: ( ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions | mvNode LEFTPOINTER exprWithNodesFunctions )

            ANTLR_UINT32 alt11;

            alt11=2;

            {
                int LA11_0 = this->LA(1);
                if ( (LA11_0 == NODENAME))
                {
                    {
                        int LA11_1 = this->LA(2);
                        if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )))
                        {
                            alt11=1;
                        }
                        else if ( (true))
                        {
                            alt11=2;
                        }
                        else
                        {
                            if (this->get_backtracking()>0)
                            {
                                this->set_failedflag( true );
                                return logicalNode;
                            }


                            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                            ex->set_decisionNum( 11 );
                            ex->set_state( 1 );


                            goto rulelogicalNodeExprEx;

                        }
                    }
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == LOGITOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == CLOGLOGOPENBRACKET))
                {
                    alt11=1;
                }
                else if ( (this->msynpred( antlr3::ClassForwarder<synpred9_BUGS>() )) && (LA11_0 == PROBITOPENBRACKET))
                {
                    alt11=1;
                }
                else
                {
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return logicalNode;
                    }


                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 11 );
                    ex->set_state( 0 );


                    goto rulelogicalNodeExprEx;

                }
            }
            switch (alt11)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:4: ( uvNode | linkFunction )=> ( uvNode | linkFunction ) LEFTPOINTER exprWithNodesFunctions
        	    {
        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:125:2: ( uvNode | linkFunction )
        	        {
        	            int alt10=2;
        	            switch ( this->LA(1) )
        	            {
        	            case NODENAME:
        	            	{
        	            		alt10=1;
        	            	}
        	                break;
        	            case CLOGLOGOPENBRACKET:
        	            case LOGITOPENBRACKET:
        	            case LOGOPENBRACKET:
        	            case PROBITOPENBRACKET:
        	            	{
        	            		alt10=2;
        	            	}
        	                break;

        	            default:
        	                if (this->get_backtracking()>0)
        	                {
        	                    this->set_failedflag( true );
        	                    return logicalNode;
        	                }

        	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
        	                ex->set_decisionNum( 10 );
        	                ex->set_state( 0 );


        	                goto rulelogicalNodeExprEx;

        	            }

        	            switch (alt10)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:125:3: uvNode
        	        	    {
        	        	        this->followPush(FOLLOW_uvNode_in_logicalNodeExpr713);
        	        	        uvNode6=uvNode();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return logicalNode;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	            logicalNode
        	        	            ->nodename = (this->get_strstream()->toStringTT(uvNode6.start, uvNode6.stop))
        	        	            ; 
        	        	        }


        	        	    }
        	        	    break;
        	        	case 2:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:126:4: linkFunction
        	        	    {
        	        	        this->followPush(FOLLOW_linkFunction_in_logicalNodeExpr721);
        	        	        linkFunction7=linkFunction();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulelogicalNodeExprEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return logicalNode;
        	        	        }


        	        	        if ( this->get_backtracking()==0 )
        	        	        {
        	        	             logicalNode
        	        	            ->nodename = linkFunction7.nodename
        	        	            ; logicalNode
        	        	            ->functionname = linkFunction7.fname
        	        	            ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr728);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNode;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr730);
        	        exprWithNodesFunctions8=exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNode;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	             logicalNode
        	            ->expressionnodes = exprWithNodesFunctions8
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:128:5: mvNode LEFTPOINTER exprWithNodesFunctions
        	    {
        	        this->followPush(FOLLOW_mvNode_in_logicalNodeExpr738);
        	        mvNode9=mvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNode;
        	        }


        	         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_logicalNodeExpr740);
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNode;
        	        }


        	        this->followPush(FOLLOW_exprWithNodesFunctions_in_logicalNodeExpr742);
        	        exprWithNodesFunctions();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelogicalNodeExprEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return logicalNode;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            logicalNode
        	            ->nodename = (this->get_strstream()->toStringTT(mvNode9.start, mvNode9.stop))
        	            ; 
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelogicalNodeExprEx; /* Prevent compiler warnings */
    rulelogicalNodeExprEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
        else
        {
            {

                calculateNodeValue=true;

            }
        }

    return logicalNode;
}
/* $ANTLR end logicalNodeExpr */

/**
 * $ANTLR start linkFunction
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:131:1: linkFunction returns [std::string fname, std::string nodename] : ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET );
 */
BUGSParser_linkFunction_return
BUGSParser::linkFunction()
{
    BUGSParser_linkFunction_return retval(this);


    BUGSParser_uvNode_return uvNode10;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode10;

    BUGSParser_uvNode_return uvNode11;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode11;

    BUGSParser_uvNode_return uvNode12;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode12;

    BUGSParser_uvNode_return uvNode13;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode13;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:132:2: ( LOGOPENBRACKET uvNode CLOSEBRACKET | LOGITOPENBRACKET uvNode CLOSEBRACKET | CLOGLOGOPENBRACKET uvNode CLOSEBRACKET | PROBITOPENBRACKET uvNode CLOSEBRACKET )

            ANTLR_UINT32 alt12;

            alt12=4;

            switch ( this->LA(1) )
            {
            case LOGOPENBRACKET:
            	{
            		alt12=1;
            	}
                break;
            case LOGITOPENBRACKET:
            	{
            		alt12=2;
            	}
                break;
            case CLOGLOGOPENBRACKET:
            	{
            		alt12=3;
            	}
                break;
            case PROBITOPENBRACKET:
            	{
            		alt12=4;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 12 );
                ex->set_state( 0 );


                goto rulelinkFunctionEx;

            }

            switch (alt12)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:132:4: LOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGOPENBRACKET, &FOLLOW_LOGOPENBRACKET_in_linkFunction760);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction762);
        	        uvNode10=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction764);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.nodename= 
        	            (this->get_strstream()->toStringTT(uvNode10.start, uvNode10.stop))
        	            ;
        	             retval.fname= "LOG";

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:133:4: LOGITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(LOGITOPENBRACKET, &FOLLOW_LOGITOPENBRACKET_in_linkFunction772);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction774);
        	        uvNode11=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction776);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.nodename= 
        	            (this->get_strstream()->toStringTT(uvNode11.start, uvNode11.stop))
        	            ;
        	             retval.fname= "LOGIT";

        	        }


        	    }
        	    break;
        	case 3:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:134:4: CLOGLOGOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(CLOGLOGOPENBRACKET, &FOLLOW_CLOGLOGOPENBRACKET_in_linkFunction783);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction785);
        	        uvNode12=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction787);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.nodename= 
        	            (this->get_strstream()->toStringTT(uvNode12.start, uvNode12.stop))
        	            ;
        	             retval.fname= "CLOGLOG";

        	        }


        	    }
        	    break;
        	case 4:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:135:4: PROBITOPENBRACKET uvNode CLOSEBRACKET
        	    {
        	         this->matchToken(PROBITOPENBRACKET, &FOLLOW_PROBITOPENBRACKET_in_linkFunction794);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        this->followPush(FOLLOW_uvNode_in_linkFunction796);
        	        uvNode13=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_linkFunction798);
        	        if  (this->hasException())
        	        {
        	            goto rulelinkFunctionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            retval.nodename= 
        	            (this->get_strstream()->toStringTT(uvNode13.start, uvNode13.stop))
        	            ;
        	             retval.fname= "PROBIT";

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulelinkFunctionEx; /* Prevent compiler warnings */
    rulelinkFunctionEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end linkFunction */

/**
 * $ANTLR start exprWithNodesFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:138:1: exprWithNodesFunctions returns [std::vector<ExpressionNode*> enodes] : (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )? ;
 */
std::vector<ExpressionNode*>
BUGSParser::exprWithNodesFunctions()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::vector<ExpressionNode*> enodes;


    float ue1;
    typedef	float RETURN_TYPE_ue1;

    float ue2;
    typedef	float RETURN_TYPE_ue2;

    std::vector<ExpressionNode*> ex1;
    typedef	std::vector<ExpressionNode*> RETURN_TYPE_ex1;

    std::vector<ExpressionNode*> ex2;
    typedef	std::vector<ExpressionNode*> RETURN_TYPE_ex2;

    BUGSParser_uvNode_return uvNode14;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode14;

    BUGSParser_scalarFunctions_return scalarFunctions15;
    typedef	BUGSParser_scalarFunctions_return RETURN_TYPE_scalarFunctions15;

    BUGSParser_vectorFunctions_return vectorFunctions16;
    typedef	BUGSParser_vectorFunctions_return RETURN_TYPE_vectorFunctions16;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:139:2: ( (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:139:4: (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET ) ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:139:4: (ue1= unaryExpression | uvNode | OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET | scalarFunctions | vectorFunctions | OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET )
            {
                int alt13=6;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                	{
                		alt13=1;
                	}
                    break;
                case NODENAME:
                	{
                		alt13=2;
                	}
                    break;
                case OPENBRACKET:
                	{
                		switch ( this->LA(2) )
                		{
                		case MINUS:
                			{
                				alt13=3;
                			}
                		    break;
                		case ABSOPENBRACKET:
                		case CONSTANTINT:
                		case CONSTANTVALUE:
                		case INVERSEOPENBRACKET:
                		case NODENAME:
                		case OPENBRACKET:
                			{
                				alt13=6;
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return enodes;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 13 );
                		    ex->set_state( 3 );


                		    goto ruleexprWithNodesFunctionsEx;

                		}

                	}
                    break;
                case ABSOPENBRACKET:
                	{
                		alt13=4;
                	}
                    break;
                case INVERSEOPENBRACKET:
                	{
                		alt13=5;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return enodes;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 13 );
                    ex->set_state( 0 );


                    goto ruleexprWithNodesFunctionsEx;

                }

                switch (alt13)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:139:5: ue1= unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions818);
            	        ue1=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            stringstream ss (stringstream::in | stringstream::out); ss<< ue1
            	            ; enodes
            	            .push_back(new ExpressionNode(ss.str(), NUMBER));
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:140:4: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_exprWithNodesFunctions825);
            	        uvNode14=uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            enodes
            	            .push_back(new ExpressionNode((this->get_strstream()->toStringTT(uvNode14.start, uvNode14.stop))
            	            , NODE));
            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:141:4: OPENBRACKET MINUS ue2= unaryExpression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions832);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions834);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        this->followPush(FOLLOW_unaryExpression_in_exprWithNodesFunctions838);
            	        ue2=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions841);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            stringstream ss (stringstream::in | stringstream::out); ss<< -ue2
            	            ; enodes
            	            .push_back(new ExpressionNode(ss.str(), NUMBER));
            	        }


            	    }
            	    break;
            	case 4:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:142:4: scalarFunctions
            	    {
            	        this->followPush(FOLLOW_scalarFunctions_in_exprWithNodesFunctions848);
            	        scalarFunctions15=scalarFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            enodes
            	            .push_back(new ExpressionNode((this->get_strstream()->toStringTT(scalarFunctions15.start, scalarFunctions15.stop))
            	            , FUNCTION));
            	        }


            	    }
            	    break;
            	case 5:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:143:4: vectorFunctions
            	    {
            	        this->followPush(FOLLOW_vectorFunctions_in_exprWithNodesFunctions855);
            	        vectorFunctions16=vectorFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            enodes
            	            .push_back(new ExpressionNode((this->get_strstream()->toStringTT(vectorFunctions16.start, vectorFunctions16.stop))
            	            , FUNCTION));
            	        }


            	    }
            	    break;
            	case 6:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:144:4: OPENBRACKET ex1= exprWithNodesFunctions CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_exprWithNodesFunctions862);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions866);
            	        ex1=exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_exprWithNodesFunctions868);
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            enodes
            	            .insert(enodes
            	            .end(),ex1
            	            .begin(), ex1
            	            .end());
            	        }


            	    }
            	    break;

                }
            }

            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:145:2: ( ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions )?
            {
                int alt15=2;
                switch ( this->LA(1) )
                {
                    case DIV:
                    case MINUS:
                    case MULT:
                    case PLUS:
                    	{
                    		alt15=1;
                    	}
                        break;
                }

                switch (alt15)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:145:3: ( PLUS | MINUS | MULT | DIV ) ex2= exprWithNodesFunctions
            	    {
            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:145:3: ( PLUS | MINUS | MULT | DIV )
            	        {
            	            int alt14=4;
            	            switch ( this->LA(1) )
            	            {
            	            case PLUS:
            	            	{
            	            		alt14=1;
            	            	}
            	                break;
            	            case MINUS:
            	            	{
            	            		alt14=2;
            	            	}
            	                break;
            	            case MULT:
            	            	{
            	            		alt14=3;
            	            	}
            	                break;
            	            case DIV:
            	            	{
            	            		alt14=4;
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return enodes;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 14 );
            	                ex->set_state( 0 );


            	                goto ruleexprWithNodesFunctionsEx;

            	            }

            	            switch (alt14)
            	            {
            	        	case 1:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:145:4: PLUS
            	        	    {
            	        	         this->matchToken(PLUS, &FOLLOW_PLUS_in_exprWithNodesFunctions878);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexprWithNodesFunctionsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return enodes;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            enodes
            	        	            .push_back(new ExpressionNode("+", OPERATOR));
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:145:65: MINUS
            	        	    {
            	        	         this->matchToken(MINUS, &FOLLOW_MINUS_in_exprWithNodesFunctions882);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexprWithNodesFunctionsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return enodes;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            enodes
            	        	            .push_back(new ExpressionNode("-", OPERATOR));
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:146:4: MULT
            	        	    {
            	        	         this->matchToken(MULT, &FOLLOW_MULT_in_exprWithNodesFunctions889);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexprWithNodesFunctionsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return enodes;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            enodes
            	        	            .push_back(new ExpressionNode("*", OPERATOR));
            	        	        }


            	        	    }
            	        	    break;
            	        	case 4:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:146:66: DIV
            	        	    {
            	        	         this->matchToken(DIV, &FOLLOW_DIV_in_exprWithNodesFunctions894);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleexprWithNodesFunctionsEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return enodes;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            enodes
            	        	            .push_back(new ExpressionNode("/", OPERATOR));
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        this->followPush(FOLLOW_exprWithNodesFunctions_in_exprWithNodesFunctions903);
            	        ex2=exprWithNodesFunctions();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexprWithNodesFunctionsEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return enodes;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            enodes
            	            .insert(enodes
            	            .end(), ex2
            	            .begin(), ex2
            	            .end());
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexprWithNodesFunctionsEx; /* Prevent compiler warnings */
    ruleexprWithNodesFunctionsEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return enodes;
}
/* $ANTLR end exprWithNodesFunctions */

/**
 * $ANTLR start uvNode
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:151:1: uvNode returns [std::string name, vector<int> parameters] : NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? ;
 */
BUGSParser_uvNode_return
BUGSParser::uvNode()
{
    BUGSParser_uvNode_return retval(this);


    const CommonTokenType*    NODENAME17;
    float exp1;
    typedef	float RETURN_TYPE_exp1;

    float exp2;
    typedef	float RETURN_TYPE_exp2;

    /* Initialize rule variables
     */

    NODENAME17       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:152:2: ( NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:152:4: NODENAME ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
        {
            NODENAME17 =  this->matchToken(NODENAME, &FOLLOW_NODENAME_in_uvNode924);
            if  (this->hasException())
            {
                goto ruleuvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name= (NODENAME17->getText());

            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:153:2: ( OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET )?
            {
                int alt17=2;
                switch ( this->LA(1) )
                {
                    case OPENSQUAREBRACKET:
                    	{
                    		alt17=1;
                    	}
                        break;
                }

                switch (alt17)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:154:2: OPENSQUAREBRACKET exp1= expression ( COMMA exp2= expression )* CLOSESQUAREBRACKET
            	    {
            	         this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_uvNode932);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        this->followPush(FOLLOW_expression_in_uvNode936);
            	        exp1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            retval.parameters
            	            .push_back(int (exp1
            	            ));
            	        }


            	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:155:2: ( COMMA exp2= expression )*

            	        for (;;)
            	        {
            	            int alt16=2;
            	            switch ( this->LA(1) )
            	            {
            	            case COMMA:
            	            	{
            	            		alt16=1;
            	            	}
            	                break;

            	            }

            	            switch (alt16)
            	            {
            	        	case 1:
            	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:156:2: COMMA exp2= expression
            	        	    {
            	        	         this->matchToken(COMMA, &FOLLOW_COMMA_in_uvNode945);
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        this->followPush(FOLLOW_expression_in_uvNode949);
            	        	        exp2=expression();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto ruleuvNodeEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return retval;
            	        	        }


            	        	        if ( this->get_backtracking()==0 )
            	        	        {
            	        	            retval.parameters
            	        	            .push_back(int (exp2
            	        	            ));
            	        	        }


            	        	    }
            	        	    break;

            	        	default:
            	        	    goto loop16;	/* break out of the loop */
            	        	    break;
            	            }
            	        }
            	        loop16: ; /* Jump out to here if this rule does not match */


            	         this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_uvNode960);
            	        if  (this->hasException())
            	        {
            	            goto ruleuvNodeEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return retval;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleuvNodeEx; /* Prevent compiler warnings */
    ruleuvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end uvNode */

/**
 * $ANTLR start mvNode
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:161:1: mvNode : NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET ;
 */
BUGSParser_mvNode_return
BUGSParser::mvNode()
{
    BUGSParser_mvNode_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:2: ( NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:162:4: NODENAME OPENSQUAREBRACKET multiIndices CLOSESQUAREBRACKET
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_mvNode976);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENSQUAREBRACKET, &FOLLOW_OPENSQUAREBRACKET_in_mvNode978);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_multiIndices_in_mvNode980);
            multiIndices();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSESQUAREBRACKET, &FOLLOW_CLOSESQUAREBRACKET_in_mvNode982);
            if  (this->hasException())
            {
                goto rulemvNodeEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemvNodeEx; /* Prevent compiler warnings */
    rulemvNodeEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end mvNode */

/**
 * $ANTLR start expression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:165:1: expression returns [float expvalue] : ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )? ;
 */
float
BUGSParser::expression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    float expvalue;


    float e5;
    typedef	float RETURN_TYPE_e5;

    float e1;
    typedef	float RETURN_TYPE_e1;

    float e2;
    typedef	float RETURN_TYPE_e2;

    float e3;
    typedef	float RETURN_TYPE_e3;

    float e4;
    typedef	float RETURN_TYPE_e4;

    float unaryExpression18;
    typedef	float RETURN_TYPE_unaryExpression18;

    BUGSParser_uvNode_return uvNode19;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode19;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:2: ( ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )? )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:4: ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET ) ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )?
        {
            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:4: ( unaryExpression | uvNode | OPENBRACKET e5= expression CLOSEBRACKET )
            {
                int alt18=3;
                switch ( this->LA(1) )
                {
                case CONSTANTINT:
                case CONSTANTVALUE:
                	{
                		alt18=1;
                	}
                    break;
                case NODENAME:
                	{
                		alt18=2;
                	}
                    break;
                case OPENBRACKET:
                	{
                		alt18=3;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return expvalue;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 18 );
                    ex->set_state( 0 );


                    goto ruleexpressionEx;

                }

                switch (alt18)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:166:5: unaryExpression
            	    {
            	        this->followPush(FOLLOW_unaryExpression_in_expression998);
            	        unaryExpression18=unaryExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue=
            	            unaryExpression18
            	            ;

            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:167:4: uvNode
            	    {
            	        this->followPush(FOLLOW_uvNode_in_expression1006);
            	        uvNode19=uvNode();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            if(calculateNodeValue) expvalue= data->getData(
            	            uvNode19.name
            	            , uvNode19.parameters
            	            );

            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:168:4: OPENBRACKET e5= expression CLOSEBRACKET
            	    {
            	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_expression1013);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression1017);
            	        e5=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_expression1019);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue= 
            	            e5
            	            ;

            	        }


            	    }
            	    break;

                }
            }

            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:169:2: ( PLUS e1= expression | MINUS e2= expression | MULT e3= expression | DIV e4= expression )?
            {
                int alt19=5;
                switch ( this->LA(1) )
                {
                    case PLUS:
                    	{
                    		alt19=1;
                    	}
                        break;
                    case MINUS:
                    	{
                    		alt19=2;
                    	}
                        break;
                    case MULT:
                    	{
                    		alt19=3;
                    	}
                        break;
                    case DIV:
                    	{
                    		alt19=4;
                    	}
                        break;
                }

                switch (alt19)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:169:3: PLUS e1= expression
            	    {
            	         this->matchToken(PLUS, &FOLLOW_PLUS_in_expression1026);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression1030);
            	        e1=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue
            	            +=e1
            	            ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:170:3: MINUS e2= expression
            	    {
            	         this->matchToken(MINUS, &FOLLOW_MINUS_in_expression1036);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression1040);
            	        e2=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue
            	            -=e2
            	            ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:171:3: MULT e3= expression
            	    {
            	         this->matchToken(MULT, &FOLLOW_MULT_in_expression1046);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression1050);
            	        e3=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue
            	            *=e3
            	            ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:172:3: DIV e4= expression
            	    {
            	         this->matchToken(DIV, &FOLLOW_DIV_in_expression1056);
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        this->followPush(FOLLOW_expression_in_expression1060);
            	        e4=expression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleexpressionEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return expvalue;
            	        }


            	        if ( this->get_backtracking()==0 )
            	        {
            	            expvalue
            	            /=e4
            	            ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexpressionEx; /* Prevent compiler warnings */
    ruleexpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return expvalue;
}
/* $ANTLR end expression */

/**
 * $ANTLR start unaryExpression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:175:1: unaryExpression returns [float uexpvalue] : ( CONSTANTINT | CONSTANTVALUE );
 */
float
BUGSParser::unaryExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    float uexpvalue;


    const CommonTokenType*    CONSTANTINT20;
    const CommonTokenType*    CONSTANTVALUE21;

    /* Initialize rule variables
     */

    CONSTANTINT20       = NULL;
    CONSTANTVALUE21       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:176:2: ( CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt20;

            alt20=2;

            switch ( this->LA(1) )
            {
            case CONSTANTINT:
            	{
            		alt20=1;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt20=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return uexpvalue;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 20 );
                ex->set_state( 0 );


                goto ruleunaryExpressionEx;

            }

            switch (alt20)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:176:4: CONSTANTINT
        	    {
        	        CONSTANTINT20 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_unaryExpression1079);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atoi((CONSTANTINT20->getText()).c_str());

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:177:4: CONSTANTVALUE
        	    {
        	        CONSTANTVALUE21 =  this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_unaryExpression1087);
        	        if  (this->hasException())
        	        {
        	            goto ruleunaryExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uexpvalue;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uexpvalue= ::atof((CONSTANTVALUE21->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleunaryExpressionEx; /* Prevent compiler warnings */
    ruleunaryExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uexpvalue;
}
/* $ANTLR end unaryExpression */

/**
 * $ANTLR start multiIndices
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:179:1: multiIndices : multiDimExpression ( COMMA multiDimExpression )* ;
 */
void
BUGSParser::multiIndices()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:2: ( multiDimExpression ( COMMA multiDimExpression )* )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:4: multiDimExpression ( COMMA multiDimExpression )*
        {
            this->followPush(FOLLOW_multiDimExpression_in_multiIndices1100);
            multiDimExpression();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultiIndicesEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:23: ( COMMA multiDimExpression )*

            for (;;)
            {
                int alt21=2;
                switch ( this->LA(1) )
                {
                case COMMA:
                	{
                		alt21=1;
                	}
                    break;

                }

                switch (alt21)
                {
            	case 1:
            	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:180:24: COMMA multiDimExpression
            	    {
            	         this->matchToken(COMMA, &FOLLOW_COMMA_in_multiIndices1103);
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        this->followPush(FOLLOW_multiDimExpression_in_multiIndices1105);
            	        multiDimExpression();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulemultiIndicesEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

            	default:
            	    goto loop21;	/* break out of the loop */
            	    break;
                }
            }
            loop21: ; /* Jump out to here if this rule does not match */


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultiIndicesEx; /* Prevent compiler warnings */
    rulemultiIndicesEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiIndices */

/**
 * $ANTLR start multiDimExpression
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:183:1: multiDimExpression : ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? );
 */
void
BUGSParser::multiDimExpression()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:2: ( ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET | expression ( COLON expression )? )

            ANTLR_UINT32 alt23;

            alt23=2;

            switch ( this->LA(1) )
            {
            case OPENBRACKET:
            	{
            		{
            		    int LA23_1 = this->LA(2);
            		    if ( (this->msynpred( antlr3::ClassForwarder<synpred10_BUGS>() )))
            		    {
            		        alt23=1;
            		    }
            		    else if ( (true))
            		    {
            		        alt23=2;
            		    }
            		    else
            		    {
            		        if (this->get_backtracking()>0)
            		        {
            		            this->set_failedflag( true );
            		            return ;
            		        }


            		        ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            		        ex->set_decisionNum( 23 );
            		        ex->set_state( 1 );


            		        goto rulemultiDimExpressionEx;

            		    }
            		}
            	}
                break;
            case CONSTANTINT:
            case CONSTANTVALUE:
            case NODENAME:
            	{
            		alt23=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return ;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 23 );
                ex->set_state( 0 );


                goto rulemultiDimExpressionEx;

            }

            switch (alt23)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:4: ( OPENBRACKET expression COLON )=> OPENBRACKET expression COLON expression CLOSEBRACKET
        	    {
        	         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_multiDimExpression1129);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1131);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1133);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        this->followPush(FOLLOW_expression_in_multiDimExpression1135);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	         this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multiDimExpression1137);
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:185:4: expression ( COLON expression )?
        	    {
        	        this->followPush(FOLLOW_expression_in_multiDimExpression1142);
        	        expression();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemultiDimExpressionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return ;
        	        }


        	        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:185:15: ( COLON expression )?
        	        {
        	            int alt22=2;
        	            switch ( this->LA(1) )
        	            {
        	                case COLON:
        	                	{
        	                		alt22=1;
        	                	}
        	                    break;
        	            }

        	            switch (alt22)
        	            {
        	        	case 1:
        	        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:185:16: COLON expression
        	        	    {
        	        	         this->matchToken(COLON, &FOLLOW_COLON_in_multiDimExpression1145);
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	        this->followPush(FOLLOW_expression_in_multiDimExpression1147);
        	        	        expression();

        	        	        this->followPop();
        	        	        if  (this->hasException())
        	        	        {
        	        	            goto rulemultiDimExpressionEx;
        	        	        }
        	        	        if (this->hasFailed())
        	        	        {
        	        	            return ;
        	        	        }


        	        	    }
        	        	    break;

        	            }
        	        }

        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemultiDimExpressionEx; /* Prevent compiler warnings */
    rulemultiDimExpressionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end multiDimExpression */

/**
 * $ANTLR start startFor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:188:1: startFor returns [std::string loopvariable, int loopbegin, int loopend] : FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE ;
 */
BUGSParser_startFor_return
BUGSParser::startFor()
{
    BUGSParser_startFor_return retval(this);


    const CommonTokenType*    OPENBRACE25;
    BUGSParser_loopVariable_return loopVariable22;
    typedef	BUGSParser_loopVariable_return RETURN_TYPE_loopVariable22;

    int loopBegin23;
    typedef	int RETURN_TYPE_loopBegin23;

    int loopEnd24;
    typedef	int RETURN_TYPE_loopEnd24;

    /* Initialize rule variables
     */

    OPENBRACE25       = NULL;
    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:189:2: ( FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:189:4: FORSTART OPENBRACKET loopVariable IN loopBegin COLON loopEnd CLOSEBRACKET OPENBRACE
        {
             this->matchToken(FORSTART, &FOLLOW_FORSTART_in_startFor1164);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_startFor1166);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopVariable_in_startFor1168);
            loopVariable22=loopVariable();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(IN, &FOLLOW_IN_in_startFor1170);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopBegin_in_startFor1172);
            loopBegin23=loopBegin();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(COLON, &FOLLOW_COLON_in_startFor1174);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_loopEnd_in_startFor1176);
            loopEnd24=loopEnd();

            this->followPop();
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_startFor1178);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            OPENBRACE25 =  this->matchToken(OPENBRACE, &FOLLOW_OPENBRACE_in_startFor1180);
            if  (this->hasException())
            {
                goto rulestartForEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                loopvariable[(this->get_strstream()->toStringTT(loopVariable22.start, loopVariable22.stop))
                ] = loopBegin23
                ; while(loopvariable[(this->get_strstream()->toStringTT(loopVariable22.start, loopVariable22.stop))
                ] <= loopEnd24
                ) (OPENBRACE25->getText());  loopvariable[
                (this->get_strstream()->toStringTT(loopVariable22.start, loopVariable22.stop))
                ]++; 
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulestartForEx; /* Prevent compiler warnings */
    rulestartForEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end startFor */

/**
 * $ANTLR start endFor
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:193:1: endFor : CLOSEBRACE ;
 */
void
BUGSParser::endFor()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:194:2: ( CLOSEBRACE )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:194:4: CLOSEBRACE
        {
             this->matchToken(CLOSEBRACE, &FOLLOW_CLOSEBRACE_in_endFor1196);
            if  (this->hasException())
            {
                goto ruleendForEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleendForEx; /* Prevent compiler warnings */
    ruleendForEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end endFor */

/**
 * $ANTLR start loopVariable
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:197:1: loopVariable : NODENAME ;
 */
BUGSParser_loopVariable_return
BUGSParser::loopVariable()
{
    BUGSParser_loopVariable_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:198:2: ( NODENAME )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:198:4: NODENAME
        {
             this->matchToken(NODENAME, &FOLLOW_NODENAME_in_loopVariable1208);
            if  (this->hasException())
            {
                goto ruleloopVariableEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleloopVariableEx; /* Prevent compiler warnings */
    ruleloopVariableEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end loopVariable */

/**
 * $ANTLR start loopBegin
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:201:1: loopBegin returns [int value] : ( uvNode | CONSTANTINT );
 */
int
BUGSParser::loopBegin()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int value;


    const CommonTokenType*    CONSTANTINT27;
    BUGSParser_uvNode_return uvNode26;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode26;

    /* Initialize rule variables
     */

    CONSTANTINT27       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:202:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt24;

            alt24=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt24=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt24=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return value;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 24 );
                ex->set_state( 0 );


                goto ruleloopBeginEx;

            }

            switch (alt24)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:202:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopBegin1223);
        	        uvNode26=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= data->getData(
        	            uvNode26.name
        	            , uvNode26.parameters
        	            );

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:203:4: CONSTANTINT
        	    {
        	        CONSTANTINT27 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopBegin1230);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopBeginEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= ::atoi((CONSTANTINT27->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopBeginEx; /* Prevent compiler warnings */
    ruleloopBeginEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return value;
}
/* $ANTLR end loopBegin */

/**
 * $ANTLR start loopEnd
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:206:1: loopEnd returns [int value] : ( uvNode | CONSTANTINT );
 */
int
BUGSParser::loopEnd()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    int value;


    const CommonTokenType*    CONSTANTINT29;
    BUGSParser_uvNode_return uvNode28;
    typedef	BUGSParser_uvNode_return RETURN_TYPE_uvNode28;

    /* Initialize rule variables
     */

    CONSTANTINT29       = NULL;


 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:207:2: ( uvNode | CONSTANTINT )

            ANTLR_UINT32 alt25;

            alt25=2;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt25=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt25=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return value;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 25 );
                ex->set_state( 0 );


                goto ruleloopEndEx;

            }

            switch (alt25)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:207:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_loopEnd1247);
        	        uvNode28=uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= data->getData(
        	            uvNode28.name
        	            , uvNode28.parameters
        	            );

        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:208:4: CONSTANTINT
        	    {
        	        CONSTANTINT29 =  this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_loopEnd1255);
        	        if  (this->hasException())
        	        {
        	            goto ruleloopEndEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return value;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            value= ::atoi((CONSTANTINT29->getText()).c_str());

        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleloopEndEx; /* Prevent compiler warnings */
    ruleloopEndEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return value;
}
/* $ANTLR end loopEnd */

/**
 * $ANTLR start scalarFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:226:1: scalarFunctions : ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET ;
 */
BUGSParser_scalarFunctions_return
BUGSParser::scalarFunctions()
{
    BUGSParser_scalarFunctions_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:227:2: ( ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:227:4: ABSOPENBRACKET exprWithNodesFunctions CLOSEBRACKET
        {
             this->matchToken(ABSOPENBRACKET, &FOLLOW_ABSOPENBRACKET_in_scalarFunctions1458);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_exprWithNodesFunctions_in_scalarFunctions1460);
            exprWithNodesFunctions();

            this->followPop();
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_scalarFunctions1462);
            if  (this->hasException())
            {
                goto rulescalarFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulescalarFunctionsEx; /* Prevent compiler warnings */
    rulescalarFunctionsEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end scalarFunctions */

/**
 * $ANTLR start vectorFunctions
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:230:1: vectorFunctions : INVERSEOPENBRACKET mvNode CLOSEBRACKET ;
 */
BUGSParser_vectorFunctions_return
BUGSParser::vectorFunctions()
{
    BUGSParser_vectorFunctions_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:231:2: ( INVERSEOPENBRACKET mvNode CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:231:4: INVERSEOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(INVERSEOPENBRACKET, &FOLLOW_INVERSEOPENBRACKET_in_vectorFunctions1474);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            this->followPush(FOLLOW_mvNode_in_vectorFunctions1476);
            mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_vectorFunctions1478);
            if  (this->hasException())
            {
                goto rulevectorFunctionsEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulevectorFunctionsEx; /* Prevent compiler warnings */
    rulevectorFunctionsEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end vectorFunctions */

/**
 * $ANTLR start uvDistribution
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:234:1: uvDistribution returns [UnivariateDistribution* uvdis = new UnivariateDistribution()] : ( discreteUnivariate | continuousUnivariate );
 */
UnivariateDistribution*
BUGSParser::uvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    UnivariateDistribution* uvdis;


    BUGSParser_discreteUnivariate_return discreteUnivariate30;
    typedef	BUGSParser_discreteUnivariate_return RETURN_TYPE_discreteUnivariate30;

    BUGSParser_continuousUnivariate_return continuousUnivariate31;
    typedef	BUGSParser_continuousUnivariate_return RETURN_TYPE_continuousUnivariate31;

    /* Initialize rule variables
     */
    uvdis =  new UnivariateDistribution();



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:235:2: ( discreteUnivariate | continuousUnivariate )

            ANTLR_UINT32 alt26;

            alt26=2;

            switch ( this->LA(1) )
            {
            case BERNOULLIOPENBRACKET:
            	{
            		alt26=1;
            	}
                break;
            case BETAOPENBRACKET:
            	{
            		alt26=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return uvdis;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 26 );
                ex->set_state( 0 );


                goto ruleuvDistributionEx;

            }

            switch (alt26)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:235:4: discreteUnivariate
        	    {
        	        this->followPush(FOLLOW_discreteUnivariate_in_uvDistribution1494);
        	        discreteUnivariate30=discreteUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uvdis;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uvdis
        	            ->name = discreteUnivariate30.name
        	            ; uvdis
        	            ->parameters = discreteUnivariate30.parameters
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:236:4: continuousUnivariate
        	    {
        	        this->followPush(FOLLOW_continuousUnivariate_in_uvDistribution1501);
        	        continuousUnivariate31=continuousUnivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruleuvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return uvdis;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            uvdis
        	            ->name = continuousUnivariate31.name
        	            ; uvdis
        	            ->parameters = continuousUnivariate31.parameters
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruleuvDistributionEx; /* Prevent compiler warnings */
    ruleuvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return uvdis;
}
/* $ANTLR end uvDistribution */

/**
 * $ANTLR start mvDistribution
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:239:1: mvDistribution returns [MultivariateDistribution* mvdis = new MultivariateDistribution()] : ( discreteMultivariate | continuousMultivariate );
 */
MultivariateDistribution*
BUGSParser::mvDistribution()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    MultivariateDistribution* mvdis;


    BUGSParser_discreteMultivariate_return discreteMultivariate32;
    typedef	BUGSParser_discreteMultivariate_return RETURN_TYPE_discreteMultivariate32;

    BUGSParser_continuousMultivariate_return continuousMultivariate33;
    typedef	BUGSParser_continuousMultivariate_return RETURN_TYPE_continuousMultivariate33;

    /* Initialize rule variables
     */
    mvdis =  new MultivariateDistribution();



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:240:2: ( discreteMultivariate | continuousMultivariate )

            ANTLR_UINT32 alt27;

            alt27=2;

            switch ( this->LA(1) )
            {
            case MUTLTINOMIALOPENBRACKET:
            	{
            		alt27=1;
            	}
                break;
            case DIRICHLETOPENBRACKET:
            	{
            		alt27=2;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return mvdis;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 27 );
                ex->set_state( 0 );


                goto rulemvDistributionEx;

            }

            switch (alt27)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:240:4: discreteMultivariate
        	    {
        	        this->followPush(FOLLOW_discreteMultivariate_in_mvDistribution1518);
        	        discreteMultivariate32=discreteMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return mvdis;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            mvdis
        	            ->name = discreteMultivariate32.name
        	            ; mvdis
        	            ->parameters = discreteMultivariate32.parameters
        	            ;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:241:4: continuousMultivariate
        	    {
        	        this->followPush(FOLLOW_continuousMultivariate_in_mvDistribution1525);
        	        continuousMultivariate33=continuousMultivariate();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto rulemvDistributionEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return mvdis;
        	        }


        	        if ( this->get_backtracking()==0 )
        	        {
        	            mvdis
        	            ->name = continuousMultivariate33.name
        	            ; mvdis
        	            ->parameters = continuousMultivariate33.parameters
        	            ;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto rulemvDistributionEx; /* Prevent compiler warnings */
    rulemvDistributionEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return mvdis;
}
/* $ANTLR end mvDistribution */

/**
 * $ANTLR start discreteUnivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:244:1: discreteUnivariate returns [std::string name, std::list<string> parameters] : bernoulli ;
 */
BUGSParser_discreteUnivariate_return
BUGSParser::discreteUnivariate()
{
    BUGSParser_discreteUnivariate_return retval(this);


    std::list<string> bernoulli34;
    typedef	std::list<string> RETURN_TYPE_bernoulli34;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:245:2: ( bernoulli )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:245:4: bernoulli
        {
            this->followPush(FOLLOW_bernoulli_in_discreteUnivariate1542);
            bernoulli34=bernoulli();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteUnivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="BERNOULLI";
                 retval.parameters=
                bernoulli34
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteUnivariateEx; /* Prevent compiler warnings */
    rulediscreteUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteUnivariate */

/**
 * $ANTLR start continuousUnivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:248:1: continuousUnivariate returns [std::string name, std::list<string> parameters] : beta ;
 */
BUGSParser_continuousUnivariate_return
BUGSParser::continuousUnivariate()
{
    BUGSParser_continuousUnivariate_return retval(this);


    std::list<string> beta35;
    typedef	std::list<string> RETURN_TYPE_beta35;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:249:2: ( beta )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:249:4: beta
        {
            this->followPush(FOLLOW_beta_in_continuousUnivariate1559);
            beta35=beta();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousUnivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="BETA";
                 retval.parameters=
                beta35
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousUnivariateEx; /* Prevent compiler warnings */
    rulecontinuousUnivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousUnivariate */

/**
 * $ANTLR start discreteMultivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:252:1: discreteMultivariate returns [std::string name, std::list<string> parameters] : multinomial ;
 */
BUGSParser_discreteMultivariate_return
BUGSParser::discreteMultivariate()
{
    BUGSParser_discreteMultivariate_return retval(this);


    std::list<string> multinomial36;
    typedef	std::list<string> RETURN_TYPE_multinomial36;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:253:2: ( multinomial )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:253:4: multinomial
        {
            this->followPush(FOLLOW_multinomial_in_discreteMultivariate1576);
            multinomial36=multinomial();

            this->followPop();
            if  (this->hasException())
            {
                goto rulediscreteMultivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="MULTINOMIAL";
                 retval.parameters=
                multinomial36
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulediscreteMultivariateEx; /* Prevent compiler warnings */
    rulediscreteMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end discreteMultivariate */

/**
 * $ANTLR start continuousMultivariate
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:256:1: continuousMultivariate returns [std::string name, std::list<string> parameters] : dirichlet ;
 */
BUGSParser_continuousMultivariate_return
BUGSParser::continuousMultivariate()
{
    BUGSParser_continuousMultivariate_return retval(this);


    std::list<string> dirichlet37;
    typedef	std::list<string> RETURN_TYPE_dirichlet37;

    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:257:2: ( dirichlet )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:257:4: dirichlet
        {
            this->followPush(FOLLOW_dirichlet_in_continuousMultivariate1594);
            dirichlet37=dirichlet();

            this->followPop();
            if  (this->hasException())
            {
                goto rulecontinuousMultivariateEx;
            }
            if (this->hasFailed())
            {
                return retval;
            }


            if ( this->get_backtracking()==0 )
            {
                retval.name="DIRICHLET";
                 retval.parameters=
                dirichlet37
                ;

            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulecontinuousMultivariateEx; /* Prevent compiler warnings */
    rulecontinuousMultivariateEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end continuousMultivariate */

/**
 * $ANTLR start distributionParameter
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:260:1: distributionParameter : ( uvNode | CONSTANTINT | CONSTANTVALUE );
 */
BUGSParser_distributionParameter_return
BUGSParser::distributionParameter()
{
    BUGSParser_distributionParameter_return retval(this);


    /* Initialize rule variables
     */

    retval.call_start_placeholder(); 



 
    {
        {
            //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:261:2: ( uvNode | CONSTANTINT | CONSTANTVALUE )

            ANTLR_UINT32 alt28;

            alt28=3;

            switch ( this->LA(1) )
            {
            case NODENAME:
            	{
            		alt28=1;
            	}
                break;
            case CONSTANTINT:
            	{
            		alt28=2;
            	}
                break;
            case CONSTANTVALUE:
            	{
            		alt28=3;
            	}
                break;

            default:
                if (this->get_backtracking()>0)
                {
                    this->set_failedflag( true );
                    return retval;
                }

                ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                ex->set_decisionNum( 28 );
                ex->set_state( 0 );


                goto ruledistributionParameterEx;

            }

            switch (alt28)
            {
        	case 1:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:261:4: uvNode
        	    {
        	        this->followPush(FOLLOW_uvNode_in_distributionParameter1608);
        	        uvNode();

        	        this->followPop();
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 2:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:261:13: CONSTANTINT
        	    {
        	         this->matchToken(CONSTANTINT, &FOLLOW_CONSTANTINT_in_distributionParameter1612);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;
        	case 3:
        	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:261:27: CONSTANTVALUE
        	    {
        	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_distributionParameter1616);
        	        if  (this->hasException())
        	        {
        	            goto ruledistributionParameterEx;
        	        }
        	        if (this->hasFailed())
        	        {
        	            return retval;
        	        }


        	    }
        	    break;

            }
        }
    }
    // This is where rules clean up and exit
    //
    goto ruledistributionParameterEx; /* Prevent compiler warnings */
    ruledistributionParameterEx: ;
    retval.call_stop_placeholder();



    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return retval;
}
/* $ANTLR end distributionParameter */

/**
 * $ANTLR start bernoulli
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:264:1: bernoulli returns [std::list<string> parameters] : BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::bernoulli()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_distributionParameter_return distributionParameter38;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_distributionParameter38;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:265:2: ( BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:265:4: BERNOULLIOPENBRACKET distributionParameter CLOSEBRACKET
        {
             this->matchToken(BERNOULLIOPENBRACKET, &FOLLOW_BERNOULLIOPENBRACKET_in_bernoulli1632);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_bernoulli1634);
            distributionParameter38=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_bernoulli1636);
            if  (this->hasException())
            {
                goto rulebernoulliEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(distributionParameter38.start, distributionParameter38.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebernoulliEx; /* Prevent compiler warnings */
    rulebernoulliEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end bernoulli */

/**
 * $ANTLR start beta
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:268:1: beta returns [std::list<string> parameters] : BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::beta()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_distributionParameter_return dp1;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp1;

    BUGSParser_distributionParameter_return dp2;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:269:2: ( BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:269:4: BETAOPENBRACKET dp1= distributionParameter COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(BETAOPENBRACKET, &FOLLOW_BETAOPENBRACKET_in_beta1653);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1657);
            dp1=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_beta1660);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_beta1664);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_beta1666);
            if  (this->hasException())
            {
                goto rulebetaEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(dp1.start, dp1.stop))
                ); parameters
                .push_back((this->get_strstream()->toStringTT(dp2.start, dp2.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulebetaEx; /* Prevent compiler warnings */
    rulebetaEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end beta */

/**
 * $ANTLR start multinomial
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:272:1: multinomial returns [std::list<string> parameters] : MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::multinomial()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_mvNode_return dp1;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_dp1;

    BUGSParser_distributionParameter_return dp2;
    typedef	BUGSParser_distributionParameter_return RETURN_TYPE_dp2;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:273:2: ( MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:273:4: MUTLTINOMIALOPENBRACKET dp1= mvNode COMMA dp2= distributionParameter CLOSEBRACKET
        {
             this->matchToken(MUTLTINOMIALOPENBRACKET, &FOLLOW_MUTLTINOMIALOPENBRACKET_in_multinomial1683);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_multinomial1687);
            dp1=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(COMMA, &FOLLOW_COMMA_in_multinomial1689);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_distributionParameter_in_multinomial1695);
            dp2=distributionParameter();

            this->followPop();
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_multinomial1697);
            if  (this->hasException())
            {
                goto rulemultinomialEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(dp1.start, dp1.stop))
                ); parameters
                .push_back((this->get_strstream()->toStringTT(dp2.start, dp2.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto rulemultinomialEx; /* Prevent compiler warnings */
    rulemultinomialEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end multinomial */

/**
 * $ANTLR start dirichlet
 * /u/s/h/shrirams/bugsparser/Parser/BUGS.g:277:1: dirichlet returns [std::list<string> parameters] : DIRICHLETOPENBRACKET mvNode CLOSEBRACKET ;
 */
std::list<string>
BUGSParser::dirichlet()
{
        BUGSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      
    std::list<string> parameters;


    BUGSParser_mvNode_return mvNode39;
    typedef	BUGSParser_mvNode_return RETURN_TYPE_mvNode39;

    /* Initialize rule variables
     */


 
    {
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:278:2: ( DIRICHLETOPENBRACKET mvNode CLOSEBRACKET )
        // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:278:4: DIRICHLETOPENBRACKET mvNode CLOSEBRACKET
        {
             this->matchToken(DIRICHLETOPENBRACKET, &FOLLOW_DIRICHLETOPENBRACKET_in_dirichlet1714);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            this->followPush(FOLLOW_mvNode_in_dirichlet1716);
            mvNode39=mvNode();

            this->followPop();
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


             this->matchToken(CLOSEBRACKET, &FOLLOW_CLOSEBRACKET_in_dirichlet1718);
            if  (this->hasException())
            {
                goto ruledirichletEx;
            }
            if (this->hasFailed())
            {
                return parameters;
            }


            if ( this->get_backtracking()==0 )
            {
                parameters
                .push_back((this->get_strstream()->toStringTT(mvNode39.start, mvNode39.stop))
                );
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruledirichletEx; /* Prevent compiler warnings */
    ruledirichletEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return parameters;
}
/* $ANTLR end dirichlet */

// $ANTLR start synpred1_BUGS
void BUGSParser::msynpred1_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:79:3: ( uvNode TILDE )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:79:4: uvNode TILDE
    {
        this->followPush(FOLLOW_uvNode_in_synpred1_BUGS369);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred1_BUGS371);
        if  (this->hasException())
        {
            goto rulesynpred1_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred1_BUGSEx; /* Prevent compiler warnings */
rulesynpred1_BUGSEx: ;

}
// $ANTLR end synpred1_BUGS

// $ANTLR start synpred2_BUGS
void BUGSParser::msynpred2_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:80:4: ( mvNode TILDE )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:80:5: mvNode TILDE
    {
        this->followPush(FOLLOW_mvNode_in_synpred2_BUGS386);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(TILDE, &FOLLOW_TILDE_in_synpred2_BUGS388);
        if  (this->hasException())
        {
            goto rulesynpred2_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred2_BUGSEx; /* Prevent compiler warnings */
rulesynpred2_BUGSEx: ;

}
// $ANTLR end synpred2_BUGS

// $ANTLR start synpred3_BUGS
void BUGSParser::msynpred3_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:4: ( uvNode LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:81:5: uvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_uvNode_in_synpred3_BUGS403);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred3_BUGS405);
        if  (this->hasException())
        {
            goto rulesynpred3_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred3_BUGSEx; /* Prevent compiler warnings */
rulesynpred3_BUGSEx: ;

}
// $ANTLR end synpred3_BUGS

// $ANTLR start synpred4_BUGS
void BUGSParser::msynpred4_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:82:4: ( mvNode LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:82:5: mvNode LEFTPOINTER
    {
        this->followPush(FOLLOW_mvNode_in_synpred4_BUGS420);
        mvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred4_BUGS422);
        if  (this->hasException())
        {
            goto rulesynpred4_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred4_BUGSEx; /* Prevent compiler warnings */
rulesynpred4_BUGSEx: ;

}
// $ANTLR end synpred4_BUGS

// $ANTLR start synpred5_BUGS
void BUGSParser::msynpred5_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:83:4: ( linkFunction LEFTPOINTER )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:83:5: linkFunction LEFTPOINTER
    {
        this->followPush(FOLLOW_linkFunction_in_synpred5_BUGS437);
        linkFunction();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(LEFTPOINTER, &FOLLOW_LEFTPOINTER_in_synpred5_BUGS439);
        if  (this->hasException())
        {
            goto rulesynpred5_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred5_BUGSEx; /* Prevent compiler warnings */
rulesynpred5_BUGSEx: ;

}
// $ANTLR end synpred5_BUGS

// $ANTLR start synpred6_BUGS
void BUGSParser::msynpred6_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:4: ( uvNode )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:89:5: uvNode
    {
        this->followPush(FOLLOW_uvNode_in_synpred6_BUGS478);
        uvNode();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred6_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred6_BUGSEx; /* Prevent compiler warnings */
rulesynpred6_BUGSEx: ;

}
// $ANTLR end synpred6_BUGS

// $ANTLR start synpred7_BUGS
void BUGSParser::msynpred7_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:43: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt29;

        alt29=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt29=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt29=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 29 );
            ex->set_state( 0 );


            goto rulesynpred7_BUGSEx;

        }

        switch (alt29)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:44: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred7_BUGS573);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:103:51: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred7_BUGS575);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred7_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred7_BUGSEx; /* Prevent compiler warnings */
rulesynpred7_BUGSEx: ;

}
// $ANTLR end synpred7_BUGS

// $ANTLR start synpred8_BUGS
void BUGSParser::msynpred8_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:23: ( uvNode | CONSTANTVALUE )

        ANTLR_UINT32 alt30;

        alt30=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt30=1;
        	}
            break;
        case CONSTANTVALUE:
        	{
        		alt30=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 30 );
            ex->set_state( 0 );


            goto rulesynpred8_BUGSEx;

        }

        switch (alt30)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:24: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred8_BUGS607);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:106:31: CONSTANTVALUE
    	    {
    	         this->matchToken(CONSTANTVALUE, &FOLLOW_CONSTANTVALUE_in_synpred8_BUGS609);
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred8_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred8_BUGSEx; /* Prevent compiler warnings */
rulesynpred8_BUGSEx: ;

}
// $ANTLR end synpred8_BUGS

// $ANTLR start synpred9_BUGS
void BUGSParser::msynpred9_BUGS_fragment(  )
{
    {
        //  /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:4: ( uvNode | linkFunction )

        ANTLR_UINT32 alt31;

        alt31=2;

        switch ( this->LA(1) )
        {
        case NODENAME:
        	{
        		alt31=1;
        	}
            break;
        case CLOGLOGOPENBRACKET:
        case LOGITOPENBRACKET:
        case LOGOPENBRACKET:
        case PROBITOPENBRACKET:
        	{
        		alt31=2;
        	}
            break;

        default:
            if (this->get_backtracking()>0)
            {
                this->set_failedflag( true );
                return ;
            }

            ExceptionBaseType* ex = new ANTLR_Exception< BUGSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            ex->set_decisionNum( 31 );
            ex->set_state( 0 );


            goto rulesynpred9_BUGSEx;

        }

        switch (alt31)
        {
    	case 1:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:5: uvNode
    	    {
    	        this->followPush(FOLLOW_uvNode_in_synpred9_BUGS701);
    	        uvNode();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:124:14: linkFunction
    	    {
    	        this->followPush(FOLLOW_linkFunction_in_synpred9_BUGS705);
    	        linkFunction();

    	        this->followPop();
    	        if  (this->hasException())
    	        {
    	            goto rulesynpred9_BUGSEx;
    	        }
    	        if (this->hasFailed())
    	        {
    	            return ;
    	        }


    	    }
    	    break;

        }
    }
// This is where rules clean up and exit
//
goto rulesynpred9_BUGSEx; /* Prevent compiler warnings */
rulesynpred9_BUGSEx: ;

}
// $ANTLR end synpred9_BUGS

// $ANTLR start synpred10_BUGS
void BUGSParser::msynpred10_BUGS_fragment(  )
{
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:4: ( OPENBRACKET expression COLON )
    // /u/s/h/shrirams/bugsparser/Parser/BUGS.g:184:5: OPENBRACKET expression COLON
    {
         this->matchToken(OPENBRACKET, &FOLLOW_OPENBRACKET_in_synpred10_BUGS1120);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


        this->followPush(FOLLOW_expression_in_synpred10_BUGS1122);
        expression();

        this->followPop();
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


         this->matchToken(COLON, &FOLLOW_COLON_in_synpred10_BUGS1124);
        if  (this->hasException())
        {
            goto rulesynpred10_BUGSEx;
        }
        if (this->hasFailed())
        {
            return ;
        }


    }

// This is where rules clean up and exit
//
goto rulesynpred10_BUGSEx; /* Prevent compiler warnings */
rulesynpred10_BUGSEx: ;

}
// $ANTLR end synpred10_BUGS
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred5_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred5_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred1_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred1_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred9_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred9_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred7_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred7_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred2_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred2_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred8_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred8_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred3_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred3_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred10_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred10_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred6_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred6_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

bool BUGSParser::msynpred( antlr3::ClassForwarder< synpred4_BUGS >  )
{
    ANTLR_MARKER   start;
    bool  success;

    this->inc_backtracking();
    start	= this->mark();
    this->msynpred4_BUGS_fragment();	    // can never throw exception
    success	= !( this->get_failedflag() );
    this->rewind(start);
    this->dec_backtracking();
    this->set_failedflag(false);
    return success;
}

/* End of syntactic predicates
 * ==============================================
 */

	}


/* End of code
 * =============================================================================
 */
